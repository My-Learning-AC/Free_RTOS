
001_Tasks_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08006ef4  08006ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e8  080070e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070f0  080070f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080070f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014490  20000078  08007170  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014508  08007170  00024508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192ad  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003329  00000000  00000000  00039355  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  0003c680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003da10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002473a  00000000  00000000  0003ebf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a95  00000000  00000000  00063332  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6ff9  00000000  00000000  00073dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014adc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005678  00000000  00000000  0014ae3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006edc 	.word	0x08006edc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006edc 	.word	0x08006edc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001445c 	.word	0x2001445c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b972 	b.w	8000560 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	4688      	mov	r8, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14b      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4615      	mov	r5, r2
 80002a6:	d967      	bls.n	8000378 <__udivmoddi4+0xe4>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0720 	rsb	r7, r2, #32
 80002b2:	fa01 f302 	lsl.w	r3, r1, r2
 80002b6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ba:	4095      	lsls	r5, r2
 80002bc:	ea47 0803 	orr.w	r8, r7, r3
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002cc:	fa1f fc85 	uxth.w	ip, r5
 80002d0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d8:	fb07 f10c 	mul.w	r1, r7, ip
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18eb      	adds	r3, r5, r3
 80002e2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002e6:	f080 811b 	bcs.w	8000520 <__udivmoddi4+0x28c>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8118 	bls.w	8000520 <__udivmoddi4+0x28c>
 80002f0:	3f02      	subs	r7, #2
 80002f2:	442b      	add	r3, r5
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fc0c 	mul.w	ip, r0, ip
 8000308:	45a4      	cmp	ip, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	192c      	adds	r4, r5, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8107 	bcs.w	8000524 <__udivmoddi4+0x290>
 8000316:	45a4      	cmp	ip, r4
 8000318:	f240 8104 	bls.w	8000524 <__udivmoddi4+0x290>
 800031c:	3802      	subs	r0, #2
 800031e:	442c      	add	r4, r5
 8000320:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000324:	eba4 040c 	sub.w	r4, r4, ip
 8000328:	2700      	movs	r7, #0
 800032a:	b11e      	cbz	r6, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c6 4300 	strd	r4, r3, [r6]
 8000334:	4639      	mov	r1, r7
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0xbe>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80eb 	beq.w	800051a <__udivmoddi4+0x286>
 8000344:	2700      	movs	r7, #0
 8000346:	e9c6 0100 	strd	r0, r1, [r6]
 800034a:	4638      	mov	r0, r7
 800034c:	4639      	mov	r1, r7
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f783 	clz	r7, r3
 8000356:	2f00      	cmp	r7, #0
 8000358:	d147      	bne.n	80003ea <__udivmoddi4+0x156>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0xd0>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80fa 	bhi.w	8000558 <__udivmoddi4+0x2c4>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0303 	sbc.w	r3, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	4698      	mov	r8, r3
 800036e:	2e00      	cmp	r6, #0
 8000370:	d0e0      	beq.n	8000334 <__udivmoddi4+0xa0>
 8000372:	e9c6 4800 	strd	r4, r8, [r6]
 8000376:	e7dd      	b.n	8000334 <__udivmoddi4+0xa0>
 8000378:	b902      	cbnz	r2, 800037c <__udivmoddi4+0xe8>
 800037a:	deff      	udf	#255	; 0xff
 800037c:	fab2 f282 	clz	r2, r2
 8000380:	2a00      	cmp	r2, #0
 8000382:	f040 808f 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000386:	1b49      	subs	r1, r1, r5
 8000388:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800038c:	fa1f f885 	uxth.w	r8, r5
 8000390:	2701      	movs	r7, #1
 8000392:	fbb1 fcfe 	udiv	ip, r1, lr
 8000396:	0c23      	lsrs	r3, r4, #16
 8000398:	fb0e 111c 	mls	r1, lr, ip, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb08 f10c 	mul.w	r1, r8, ip
 80003a4:	4299      	cmp	r1, r3
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a8:	18eb      	adds	r3, r5, r3
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4299      	cmp	r1, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1a59      	subs	r1, r3, r1
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x14c>
 80003d0:	192c      	adds	r4, r5, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x14a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80b6 	bhi.w	800054a <__udivmoddi4+0x2b6>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e79f      	b.n	800032a <__udivmoddi4+0x96>
 80003ea:	f1c7 0c20 	rsb	ip, r7, #32
 80003ee:	40bb      	lsls	r3, r7
 80003f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003f8:	fa01 f407 	lsl.w	r4, r1, r7
 80003fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000400:	fa21 f30c 	lsr.w	r3, r1, ip
 8000404:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000408:	4325      	orrs	r5, r4
 800040a:	fbb3 f9f8 	udiv	r9, r3, r8
 800040e:	0c2c      	lsrs	r4, r5, #16
 8000410:	fb08 3319 	mls	r3, r8, r9, r3
 8000414:	fa1f fa8e 	uxth.w	sl, lr
 8000418:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800041c:	fb09 f40a 	mul.w	r4, r9, sl
 8000420:	429c      	cmp	r4, r3
 8000422:	fa02 f207 	lsl.w	r2, r2, r7
 8000426:	fa00 f107 	lsl.w	r1, r0, r7
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1e 0303 	adds.w	r3, lr, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	f080 8087 	bcs.w	8000546 <__udivmoddi4+0x2b2>
 8000438:	429c      	cmp	r4, r3
 800043a:	f240 8084 	bls.w	8000546 <__udivmoddi4+0x2b2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4473      	add	r3, lr
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	b2ad      	uxth	r5, r5
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000454:	fb00 fa0a 	mul.w	sl, r0, sl
 8000458:	45a2      	cmp	sl, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1e 0404 	adds.w	r4, lr, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	d26b      	bcs.n	800053e <__udivmoddi4+0x2aa>
 8000466:	45a2      	cmp	sl, r4
 8000468:	d969      	bls.n	800053e <__udivmoddi4+0x2aa>
 800046a:	3802      	subs	r0, #2
 800046c:	4474      	add	r4, lr
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	454c      	cmp	r4, r9
 800047c:	46c2      	mov	sl, r8
 800047e:	464b      	mov	r3, r9
 8000480:	d354      	bcc.n	800052c <__udivmoddi4+0x298>
 8000482:	d051      	beq.n	8000528 <__udivmoddi4+0x294>
 8000484:	2e00      	cmp	r6, #0
 8000486:	d069      	beq.n	800055c <__udivmoddi4+0x2c8>
 8000488:	ebb1 050a 	subs.w	r5, r1, sl
 800048c:	eb64 0403 	sbc.w	r4, r4, r3
 8000490:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000494:	40fd      	lsrs	r5, r7
 8000496:	40fc      	lsrs	r4, r7
 8000498:	ea4c 0505 	orr.w	r5, ip, r5
 800049c:	e9c6 5400 	strd	r5, r4, [r6]
 80004a0:	2700      	movs	r7, #0
 80004a2:	e747      	b.n	8000334 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ac:	4095      	lsls	r5, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	fa21 f303 	lsr.w	r3, r1, r3
 80004b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ba:	4338      	orrs	r0, r7
 80004bc:	0c01      	lsrs	r1, r0, #16
 80004be:	fbb3 f7fe 	udiv	r7, r3, lr
 80004c2:	fa1f f885 	uxth.w	r8, r5
 80004c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb07 f308 	mul.w	r3, r7, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x256>
 80004da:	1869      	adds	r1, r5, r1
 80004dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80004e0:	d22f      	bcs.n	8000542 <__udivmoddi4+0x2ae>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d92d      	bls.n	8000542 <__udivmoddi4+0x2ae>
 80004e6:	3f02      	subs	r7, #2
 80004e8:	4429      	add	r1, r5
 80004ea:	1acb      	subs	r3, r1, r3
 80004ec:	b281      	uxth	r1, r0
 80004ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb00 f308 	mul.w	r3, r0, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x27e>
 8000502:	1869      	adds	r1, r5, r1
 8000504:	f100 3cff 	add.w	ip, r0, #4294967295
 8000508:	d217      	bcs.n	800053a <__udivmoddi4+0x2a6>
 800050a:	428b      	cmp	r3, r1
 800050c:	d915      	bls.n	800053a <__udivmoddi4+0x2a6>
 800050e:	3802      	subs	r0, #2
 8000510:	4429      	add	r1, r5
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000518:	e73b      	b.n	8000392 <__udivmoddi4+0xfe>
 800051a:	4637      	mov	r7, r6
 800051c:	4630      	mov	r0, r6
 800051e:	e709      	b.n	8000334 <__udivmoddi4+0xa0>
 8000520:	4607      	mov	r7, r0
 8000522:	e6e7      	b.n	80002f4 <__udivmoddi4+0x60>
 8000524:	4618      	mov	r0, r3
 8000526:	e6fb      	b.n	8000320 <__udivmoddi4+0x8c>
 8000528:	4541      	cmp	r1, r8
 800052a:	d2ab      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 800052c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000530:	eb69 020e 	sbc.w	r2, r9, lr
 8000534:	3801      	subs	r0, #1
 8000536:	4613      	mov	r3, r2
 8000538:	e7a4      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053a:	4660      	mov	r0, ip
 800053c:	e7e9      	b.n	8000512 <__udivmoddi4+0x27e>
 800053e:	4618      	mov	r0, r3
 8000540:	e795      	b.n	800046e <__udivmoddi4+0x1da>
 8000542:	4667      	mov	r7, ip
 8000544:	e7d1      	b.n	80004ea <__udivmoddi4+0x256>
 8000546:	4681      	mov	r9, r0
 8000548:	e77c      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054a:	3802      	subs	r0, #2
 800054c:	442c      	add	r4, r5
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0x14c>
 8000550:	f1ac 0c02 	sub.w	ip, ip, #2
 8000554:	442b      	add	r3, r5
 8000556:	e72f      	b.n	80003b8 <__udivmoddi4+0x124>
 8000558:	4638      	mov	r0, r7
 800055a:	e708      	b.n	800036e <__udivmoddi4+0xda>
 800055c:	4637      	mov	r7, r6
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0xa0>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <HAL_Init+0x40>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <HAL_Init+0x40>)
 800056e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000572:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <HAL_Init+0x40>)
 800057a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800057e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <HAL_Init+0x40>)
 8000586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800058a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058c:	2003      	movs	r0, #3
 800058e:	f000 f8d8 	bl	8000742 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000592:	2000      	movs	r0, #0
 8000594:	f001 fbf6 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000598:	f001 fbcc 	bl	8001d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023c00 	.word	0x40023c00

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	200143d8 	.word	0x200143d8

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200143d8 	.word	0x200143d8

080005e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db0b      	blt.n	8000676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f003 021f 	and.w	r2, r3, #31
 8000664:	4907      	ldr	r1, [pc, #28]	; (8000684 <__NVIC_EnableIRQ+0x38>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	095b      	lsrs	r3, r3, #5
 800066c:	2001      	movs	r0, #1
 800066e:	fa00 f202 	lsl.w	r2, r0, r2
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e100 	.word	0xe000e100

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	490c      	ldr	r1, [pc, #48]	; (80006d4 <__NVIC_SetPriority+0x4c>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4908      	ldr	r1, [pc, #32]	; (80006d8 <__NVIC_SetPriority+0x50>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	3b04      	subs	r3, #4
 80006c0:	0112      	lsls	r2, r2, #4
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	f04f 32ff 	mov.w	r2, #4294967295
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	43da      	mvns	r2, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	401a      	ands	r2, r3
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000724:	f04f 31ff 	mov.w	r1, #4294967295
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	43d9      	mvns	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	4313      	orrs	r3, r2
         );
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff4c 	bl	80005e8 <__NVIC_SetPriorityGrouping>
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800076a:	f7ff ff61 	bl	8000630 <__NVIC_GetPriorityGrouping>
 800076e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	68b9      	ldr	r1, [r7, #8]
 8000774:	6978      	ldr	r0, [r7, #20]
 8000776:	f7ff ffb1 	bl	80006dc <NVIC_EncodePriority>
 800077a:	4602      	mov	r2, r0
 800077c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff80 	bl	8000688 <__NVIC_SetPriority>
}
 8000788:	bf00      	nop
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff54 	bl	800064c <__NVIC_EnableIRQ>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
 80007c6:	e16b      	b.n	8000aa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007c8:	2201      	movs	r2, #1
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	4013      	ands	r3, r2
 80007da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	f040 815a 	bne.w	8000a9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d00b      	beq.n	8000806 <HAL_GPIO_Init+0x5a>
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d007      	beq.n	8000806 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007fa:	2b11      	cmp	r3, #17
 80007fc:	d003      	beq.n	8000806 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b12      	cmp	r3, #18
 8000804:	d130      	bne.n	8000868 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	2203      	movs	r2, #3
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43db      	mvns	r3, r3
 8000818:	69ba      	ldr	r2, [r7, #24]
 800081a:	4013      	ands	r3, r2
 800081c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	68da      	ldr	r2, [r3, #12]
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	4313      	orrs	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800083c:	2201      	movs	r2, #1
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	4013      	ands	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	091b      	lsrs	r3, r3, #4
 8000852:	f003 0201 	and.w	r2, r3, #1
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	69ba      	ldr	r2, [r7, #24]
 800085e:	4313      	orrs	r3, r2
 8000860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	2203      	movs	r2, #3
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	4013      	ands	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	4313      	orrs	r3, r2
 8000890:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d003      	beq.n	80008a8 <HAL_GPIO_Init+0xfc>
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b12      	cmp	r3, #18
 80008a6:	d123      	bne.n	80008f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	08da      	lsrs	r2, r3, #3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3208      	adds	r2, #8
 80008b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	f003 0307 	and.w	r3, r3, #7
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	220f      	movs	r2, #15
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4013      	ands	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	691a      	ldr	r2, [r3, #16]
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	4313      	orrs	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	08da      	lsrs	r2, r3, #3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3208      	adds	r2, #8
 80008ea:	69b9      	ldr	r1, [r7, #24]
 80008ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2203      	movs	r2, #3
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f003 0203 	and.w	r2, r3, #3
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	4313      	orrs	r3, r2
 800091c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092c:	2b00      	cmp	r3, #0
 800092e:	f000 80b4 	beq.w	8000a9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b5f      	ldr	r3, [pc, #380]	; (8000ab4 <HAL_GPIO_Init+0x308>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a5e      	ldr	r2, [pc, #376]	; (8000ab4 <HAL_GPIO_Init+0x308>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <HAL_GPIO_Init+0x308>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800094e:	4a5a      	ldr	r2, [pc, #360]	; (8000ab8 <HAL_GPIO_Init+0x30c>)
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	3302      	adds	r3, #2
 8000956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	220f      	movs	r2, #15
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4013      	ands	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a51      	ldr	r2, [pc, #324]	; (8000abc <HAL_GPIO_Init+0x310>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d02b      	beq.n	80009d2 <HAL_GPIO_Init+0x226>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a50      	ldr	r2, [pc, #320]	; (8000ac0 <HAL_GPIO_Init+0x314>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d025      	beq.n	80009ce <HAL_GPIO_Init+0x222>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a4f      	ldr	r2, [pc, #316]	; (8000ac4 <HAL_GPIO_Init+0x318>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d01f      	beq.n	80009ca <HAL_GPIO_Init+0x21e>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a4e      	ldr	r2, [pc, #312]	; (8000ac8 <HAL_GPIO_Init+0x31c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d019      	beq.n	80009c6 <HAL_GPIO_Init+0x21a>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a4d      	ldr	r2, [pc, #308]	; (8000acc <HAL_GPIO_Init+0x320>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d013      	beq.n	80009c2 <HAL_GPIO_Init+0x216>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a4c      	ldr	r2, [pc, #304]	; (8000ad0 <HAL_GPIO_Init+0x324>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d00d      	beq.n	80009be <HAL_GPIO_Init+0x212>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a4b      	ldr	r2, [pc, #300]	; (8000ad4 <HAL_GPIO_Init+0x328>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d007      	beq.n	80009ba <HAL_GPIO_Init+0x20e>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a4a      	ldr	r2, [pc, #296]	; (8000ad8 <HAL_GPIO_Init+0x32c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_GPIO_Init+0x20a>
 80009b2:	2307      	movs	r3, #7
 80009b4:	e00e      	b.n	80009d4 <HAL_GPIO_Init+0x228>
 80009b6:	2308      	movs	r3, #8
 80009b8:	e00c      	b.n	80009d4 <HAL_GPIO_Init+0x228>
 80009ba:	2306      	movs	r3, #6
 80009bc:	e00a      	b.n	80009d4 <HAL_GPIO_Init+0x228>
 80009be:	2305      	movs	r3, #5
 80009c0:	e008      	b.n	80009d4 <HAL_GPIO_Init+0x228>
 80009c2:	2304      	movs	r3, #4
 80009c4:	e006      	b.n	80009d4 <HAL_GPIO_Init+0x228>
 80009c6:	2303      	movs	r3, #3
 80009c8:	e004      	b.n	80009d4 <HAL_GPIO_Init+0x228>
 80009ca:	2302      	movs	r3, #2
 80009cc:	e002      	b.n	80009d4 <HAL_GPIO_Init+0x228>
 80009ce:	2301      	movs	r3, #1
 80009d0:	e000      	b.n	80009d4 <HAL_GPIO_Init+0x228>
 80009d2:	2300      	movs	r3, #0
 80009d4:	69fa      	ldr	r2, [r7, #28]
 80009d6:	f002 0203 	and.w	r2, r2, #3
 80009da:	0092      	lsls	r2, r2, #2
 80009dc:	4093      	lsls	r3, r2
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009e4:	4934      	ldr	r1, [pc, #208]	; (8000ab8 <HAL_GPIO_Init+0x30c>)
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	3302      	adds	r3, #2
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009f2:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <HAL_GPIO_Init+0x330>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	43db      	mvns	r3, r3
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	4013      	ands	r3, r2
 8000a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a16:	4a31      	ldr	r2, [pc, #196]	; (8000adc <HAL_GPIO_Init+0x330>)
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <HAL_GPIO_Init+0x330>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d003      	beq.n	8000a40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a40:	4a26      	ldr	r2, [pc, #152]	; (8000adc <HAL_GPIO_Init+0x330>)
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <HAL_GPIO_Init+0x330>)
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4013      	ands	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <HAL_GPIO_Init+0x330>)
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_GPIO_Init+0x330>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a94:	4a11      	ldr	r2, [pc, #68]	; (8000adc <HAL_GPIO_Init+0x330>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	2b0f      	cmp	r3, #15
 8000aa4:	f67f ae90 	bls.w	80007c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3724      	adds	r7, #36	; 0x24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40013800 	.word	0x40013800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020c00 	.word	0x40020c00
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40021400 	.word	0x40021400
 8000ad4:	40021800 	.word	0x40021800
 8000ad8:	40021c00 	.word	0x40021c00
 8000adc:	40013c00 	.word	0x40013c00

08000ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
 8000aec:	4613      	mov	r3, r2
 8000aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000af0:	787b      	ldrb	r3, [r7, #1]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000af6:	887a      	ldrh	r2, [r7, #2]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000afc:	e003      	b.n	8000b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000afe:	887b      	ldrh	r3, [r7, #2]
 8000b00:	041a      	lsls	r2, r3, #16
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	619a      	str	r2, [r3, #24]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e25b      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d075      	beq.n	8000c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b32:	4ba3      	ldr	r3, [pc, #652]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	f003 030c 	and.w	r3, r3, #12
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d00c      	beq.n	8000b58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b3e:	4ba0      	ldr	r3, [pc, #640]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b46:	2b08      	cmp	r3, #8
 8000b48:	d112      	bne.n	8000b70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b4a:	4b9d      	ldr	r3, [pc, #628]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b56:	d10b      	bne.n	8000b70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b58:	4b99      	ldr	r3, [pc, #612]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d05b      	beq.n	8000c1c <HAL_RCC_OscConfig+0x108>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d157      	bne.n	8000c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e236      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b78:	d106      	bne.n	8000b88 <HAL_RCC_OscConfig+0x74>
 8000b7a:	4b91      	ldr	r3, [pc, #580]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a90      	ldr	r2, [pc, #576]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	e01d      	b.n	8000bc4 <HAL_RCC_OscConfig+0xb0>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b90:	d10c      	bne.n	8000bac <HAL_RCC_OscConfig+0x98>
 8000b92:	4b8b      	ldr	r3, [pc, #556]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a8a      	ldr	r2, [pc, #552]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	4b88      	ldr	r3, [pc, #544]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a87      	ldr	r2, [pc, #540]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e00b      	b.n	8000bc4 <HAL_RCC_OscConfig+0xb0>
 8000bac:	4b84      	ldr	r3, [pc, #528]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a83      	ldr	r2, [pc, #524]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b81      	ldr	r3, [pc, #516]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a80      	ldr	r2, [pc, #512]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d013      	beq.n	8000bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fd00 	bl	80005d0 <HAL_GetTick>
 8000bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd4:	f7ff fcfc 	bl	80005d0 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b64      	cmp	r3, #100	; 0x64
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e1fb      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be6:	4b76      	ldr	r3, [pc, #472]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f0      	beq.n	8000bd4 <HAL_RCC_OscConfig+0xc0>
 8000bf2:	e014      	b.n	8000c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fcec 	bl	80005d0 <HAL_GetTick>
 8000bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bfc:	f7ff fce8 	bl	80005d0 <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b64      	cmp	r3, #100	; 0x64
 8000c08:	d901      	bls.n	8000c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e1e7      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0e:	4b6c      	ldr	r3, [pc, #432]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1f0      	bne.n	8000bfc <HAL_RCC_OscConfig+0xe8>
 8000c1a:	e000      	b.n	8000c1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d063      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c2a:	4b65      	ldr	r3, [pc, #404]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f003 030c 	and.w	r3, r3, #12
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00b      	beq.n	8000c4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c36:	4b62      	ldr	r3, [pc, #392]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d11c      	bne.n	8000c7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c42:	4b5f      	ldr	r3, [pc, #380]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d116      	bne.n	8000c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4e:	4b5c      	ldr	r3, [pc, #368]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d005      	beq.n	8000c66 <HAL_RCC_OscConfig+0x152>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d001      	beq.n	8000c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e1bb      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c66:	4b56      	ldr	r3, [pc, #344]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	4952      	ldr	r1, [pc, #328]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c7a:	e03a      	b.n	8000cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d020      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c84:	4b4f      	ldr	r3, [pc, #316]	; (8000dc4 <HAL_RCC_OscConfig+0x2b0>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c8a:	f7ff fca1 	bl	80005d0 <HAL_GetTick>
 8000c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c90:	e008      	b.n	8000ca4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c92:	f7ff fc9d 	bl	80005d0 <HAL_GetTick>
 8000c96:	4602      	mov	r2, r0
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d901      	bls.n	8000ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e19c      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0f0      	beq.n	8000c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb0:	4b43      	ldr	r3, [pc, #268]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4940      	ldr	r1, [pc, #256]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
 8000cc4:	e015      	b.n	8000cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc6:	4b3f      	ldr	r3, [pc, #252]	; (8000dc4 <HAL_RCC_OscConfig+0x2b0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fc80 	bl	80005d0 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd4:	f7ff fc7c 	bl	80005d0 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e17b      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce6:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f0      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d030      	beq.n	8000d60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d016      	beq.n	8000d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <HAL_RCC_OscConfig+0x2b4>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d0c:	f7ff fc60 	bl	80005d0 <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d14:	f7ff fc5c 	bl	80005d0 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e15b      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f0      	beq.n	8000d14 <HAL_RCC_OscConfig+0x200>
 8000d32:	e015      	b.n	8000d60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <HAL_RCC_OscConfig+0x2b4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3a:	f7ff fc49 	bl	80005d0 <HAL_GetTick>
 8000d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d40:	e008      	b.n	8000d54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d42:	f7ff fc45 	bl	80005d0 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d901      	bls.n	8000d54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e144      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1f0      	bne.n	8000d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f000 80a0 	beq.w	8000eae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10f      	bne.n	8000d9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_RCC_OscConfig+0x2ac>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_RCC_OscConfig+0x2b8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d121      	bne.n	8000dee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_RCC_OscConfig+0x2b8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_RCC_OscConfig+0x2b8>)
 8000db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000db6:	f7ff fc0b 	bl	80005d0 <HAL_GetTick>
 8000dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dbc:	e011      	b.n	8000de2 <HAL_RCC_OscConfig+0x2ce>
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	42470000 	.word	0x42470000
 8000dc8:	42470e80 	.word	0x42470e80
 8000dcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dd0:	f7ff fbfe 	bl	80005d0 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e0fd      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de2:	4b81      	ldr	r3, [pc, #516]	; (8000fe8 <HAL_RCC_OscConfig+0x4d4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d106      	bne.n	8000e04 <HAL_RCC_OscConfig+0x2f0>
 8000df6:	4b7d      	ldr	r3, [pc, #500]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dfa:	4a7c      	ldr	r2, [pc, #496]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6713      	str	r3, [r2, #112]	; 0x70
 8000e02:	e01c      	b.n	8000e3e <HAL_RCC_OscConfig+0x32a>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2b05      	cmp	r3, #5
 8000e0a:	d10c      	bne.n	8000e26 <HAL_RCC_OscConfig+0x312>
 8000e0c:	4b77      	ldr	r3, [pc, #476]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e10:	4a76      	ldr	r2, [pc, #472]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6713      	str	r3, [r2, #112]	; 0x70
 8000e18:	4b74      	ldr	r3, [pc, #464]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e1c:	4a73      	ldr	r2, [pc, #460]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6713      	str	r3, [r2, #112]	; 0x70
 8000e24:	e00b      	b.n	8000e3e <HAL_RCC_OscConfig+0x32a>
 8000e26:	4b71      	ldr	r3, [pc, #452]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e2a:	4a70      	ldr	r2, [pc, #448]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	6713      	str	r3, [r2, #112]	; 0x70
 8000e32:	4b6e      	ldr	r3, [pc, #440]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e36:	4a6d      	ldr	r2, [pc, #436]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000e38:	f023 0304 	bic.w	r3, r3, #4
 8000e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d015      	beq.n	8000e72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e46:	f7ff fbc3 	bl	80005d0 <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e4c:	e00a      	b.n	8000e64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e4e:	f7ff fbbf 	bl	80005d0 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e0bc      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e64:	4b61      	ldr	r3, [pc, #388]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0ee      	beq.n	8000e4e <HAL_RCC_OscConfig+0x33a>
 8000e70:	e014      	b.n	8000e9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e72:	f7ff fbad 	bl	80005d0 <HAL_GetTick>
 8000e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e78:	e00a      	b.n	8000e90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e7a:	f7ff fba9 	bl	80005d0 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e0a6      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e90:	4b56      	ldr	r3, [pc, #344]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1ee      	bne.n	8000e7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d105      	bne.n	8000eae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ea2:	4b52      	ldr	r3, [pc, #328]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a51      	ldr	r2, [pc, #324]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8092 	beq.w	8000fdc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000eb8:	4b4c      	ldr	r3, [pc, #304]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d05c      	beq.n	8000f7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d141      	bne.n	8000f50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ecc:	4b48      	ldr	r3, [pc, #288]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed2:	f7ff fb7d 	bl	80005d0 <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eda:	f7ff fb79 	bl	80005d0 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e078      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eec:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1f0      	bne.n	8000eda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69da      	ldr	r2, [r3, #28]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	019b      	lsls	r3, r3, #6
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0e:	085b      	lsrs	r3, r3, #1
 8000f10:	3b01      	subs	r3, #1
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1a:	061b      	lsls	r3, r3, #24
 8000f1c:	4933      	ldr	r1, [pc, #204]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f22:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fb52 	bl	80005d0 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f30:	f7ff fb4e 	bl	80005d0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e04d      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f0      	beq.n	8000f30 <HAL_RCC_OscConfig+0x41c>
 8000f4e:	e045      	b.n	8000fdc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <HAL_RCC_OscConfig+0x4dc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fb3b 	bl	80005d0 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f5e:	f7ff fb37 	bl	80005d0 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e036      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f0      	bne.n	8000f5e <HAL_RCC_OscConfig+0x44a>
 8000f7c:	e02e      	b.n	8000fdc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d101      	bne.n	8000f8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e029      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_RCC_OscConfig+0x4d8>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d11c      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d115      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d10d      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d106      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d001      	beq.n	8000fdc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40007000 	.word	0x40007000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	42470060 	.word	0x42470060

08000ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e0cc      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001008:	4b68      	ldr	r3, [pc, #416]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 030f 	and.w	r3, r3, #15
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	429a      	cmp	r2, r3
 8001014:	d90c      	bls.n	8001030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001016:	4b65      	ldr	r3, [pc, #404]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800101e:	4b63      	ldr	r3, [pc, #396]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d001      	beq.n	8001030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e0b8      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d020      	beq.n	800107e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001048:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4a58      	ldr	r2, [pc, #352]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 800104e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001060:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800106a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800106c:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	494d      	ldr	r1, [pc, #308]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	4313      	orrs	r3, r2
 800107c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d044      	beq.n	8001114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d107      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d119      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e07f      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d003      	beq.n	80010b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d107      	bne.n	80010c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010b2:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d109      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e06f      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c2:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e067      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010d2:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f023 0203 	bic.w	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	4934      	ldr	r1, [pc, #208]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010e4:	f7ff fa74 	bl	80005d0 <HAL_GetTick>
 80010e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ea:	e00a      	b.n	8001102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ec:	f7ff fa70 	bl	80005d0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e04f      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001102:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 020c 	and.w	r2, r3, #12
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	429a      	cmp	r2, r3
 8001112:	d1eb      	bne.n	80010ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d20c      	bcs.n	800113c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d001      	beq.n	800113c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e032      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4916      	ldr	r1, [pc, #88]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	4313      	orrs	r3, r2
 8001158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d009      	beq.n	800117a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	490e      	ldr	r1, [pc, #56]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	4313      	orrs	r3, r2
 8001178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800117a:	f000 f821 	bl	80011c0 <HAL_RCC_GetSysClockFreq>
 800117e:	4601      	mov	r1, r0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 800118c:	5cd3      	ldrb	r3, [r2, r3]
 800118e:	fa21 f303 	lsr.w	r3, r1, r3
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_RCC_ClockConfig+0x1c8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fdf2 	bl	8001d84 <HAL_InitTick>

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023c00 	.word	0x40023c00
 80011b0:	40023800 	.word	0x40023800
 80011b4:	08007058 	.word	0x08007058
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000000 	.word	0x20000000

080011c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011d6:	4b63      	ldr	r3, [pc, #396]	; (8001364 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d007      	beq.n	80011f2 <HAL_RCC_GetSysClockFreq+0x32>
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d008      	beq.n	80011f8 <HAL_RCC_GetSysClockFreq+0x38>
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f040 80b4 	bne.w	8001354 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011ec:	4b5e      	ldr	r3, [pc, #376]	; (8001368 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80011ee:	60bb      	str	r3, [r7, #8]
       break;
 80011f0:	e0b3      	b.n	800135a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011f2:	4b5e      	ldr	r3, [pc, #376]	; (800136c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80011f4:	60bb      	str	r3, [r7, #8]
      break;
 80011f6:	e0b0      	b.n	800135a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f8:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001200:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001202:	4b58      	ldr	r3, [pc, #352]	; (8001364 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d04a      	beq.n	80012a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800120e:	4b55      	ldr	r3, [pc, #340]	; (8001364 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	099b      	lsrs	r3, r3, #6
 8001214:	f04f 0400 	mov.w	r4, #0
 8001218:	f240 11ff 	movw	r1, #511	; 0x1ff
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	ea03 0501 	and.w	r5, r3, r1
 8001224:	ea04 0602 	and.w	r6, r4, r2
 8001228:	4629      	mov	r1, r5
 800122a:	4632      	mov	r2, r6
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	f04f 0400 	mov.w	r4, #0
 8001234:	0154      	lsls	r4, r2, #5
 8001236:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800123a:	014b      	lsls	r3, r1, #5
 800123c:	4619      	mov	r1, r3
 800123e:	4622      	mov	r2, r4
 8001240:	1b49      	subs	r1, r1, r5
 8001242:	eb62 0206 	sbc.w	r2, r2, r6
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	f04f 0400 	mov.w	r4, #0
 800124e:	0194      	lsls	r4, r2, #6
 8001250:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001254:	018b      	lsls	r3, r1, #6
 8001256:	1a5b      	subs	r3, r3, r1
 8001258:	eb64 0402 	sbc.w	r4, r4, r2
 800125c:	f04f 0100 	mov.w	r1, #0
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	00e2      	lsls	r2, r4, #3
 8001266:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800126a:	00d9      	lsls	r1, r3, #3
 800126c:	460b      	mov	r3, r1
 800126e:	4614      	mov	r4, r2
 8001270:	195b      	adds	r3, r3, r5
 8001272:	eb44 0406 	adc.w	r4, r4, r6
 8001276:	f04f 0100 	mov.w	r1, #0
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	0262      	lsls	r2, r4, #9
 8001280:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001284:	0259      	lsls	r1, r3, #9
 8001286:	460b      	mov	r3, r1
 8001288:	4614      	mov	r4, r2
 800128a:	4618      	mov	r0, r3
 800128c:	4621      	mov	r1, r4
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f04f 0400 	mov.w	r4, #0
 8001294:	461a      	mov	r2, r3
 8001296:	4623      	mov	r3, r4
 8001298:	f7fe ffe4 	bl	8000264 <__aeabi_uldivmod>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e049      	b.n	8001338 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	099b      	lsrs	r3, r3, #6
 80012aa:	f04f 0400 	mov.w	r4, #0
 80012ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	ea03 0501 	and.w	r5, r3, r1
 80012ba:	ea04 0602 	and.w	r6, r4, r2
 80012be:	4629      	mov	r1, r5
 80012c0:	4632      	mov	r2, r6
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	f04f 0400 	mov.w	r4, #0
 80012ca:	0154      	lsls	r4, r2, #5
 80012cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012d0:	014b      	lsls	r3, r1, #5
 80012d2:	4619      	mov	r1, r3
 80012d4:	4622      	mov	r2, r4
 80012d6:	1b49      	subs	r1, r1, r5
 80012d8:	eb62 0206 	sbc.w	r2, r2, r6
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	f04f 0400 	mov.w	r4, #0
 80012e4:	0194      	lsls	r4, r2, #6
 80012e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012ea:	018b      	lsls	r3, r1, #6
 80012ec:	1a5b      	subs	r3, r3, r1
 80012ee:	eb64 0402 	sbc.w	r4, r4, r2
 80012f2:	f04f 0100 	mov.w	r1, #0
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	00e2      	lsls	r2, r4, #3
 80012fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001300:	00d9      	lsls	r1, r3, #3
 8001302:	460b      	mov	r3, r1
 8001304:	4614      	mov	r4, r2
 8001306:	195b      	adds	r3, r3, r5
 8001308:	eb44 0406 	adc.w	r4, r4, r6
 800130c:	f04f 0100 	mov.w	r1, #0
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	02a2      	lsls	r2, r4, #10
 8001316:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800131a:	0299      	lsls	r1, r3, #10
 800131c:	460b      	mov	r3, r1
 800131e:	4614      	mov	r4, r2
 8001320:	4618      	mov	r0, r3
 8001322:	4621      	mov	r1, r4
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f04f 0400 	mov.w	r4, #0
 800132a:	461a      	mov	r2, r3
 800132c:	4623      	mov	r3, r4
 800132e:	f7fe ff99 	bl	8000264 <__aeabi_uldivmod>
 8001332:	4603      	mov	r3, r0
 8001334:	460c      	mov	r4, r1
 8001336:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	0c1b      	lsrs	r3, r3, #16
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	3301      	adds	r3, #1
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001350:	60bb      	str	r3, [r7, #8]
      break;
 8001352:	e002      	b.n	800135a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001356:	60bb      	str	r3, [r7, #8]
      break;
 8001358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800135a:	68bb      	ldr	r3, [r7, #8]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001364:	40023800 	.word	0x40023800
 8001368:	00f42400 	.word	0x00f42400
 800136c:	007a1200 	.word	0x007a1200

08001370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_RCC_GetHCLKFreq+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008

08001388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800138c:	f7ff fff0 	bl	8001370 <HAL_RCC_GetHCLKFreq>
 8001390:	4601      	mov	r1, r0
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	0a9b      	lsrs	r3, r3, #10
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	4a03      	ldr	r2, [pc, #12]	; (80013ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	08007068 	.word	0x08007068

080013b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	220f      	movs	r2, #15
 80013be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_RCC_GetClockConfig+0x5c>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_RCC_GetClockConfig+0x5c>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_RCC_GetClockConfig+0x5c>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_RCC_GetClockConfig+0x5c>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_RCC_GetClockConfig+0x60>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 020f 	and.w	r2, r3, #15
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	601a      	str	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40023c00 	.word	0x40023c00

08001414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e01d      	b.n	8001462 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f815 	bl	800146a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3304      	adds	r3, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4610      	mov	r0, r2
 8001454:	f000 f968 	bl	8001728 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800147e:	b480      	push	{r7}
 8001480:	b085      	sub	sp, #20
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f042 0201 	orr.w	r2, r2, #1
 8001494:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	d007      	beq.n	80014b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d122      	bne.n	8001522 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d11b      	bne.n	8001522 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f06f 0202 	mvn.w	r2, #2
 80014f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f8ee 	bl	80016ea <HAL_TIM_IC_CaptureCallback>
 800150e:	e005      	b.n	800151c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f8e0 	bl	80016d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f8f1 	bl	80016fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b04      	cmp	r3, #4
 800152e:	d122      	bne.n	8001576 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b04      	cmp	r3, #4
 800153c:	d11b      	bne.n	8001576 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f06f 0204 	mvn.w	r2, #4
 8001546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f8c4 	bl	80016ea <HAL_TIM_IC_CaptureCallback>
 8001562:	e005      	b.n	8001570 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f8b6 	bl	80016d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f8c7 	bl	80016fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b08      	cmp	r3, #8
 8001582:	d122      	bne.n	80015ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b08      	cmp	r3, #8
 8001590:	d11b      	bne.n	80015ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f06f 0208 	mvn.w	r2, #8
 800159a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2204      	movs	r2, #4
 80015a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f89a 	bl	80016ea <HAL_TIM_IC_CaptureCallback>
 80015b6:	e005      	b.n	80015c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f88c 	bl	80016d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f89d 	bl	80016fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b10      	cmp	r3, #16
 80015d6:	d122      	bne.n	800161e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b10      	cmp	r3, #16
 80015e4:	d11b      	bne.n	800161e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f06f 0210 	mvn.w	r2, #16
 80015ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2208      	movs	r2, #8
 80015f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f870 	bl	80016ea <HAL_TIM_IC_CaptureCallback>
 800160a:	e005      	b.n	8001618 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f862 	bl	80016d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f873 	bl	80016fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b01      	cmp	r3, #1
 800162a:	d10e      	bne.n	800164a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b01      	cmp	r3, #1
 8001638:	d107      	bne.n	800164a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f06f 0201 	mvn.w	r2, #1
 8001642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fb5b 	bl	8001d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001654:	2b80      	cmp	r3, #128	; 0x80
 8001656:	d10e      	bne.n	8001676 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001662:	2b80      	cmp	r3, #128	; 0x80
 8001664:	d107      	bne.n	8001676 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800166e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f903 	bl	800187c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001680:	2b40      	cmp	r3, #64	; 0x40
 8001682:	d10e      	bne.n	80016a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168e:	2b40      	cmp	r3, #64	; 0x40
 8001690:	d107      	bne.n	80016a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800169a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f838 	bl	8001712 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	f003 0320 	and.w	r3, r3, #32
 80016ac:	2b20      	cmp	r3, #32
 80016ae:	d10e      	bne.n	80016ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	d107      	bne.n	80016ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f06f 0220 	mvn.w	r2, #32
 80016c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f8cd 	bl	8001868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a40      	ldr	r2, [pc, #256]	; (800183c <TIM_Base_SetConfig+0x114>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d013      	beq.n	8001768 <TIM_Base_SetConfig+0x40>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001746:	d00f      	beq.n	8001768 <TIM_Base_SetConfig+0x40>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a3d      	ldr	r2, [pc, #244]	; (8001840 <TIM_Base_SetConfig+0x118>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d00b      	beq.n	8001768 <TIM_Base_SetConfig+0x40>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a3c      	ldr	r2, [pc, #240]	; (8001844 <TIM_Base_SetConfig+0x11c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d007      	beq.n	8001768 <TIM_Base_SetConfig+0x40>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a3b      	ldr	r2, [pc, #236]	; (8001848 <TIM_Base_SetConfig+0x120>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d003      	beq.n	8001768 <TIM_Base_SetConfig+0x40>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a3a      	ldr	r2, [pc, #232]	; (800184c <TIM_Base_SetConfig+0x124>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d108      	bne.n	800177a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800176e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a2f      	ldr	r2, [pc, #188]	; (800183c <TIM_Base_SetConfig+0x114>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d02b      	beq.n	80017da <TIM_Base_SetConfig+0xb2>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001788:	d027      	beq.n	80017da <TIM_Base_SetConfig+0xb2>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a2c      	ldr	r2, [pc, #176]	; (8001840 <TIM_Base_SetConfig+0x118>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d023      	beq.n	80017da <TIM_Base_SetConfig+0xb2>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a2b      	ldr	r2, [pc, #172]	; (8001844 <TIM_Base_SetConfig+0x11c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <TIM_Base_SetConfig+0xb2>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a2a      	ldr	r2, [pc, #168]	; (8001848 <TIM_Base_SetConfig+0x120>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d01b      	beq.n	80017da <TIM_Base_SetConfig+0xb2>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a29      	ldr	r2, [pc, #164]	; (800184c <TIM_Base_SetConfig+0x124>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d017      	beq.n	80017da <TIM_Base_SetConfig+0xb2>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a28      	ldr	r2, [pc, #160]	; (8001850 <TIM_Base_SetConfig+0x128>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <TIM_Base_SetConfig+0xb2>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a27      	ldr	r2, [pc, #156]	; (8001854 <TIM_Base_SetConfig+0x12c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00f      	beq.n	80017da <TIM_Base_SetConfig+0xb2>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a26      	ldr	r2, [pc, #152]	; (8001858 <TIM_Base_SetConfig+0x130>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00b      	beq.n	80017da <TIM_Base_SetConfig+0xb2>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a25      	ldr	r2, [pc, #148]	; (800185c <TIM_Base_SetConfig+0x134>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <TIM_Base_SetConfig+0xb2>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a24      	ldr	r2, [pc, #144]	; (8001860 <TIM_Base_SetConfig+0x138>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d003      	beq.n	80017da <TIM_Base_SetConfig+0xb2>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a23      	ldr	r2, [pc, #140]	; (8001864 <TIM_Base_SetConfig+0x13c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d108      	bne.n	80017ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <TIM_Base_SetConfig+0x114>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d003      	beq.n	8001820 <TIM_Base_SetConfig+0xf8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <TIM_Base_SetConfig+0x124>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d103      	bne.n	8001828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	615a      	str	r2, [r3, #20]
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40010000 	.word	0x40010000
 8001840:	40000400 	.word	0x40000400
 8001844:	40000800 	.word	0x40000800
 8001848:	40000c00 	.word	0x40000c00
 800184c:	40010400 	.word	0x40010400
 8001850:	40014000 	.word	0x40014000
 8001854:	40014400 	.word	0x40014400
 8001858:	40014800 	.word	0x40014800
 800185c:	40001800 	.word	0x40001800
 8001860:	40001c00 	.word	0x40001c00
 8001864:	40002000 	.word	0x40002000

08001868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001896:	f7fe fe65 	bl	8000564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189a:	f000 f859 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189e:	f000 f8c1 	bl	8001a24 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  // Enable the cycle counter
  DWT_CTRL |= (1 << 0);
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <main+0x9c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a21      	ldr	r2, [pc, #132]	; (800192c <main+0x9c>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80018ae:	f003 f837 	bl	8004920 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 80018b2:	f004 f895 	bl	80059e0 <SEGGER_SYSVIEW_Start>




  printf("Calling the printf() function to avoid HardFault \n");
 80018b6:	481e      	ldr	r0, [pc, #120]	; (8001930 <main+0xa0>)
 80018b8:	f004 ff16 	bl	80066e8 <puts>

  status = xTaskCreate(task1_handler, "Task1", 200, "Hello World from Task-1", 2, &task1_handle);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	2302      	movs	r3, #2
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <main+0xa4>)
 80018c8:	22c8      	movs	r2, #200	; 0xc8
 80018ca:	491b      	ldr	r1, [pc, #108]	; (8001938 <main+0xa8>)
 80018cc:	481b      	ldr	r0, [pc, #108]	; (800193c <main+0xac>)
 80018ce:	f001 f99b 	bl	8002c08 <xTaskCreate>
 80018d2:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d009      	beq.n	80018ee <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80018da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018de:	f383 8811 	msr	BASEPRI, r3
 80018e2:	f3bf 8f6f 	isb	sy
 80018e6:	f3bf 8f4f 	dsb	sy
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	e7fe      	b.n	80018ec <main+0x5c>


  status = xTaskCreate(task2_handler, "Task2", 200, "Hello World from Task-2", 2, &task2_handle);
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	2302      	movs	r3, #2
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <main+0xb0>)
 80018f8:	22c8      	movs	r2, #200	; 0xc8
 80018fa:	4912      	ldr	r1, [pc, #72]	; (8001944 <main+0xb4>)
 80018fc:	4812      	ldr	r0, [pc, #72]	; (8001948 <main+0xb8>)
 80018fe:	f001 f983 	bl	8002c08 <xTaskCreate>
 8001902:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d009      	beq.n	800191e <main+0x8e>
 800190a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190e:	f383 8811 	msr	BASEPRI, r3
 8001912:	f3bf 8f6f 	isb	sy
 8001916:	f3bf 8f4f 	dsb	sy
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	e7fe      	b.n	800191c <main+0x8c>


  // Start the FreeRTOS scheduler
  vTaskStartScheduler();
 800191e:	f001 fad5 	bl	8002ecc <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello World\n");
 8001922:	480a      	ldr	r0, [pc, #40]	; (800194c <main+0xbc>)
 8001924:	f004 fee0 	bl	80066e8 <puts>
 8001928:	e7fb      	b.n	8001922 <main+0x92>
 800192a:	bf00      	nop
 800192c:	e0001000 	.word	0xe0001000
 8001930:	08006ef4 	.word	0x08006ef4
 8001934:	08006f28 	.word	0x08006f28
 8001938:	08006f40 	.word	0x08006f40
 800193c:	08001ce1 	.word	0x08001ce1
 8001940:	08006f48 	.word	0x08006f48
 8001944:	08006f60 	.word	0x08006f60
 8001948:	08001cf1 	.word	0x08001cf1
 800194c:	08006f68 	.word	0x08006f68

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b094      	sub	sp, #80	; 0x50
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	2230      	movs	r2, #48	; 0x30
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f004 fe5e 	bl	8006620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <SystemClock_Config+0xcc>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <SystemClock_Config+0xcc>)
 800197e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001982:	6413      	str	r3, [r2, #64]	; 0x40
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <SystemClock_Config+0xcc>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <SystemClock_Config+0xd0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <SystemClock_Config+0xd0>)
 800199a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <SystemClock_Config+0xd0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ac:	2302      	movs	r3, #2
 80019ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b0:	2301      	movs	r3, #1
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b4:	2310      	movs	r3, #16
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b8:	2302      	movs	r3, #2
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019bc:	2300      	movs	r3, #0
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019c0:	2308      	movs	r3, #8
 80019c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80019c4:	2332      	movs	r3, #50	; 0x32
 80019c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019c8:	2304      	movs	r3, #4
 80019ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019cc:	2307      	movs	r3, #7
 80019ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff f89d 	bl	8000b14 <HAL_RCC_OscConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019e0:	f000 f9a0 	bl	8001d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e4:	230f      	movs	r3, #15
 80019e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e8:	2302      	movs	r3, #2
 80019ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80019f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80019f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff faf6 	bl	8000ff4 <HAL_RCC_ClockConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a0e:	f000 f989 	bl	8001d24 <Error_Handler>
  }
}
 8001a12:	bf00      	nop
 8001a14:	3750      	adds	r7, #80	; 0x50
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40007000 	.word	0x40007000

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	4ba1      	ldr	r3, [pc, #644]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4aa0      	ldr	r2, [pc, #640]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001a44:	f043 0310 	orr.w	r3, r3, #16
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b9e      	ldr	r3, [pc, #632]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	4b9a      	ldr	r3, [pc, #616]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a99      	ldr	r2, [pc, #612]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b97      	ldr	r3, [pc, #604]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b93      	ldr	r3, [pc, #588]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a92      	ldr	r2, [pc, #584]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b90      	ldr	r3, [pc, #576]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b8c      	ldr	r3, [pc, #560]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a8b      	ldr	r2, [pc, #556]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b89      	ldr	r3, [pc, #548]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b85      	ldr	r3, [pc, #532]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a84      	ldr	r2, [pc, #528]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b82      	ldr	r3, [pc, #520]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b7e      	ldr	r3, [pc, #504]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a7d      	ldr	r2, [pc, #500]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b7b      	ldr	r3, [pc, #492]	; (8001cc4 <MX_GPIO_Init+0x2a0>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2108      	movs	r1, #8
 8001ae6:	4878      	ldr	r0, [pc, #480]	; (8001cc8 <MX_GPIO_Init+0x2a4>)
 8001ae8:	f7fe fffa 	bl	8000ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	2101      	movs	r1, #1
 8001af0:	4876      	ldr	r0, [pc, #472]	; (8001ccc <MX_GPIO_Init+0x2a8>)
 8001af2:	f7fe fff5 	bl	8000ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001af6:	2200      	movs	r2, #0
 8001af8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001afc:	4874      	ldr	r0, [pc, #464]	; (8001cd0 <MX_GPIO_Init+0x2ac>)
 8001afe:	f7fe ffef 	bl	8000ae0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001b02:	2308      	movs	r3, #8
 8001b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	486b      	ldr	r0, [pc, #428]	; (8001cc8 <MX_GPIO_Init+0x2a4>)
 8001b1a:	f7fe fe47 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4865      	ldr	r0, [pc, #404]	; (8001ccc <MX_GPIO_Init+0x2a8>)
 8001b36:	f7fe fe39 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	485d      	ldr	r0, [pc, #372]	; (8001ccc <MX_GPIO_Init+0x2a8>)
 8001b56:	f7fe fe29 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b5e:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <MX_GPIO_Init+0x2b0>)
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	485a      	ldr	r0, [pc, #360]	; (8001cd8 <MX_GPIO_Init+0x2b4>)
 8001b6e:	f7fe fe1d 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b72:	2310      	movs	r3, #16
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b82:	2306      	movs	r3, #6
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4852      	ldr	r0, [pc, #328]	; (8001cd8 <MX_GPIO_Init+0x2b4>)
 8001b8e:	f7fe fe0d 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b92:	23e0      	movs	r3, #224	; 0xe0
 8001b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	484a      	ldr	r0, [pc, #296]	; (8001cd8 <MX_GPIO_Init+0x2b4>)
 8001bae:	f7fe fdfd 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4845      	ldr	r0, [pc, #276]	; (8001cdc <MX_GPIO_Init+0x2b8>)
 8001bc6:	f7fe fdf1 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bdc:	2305      	movs	r3, #5
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	483d      	ldr	r0, [pc, #244]	; (8001cdc <MX_GPIO_Init+0x2b8>)
 8001be8:	f7fe fde0 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001bec:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001bf0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4832      	ldr	r0, [pc, #200]	; (8001cd0 <MX_GPIO_Init+0x2ac>)
 8001c06:	f7fe fdd1 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001c0a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c1c:	2306      	movs	r3, #6
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4829      	ldr	r0, [pc, #164]	; (8001ccc <MX_GPIO_Init+0x2a8>)
 8001c28:	f7fe fdc0 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4825      	ldr	r0, [pc, #148]	; (8001cd8 <MX_GPIO_Init+0x2b4>)
 8001c42:	f7fe fdb3 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001c46:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c58:	230a      	movs	r3, #10
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	4619      	mov	r1, r3
 8001c62:	481d      	ldr	r0, [pc, #116]	; (8001cd8 <MX_GPIO_Init+0x2b4>)
 8001c64:	f7fe fda2 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4815      	ldr	r0, [pc, #84]	; (8001cd0 <MX_GPIO_Init+0x2ac>)
 8001c7c:	f7fe fd96 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c80:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c86:	2312      	movs	r3, #18
 8001c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c92:	2304      	movs	r3, #4
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480f      	ldr	r0, [pc, #60]	; (8001cdc <MX_GPIO_Init+0x2b8>)
 8001c9e:	f7fe fd85 	bl	80007ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <MX_GPIO_Init+0x2b0>)
 8001ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <MX_GPIO_Init+0x2a4>)
 8001cb6:	f7fe fd79 	bl	80007ac <HAL_GPIO_Init>

}
 8001cba:	bf00      	nop
 8001cbc:	3730      	adds	r7, #48	; 0x30
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020c00 	.word	0x40020c00
 8001cd4:	10120000 	.word	0x10120000
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameter)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n", (char*)parameter);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f004 fcfd 	bl	80066e8 <puts>
 8001cee:	e7fb      	b.n	8001ce8 <task1_handler+0x8>

08001cf0 <task2_handler>:
	}

}

static void task2_handler(void* parameter)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n", (char*)parameter);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f004 fcf5 	bl	80066e8 <puts>
 8001cfe:	e7fb      	b.n	8001cf8 <task2_handler+0x8>

08001d00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d12:	f7fe fc49 	bl	80005a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40001000 	.word	0x40001000

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8001d72:	f002 fa35 	bl	80041e0 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08c      	sub	sp, #48	; 0x30
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	2036      	movs	r0, #54	; 0x36
 8001d9a:	f7fe fcdd 	bl	8000758 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001d9e:	2036      	movs	r0, #54	; 0x36
 8001da0:	f7fe fcf6 	bl	8000790 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <HAL_InitTick+0xa4>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <HAL_InitTick+0xa4>)
 8001dae:	f043 0310 	orr.w	r3, r3, #16
 8001db2:	6413      	str	r3, [r2, #64]	; 0x40
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <HAL_InitTick+0xa4>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dc0:	f107 0210 	add.w	r2, r7, #16
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff faf0 	bl	80013b0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001dd0:	f7ff fada 	bl	8001388 <HAL_RCC_GetPCLK1Freq>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <HAL_InitTick+0xa8>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9b      	lsrs	r3, r3, #18
 8001de4:	3b01      	subs	r3, #1
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_InitTick+0xac>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <HAL_InitTick+0xb0>)
 8001dec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_InitTick+0xac>)
 8001df0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001df4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001df6:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_InitTick+0xac>)
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_InitTick+0xac>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_InitTick+0xac>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e08:	4809      	ldr	r0, [pc, #36]	; (8001e30 <HAL_InitTick+0xac>)
 8001e0a:	f7ff fb03 	bl	8001414 <HAL_TIM_Base_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d104      	bne.n	8001e1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e14:	4806      	ldr	r0, [pc, #24]	; (8001e30 <HAL_InitTick+0xac>)
 8001e16:	f7ff fb32 	bl	800147e <HAL_TIM_Base_Start_IT>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	e000      	b.n	8001e20 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3730      	adds	r7, #48	; 0x30
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	431bde83 	.word	0x431bde83
 8001e30:	200143dc 	.word	0x200143dc
 8001e34:	40001000 	.word	0x40001000

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <MemManage_Handler+0x4>

08001e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <TIM6_DAC_IRQHandler+0x10>)
 8001e72:	f7ff fb28 	bl	80014c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200143dc 	.word	0x200143dc

08001e80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e00a      	b.n	8001ea8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e92:	f3af 8000 	nop.w
 8001e96:	4601      	mov	r1, r0
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	60ba      	str	r2, [r7, #8]
 8001e9e:	b2ca      	uxtb	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dbf0      	blt.n	8001e92 <_read+0x12>
	}

return len;
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_close>:
	}
	return len;
}

int _close(int file)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_isatty>:

int _isatty(int file)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
	return 1;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
	return 0;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <_sbrk+0x50>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <_sbrk+0x16>
		heap_end = &end;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <_sbrk+0x50>)
 8001f36:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <_sbrk+0x54>)
 8001f38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <_sbrk+0x50>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <_sbrk+0x50>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	466a      	mov	r2, sp
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d907      	bls.n	8001f5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f4e:	f004 fb23 	bl	8006598 <__errno>
 8001f52:	4602      	mov	r2, r0
 8001f54:	230c      	movs	r3, #12
 8001f56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5c:	e006      	b.n	8001f6c <_sbrk+0x48>
	}

	heap_end += incr;
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <_sbrk+0x50>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <_sbrk+0x50>)
 8001f68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000094 	.word	0x20000094
 8001f78:	20014508 	.word	0x20014508

08001f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <SystemInit+0x28>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <SystemInit+0x28>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <SystemInit+0x28>)
 8001f92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f96:	609a      	str	r2, [r3, #8]
#endif
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fae:	e003      	b.n	8001fb8 <LoopCopyDataInit>

08001fb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fb6:	3104      	adds	r1, #4

08001fb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fb8:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fc0:	d3f6      	bcc.n	8001fb0 <CopyDataInit>
  ldr  r2, =_sbss
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fc4:	e002      	b.n	8001fcc <LoopFillZerobss>

08001fc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fc8:	f842 3b04 	str.w	r3, [r2], #4

08001fcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fd0:	d3f9      	bcc.n	8001fc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fd2:	f7ff ffd3 	bl	8001f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd6:	f004 fae5 	bl	80065a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fda:	f7ff fc59 	bl	8001890 <main>
  bx  lr    
 8001fde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fe0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fe4:	080070f8 	.word	0x080070f8
  ldr  r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fec:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001ff0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001ff4:	20014508 	.word	0x20014508

08001ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff8:	e7fe      	b.n	8001ff8 <ADC_IRQHandler>

08001ffa <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f103 0208 	add.w	r2, r3, #8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f04f 32ff 	mov.w	r2, #4294967295
 8002012:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f103 0208 	add.w	r2, r3, #8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f103 0208 	add.w	r2, r3, #8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b2:	d103      	bne.n	80020bc <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e00c      	b.n	80020d6 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3308      	adds	r3, #8
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	e002      	b.n	80020ca <vListInsert+0x2e>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d2f6      	bcs.n	80020c4 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	601a      	str	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6892      	ldr	r2, [r2, #8]
 8002124:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6852      	ldr	r2, [r2, #4]
 800212e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	d103      	bne.n	8002142 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <xQueueGenericReset+0x28>
 8002178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217c:	f383 8811 	msr	BASEPRI, r3
 8002180:	f3bf 8f6f 	isb	sy
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	e7fe      	b.n	800218a <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 800218c:	f002 f8a2 	bl	80042d4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	68f9      	ldr	r1, [r7, #12]
 800219a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	441a      	add	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021bc:	3b01      	subs	r3, #1
 80021be:	68f9      	ldr	r1, [r7, #12]
 80021c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	441a      	add	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	22ff      	movs	r2, #255	; 0xff
 80021d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	22ff      	movs	r2, #255	; 0xff
 80021d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d114      	bne.n	800220c <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d01a      	beq.n	8002220 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3310      	adds	r3, #16
 80021ee:	4618      	mov	r0, r3
 80021f0:	f001 f912 	bl	8003418 <xTaskRemoveFromEventList>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d012      	beq.n	8002220 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <xQueueGenericReset+0xcc>)
 80021fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	f3bf 8f4f 	dsb	sy
 8002206:	f3bf 8f6f 	isb	sy
 800220a:	e009      	b.n	8002220 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3310      	adds	r3, #16
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fef2 	bl	8001ffa <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3324      	adds	r3, #36	; 0x24
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff feed 	bl	8001ffa <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002220:	f002 f886 	bl	8004330 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002224:	2301      	movs	r3, #1
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	e000ed04 	.word	0xe000ed04

08002234 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	; 0x30
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	4613      	mov	r3, r2
 8002240:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <xQueueGenericCreate+0x28>
 8002248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	e7fe      	b.n	800225a <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <xQueueGenericCreate+0x46>
 800226c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	429a      	cmp	r2, r3
 8002278:	d101      	bne.n	800227e <xQueueGenericCreate+0x4a>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <xQueueGenericCreate+0x4c>
 800227e:	2300      	movs	r3, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <xQueueGenericCreate+0x64>
 8002284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002288:	f383 8811 	msr	BASEPRI, r3
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e7fe      	b.n	8002296 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800229e:	d909      	bls.n	80022b4 <xQueueGenericCreate+0x80>
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	e7fe      	b.n	80022b2 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	3350      	adds	r3, #80	; 0x50
 80022b8:	4618      	mov	r0, r3
 80022ba:	f002 f92b 	bl	8004514 <pvPortMalloc>
 80022be:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00d      	beq.n	80022e2 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3350      	adds	r3, #80	; 0x50
 80022ce:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022d0:	79fa      	ldrb	r2, [r7, #7]
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	4613      	mov	r3, r2
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f805 	bl	80022ec <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80022e2:	6a3b      	ldr	r3, [r7, #32]
    }
 80022e4:	4618      	mov	r0, r3
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d103      	bne.n	8002308 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e002      	b.n	800230e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800231a:	2101      	movs	r1, #1
 800231c:	69b8      	ldr	r0, [r7, #24]
 800231e:	f7ff ff21 	bl	8002164 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	68f9      	ldr	r1, [r7, #12]
 8002330:	2073      	movs	r0, #115	; 0x73
 8002332:	f003 fa4d 	bl	80057d0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b090      	sub	sp, #64	; 0x40
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800234e:	2300      	movs	r3, #0
 8002350:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <xQueueGenericSend+0x30>
 800235c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002360:	f383 8811 	msr	BASEPRI, r3
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
 800236e:	e7fe      	b.n	800236e <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <xQueueGenericSend+0x3e>
 8002376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <xQueueGenericSend+0x42>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <xQueueGenericSend+0x44>
 8002382:	2300      	movs	r3, #0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <xQueueGenericSend+0x5c>
 8002388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238c:	f383 8811 	msr	BASEPRI, r3
 8002390:	f3bf 8f6f 	isb	sy
 8002394:	f3bf 8f4f 	dsb	sy
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
 800239a:	e7fe      	b.n	800239a <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d103      	bne.n	80023aa <xQueueGenericSend+0x6a>
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <xQueueGenericSend+0x6e>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <xQueueGenericSend+0x70>
 80023ae:	2300      	movs	r3, #0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <xQueueGenericSend+0x88>
 80023b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	623b      	str	r3, [r7, #32]
 80023c6:	e7fe      	b.n	80023c6 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023c8:	f001 f9c2 	bl	8003750 <xTaskGetSchedulerState>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <xQueueGenericSend+0x98>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <xQueueGenericSend+0x9c>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <xQueueGenericSend+0x9e>
 80023dc:	2300      	movs	r3, #0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <xQueueGenericSend+0xb6>
 80023e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e6:	f383 8811 	msr	BASEPRI, r3
 80023ea:	f3bf 8f6f 	isb	sy
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	e7fe      	b.n	80023f4 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80023f6:	f001 ff6d 	bl	80042d4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	429a      	cmp	r2, r3
 8002404:	d302      	bcc.n	800240c <xQueueGenericSend+0xcc>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d136      	bne.n	800247a <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	4618      	mov	r0, r3
 8002410:	f003 ff68 	bl	80062e4 <SEGGER_SYSVIEW_ShrinkId>
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	460b      	mov	r3, r1
 800241e:	4601      	mov	r1, r0
 8002420:	205a      	movs	r0, #90	; 0x5a
 8002422:	f003 fa4b 	bl	80058bc <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800242c:	f000 fa78 	bl	8002920 <prvCopyDataToQueue>
 8002430:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	2b00      	cmp	r3, #0
 8002438:	d010      	beq.n	800245c <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243c:	3324      	adds	r3, #36	; 0x24
 800243e:	4618      	mov	r0, r3
 8002440:	f000 ffea 	bl	8003418 <xTaskRemoveFromEventList>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d013      	beq.n	8002472 <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800244a:	4b4d      	ldr	r3, [pc, #308]	; (8002580 <xQueueGenericSend+0x240>)
 800244c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	f3bf 8f6f 	isb	sy
 800245a:	e00a      	b.n	8002472 <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <xQueueGenericSend+0x240>)
 8002464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002472:	f001 ff5d 	bl	8004330 <vPortExitCritical>
                return pdPASS;
 8002476:	2301      	movs	r3, #1
 8002478:	e07d      	b.n	8002576 <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d110      	bne.n	80024a2 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002480:	f001 ff56 	bl	8004330 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002486:	4618      	mov	r0, r3
 8002488:	f003 ff2c 	bl	80062e4 <SEGGER_SYSVIEW_ShrinkId>
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	460b      	mov	r3, r1
 8002496:	4601      	mov	r1, r0
 8002498:	205a      	movs	r0, #90	; 0x5a
 800249a:	f003 fa0f 	bl	80058bc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	e069      	b.n	8002576 <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 f819 	bl	80034e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024b6:	f001 ff3b 	bl	8004330 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024ba:	f000 fd67 	bl	8002f8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024be:	f001 ff09 	bl	80042d4 <vPortEnterCritical>
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024c8:	b25b      	sxtb	r3, r3
 80024ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ce:	d103      	bne.n	80024d8 <xQueueGenericSend+0x198>
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024de:	b25b      	sxtb	r3, r3
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d103      	bne.n	80024ee <xQueueGenericSend+0x1ae>
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024ee:	f001 ff1f 	bl	8004330 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024f2:	1d3a      	adds	r2, r7, #4
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 f808 	bl	8003510 <xTaskCheckForTimeOut>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d124      	bne.n	8002550 <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002508:	f000 fb02 	bl	8002b10 <prvIsQueueFull>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d018      	beq.n	8002544 <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	3310      	adds	r3, #16
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f000 ff2a 	bl	8003374 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002522:	f000 fa8d 	bl	8002a40 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002526:	f000 fd3f 	bl	8002fa8 <xTaskResumeAll>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f af62 	bne.w	80023f6 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <xQueueGenericSend+0x240>)
 8002534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	e758      	b.n	80023f6 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002546:	f000 fa7b 	bl	8002a40 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800254a:	f000 fd2d 	bl	8002fa8 <xTaskResumeAll>
 800254e:	e752      	b.n	80023f6 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002552:	f000 fa75 	bl	8002a40 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002556:	f000 fd27 	bl	8002fa8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	4618      	mov	r0, r3
 800255e:	f003 fec1 	bl	80062e4 <SEGGER_SYSVIEW_ShrinkId>
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	460b      	mov	r3, r1
 800256c:	4601      	mov	r1, r0
 800256e:	205a      	movs	r0, #90	; 0x5a
 8002570:	f003 f9a4 	bl	80058bc <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002574:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002576:	4618      	mov	r0, r3
 8002578:	3738      	adds	r7, #56	; 0x38
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	e000ed04 	.word	0xe000ed04

08002584 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b090      	sub	sp, #64	; 0x40
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002598:	2b00      	cmp	r3, #0
 800259a:	d109      	bne.n	80025b0 <xQueueGenericSendFromISR+0x2c>
 800259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ae:	e7fe      	b.n	80025ae <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <xQueueGenericSendFromISR+0x3a>
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <xQueueGenericSendFromISR+0x3e>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <xQueueGenericSendFromISR+0x40>
 80025c2:	2300      	movs	r3, #0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <xQueueGenericSendFromISR+0x58>
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
 80025da:	e7fe      	b.n	80025da <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d103      	bne.n	80025ea <xQueueGenericSendFromISR+0x66>
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <xQueueGenericSendFromISR+0x6a>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <xQueueGenericSendFromISR+0x6c>
 80025ee:	2300      	movs	r3, #0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <xQueueGenericSendFromISR+0x84>
 80025f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f8:	f383 8811 	msr	BASEPRI, r3
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	e7fe      	b.n	8002606 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002608:	f001 ff46 	bl	8004498 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800260c:	f3ef 8211 	mrs	r2, BASEPRI
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	61fa      	str	r2, [r7, #28]
 8002622:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002624:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	429a      	cmp	r2, r3
 8002632:	d302      	bcc.n	800263a <xQueueGenericSendFromISR+0xb6>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d147      	bne.n	80026ca <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002640:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	4618      	mov	r0, r3
 800264e:	f003 fe49 	bl	80062e4 <SEGGER_SYSVIEW_ShrinkId>
 8002652:	4601      	mov	r1, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	461a      	mov	r2, r3
 8002658:	2060      	movs	r0, #96	; 0x60
 800265a:	f003 f85f 	bl	800571c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002664:	f000 f95c 	bl	8002920 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002668:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d112      	bne.n	8002698 <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	2b00      	cmp	r3, #0
 8002678:	d024      	beq.n	80026c4 <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	3324      	adds	r3, #36	; 0x24
 800267e:	4618      	mov	r0, r3
 8002680:	f000 feca 	bl	8003418 <xTaskRemoveFromEventList>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01c      	beq.n	80026c4 <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d019      	beq.n	80026c4 <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e015      	b.n	80026c4 <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002698:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800269c:	2b7f      	cmp	r3, #127	; 0x7f
 800269e:	d109      	bne.n	80026b4 <xQueueGenericSendFromISR+0x130>
        __asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e7fe      	b.n	80026b2 <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026b8:	3301      	adds	r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	b25a      	sxtb	r2, r3
 80026be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80026c4:	2301      	movs	r3, #1
 80026c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80026c8:	e00b      	b.n	80026e2 <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 fe09 	bl	80062e4 <SEGGER_SYSVIEW_ShrinkId>
 80026d2:	4601      	mov	r1, r0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	461a      	mov	r2, r3
 80026d8:	2060      	movs	r0, #96	; 0x60
 80026da:	f003 f81f 	bl	800571c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80026ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3740      	adds	r7, #64	; 0x40
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b08f      	sub	sp, #60	; 0x3c
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002704:	2300      	movs	r3, #0
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <xQueueReceive+0x2e>
        __asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	623b      	str	r3, [r7, #32]
 8002724:	e7fe      	b.n	8002724 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d103      	bne.n	8002734 <xQueueReceive+0x3c>
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <xQueueReceive+0x40>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <xQueueReceive+0x42>
 8002738:	2300      	movs	r3, #0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <xQueueReceive+0x5a>
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	e7fe      	b.n	8002750 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002752:	f000 fffd 	bl	8003750 <xTaskGetSchedulerState>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <xQueueReceive+0x6a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <xQueueReceive+0x6e>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <xQueueReceive+0x70>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <xQueueReceive+0x88>
 800276c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	e7fe      	b.n	800277e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002780:	f001 fda8 	bl	80042d4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d031      	beq.n	80027f4 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002794:	f000 f92e 	bl	80029f4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	4618      	mov	r0, r3
 800279c:	f003 fda2 	bl	80062e4 <SEGGER_SYSVIEW_ShrinkId>
 80027a0:	4604      	mov	r4, r0
 80027a2:	2000      	movs	r0, #0
 80027a4:	f003 fd9e 	bl	80062e4 <SEGGER_SYSVIEW_ShrinkId>
 80027a8:	4601      	mov	r1, r0
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	2301      	movs	r3, #1
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	460a      	mov	r2, r1
 80027b4:	4621      	mov	r1, r4
 80027b6:	205c      	movs	r0, #92	; 0x5c
 80027b8:	f003 f880 	bl	80058bc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	1e5a      	subs	r2, r3, #1
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00f      	beq.n	80027ec <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ce:	3310      	adds	r3, #16
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fe21 	bl	8003418 <xTaskRemoveFromEventList>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80027dc:	4b4f      	ldr	r3, [pc, #316]	; (800291c <xQueueReceive+0x224>)
 80027de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80027ec:	f001 fda0 	bl	8004330 <vPortExitCritical>
                return pdPASS;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e08e      	b.n	8002912 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d115      	bne.n	8002826 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027fa:	f001 fd99 	bl	8004330 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	4618      	mov	r0, r3
 8002802:	f003 fd6f 	bl	80062e4 <SEGGER_SYSVIEW_ShrinkId>
 8002806:	4604      	mov	r4, r0
 8002808:	2000      	movs	r0, #0
 800280a:	f003 fd6b 	bl	80062e4 <SEGGER_SYSVIEW_ShrinkId>
 800280e:	4601      	mov	r1, r0
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	2301      	movs	r3, #1
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	4613      	mov	r3, r2
 8002818:	460a      	mov	r2, r1
 800281a:	4621      	mov	r1, r4
 800281c:	205c      	movs	r0, #92	; 0x5c
 800281e:	f003 f84d 	bl	80058bc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002822:	2300      	movs	r3, #0
 8002824:	e075      	b.n	8002912 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d106      	bne.n	800283a <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fe57 	bl	80034e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002836:	2301      	movs	r3, #1
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800283a:	f001 fd79 	bl	8004330 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800283e:	f000 fba5 	bl	8002f8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002842:	f001 fd47 	bl	80042d4 <vPortEnterCritical>
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800284c:	b25b      	sxtb	r3, r3
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002852:	d103      	bne.n	800285c <xQueueReceive+0x164>
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002862:	b25b      	sxtb	r3, r3
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d103      	bne.n	8002872 <xQueueReceive+0x17a>
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002872:	f001 fd5d 	bl	8004330 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002876:	1d3a      	adds	r2, r7, #4
 8002878:	f107 0310 	add.w	r3, r7, #16
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fe46 	bl	8003510 <xTaskCheckForTimeOut>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d124      	bne.n	80028d4 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800288a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800288c:	f000 f92a 	bl	8002ae4 <prvIsQueueEmpty>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d018      	beq.n	80028c8 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	3324      	adds	r3, #36	; 0x24
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fd68 	bl	8003374 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80028a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a6:	f000 f8cb 	bl	8002a40 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80028aa:	f000 fb7d 	bl	8002fa8 <xTaskResumeAll>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f47f af65 	bne.w	8002780 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <xQueueReceive+0x224>)
 80028b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	e75b      	b.n	8002780 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80028c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ca:	f000 f8b9 	bl	8002a40 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028ce:	f000 fb6b 	bl	8002fa8 <xTaskResumeAll>
 80028d2:	e755      	b.n	8002780 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80028d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d6:	f000 f8b3 	bl	8002a40 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028da:	f000 fb65 	bl	8002fa8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028e0:	f000 f900 	bl	8002ae4 <prvIsQueueEmpty>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f43f af4a 	beq.w	8002780 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	4618      	mov	r0, r3
 80028f0:	f003 fcf8 	bl	80062e4 <SEGGER_SYSVIEW_ShrinkId>
 80028f4:	4604      	mov	r4, r0
 80028f6:	2000      	movs	r0, #0
 80028f8:	f003 fcf4 	bl	80062e4 <SEGGER_SYSVIEW_ShrinkId>
 80028fc:	4601      	mov	r1, r0
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	2301      	movs	r3, #1
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	460a      	mov	r2, r1
 8002908:	4621      	mov	r1, r4
 800290a:	205c      	movs	r0, #92	; 0x5c
 800290c:	f002 ffd6 	bl	80058bc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002910:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002912:	4618      	mov	r0, r3
 8002914:	3734      	adds	r7, #52	; 0x34
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	bf00      	nop
 800291c:	e000ed04 	.word	0xe000ed04

08002920 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10d      	bne.n	800295a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d14d      	bne.n	80029e2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	4618      	mov	r0, r3
 800294c:	f000 ff1e 	bl	800378c <xTaskPriorityDisinherit>
 8002950:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	e043      	b.n	80029e2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d119      	bne.n	8002994 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6858      	ldr	r0, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	461a      	mov	r2, r3
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	f003 fe4d 	bl	800660a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	441a      	add	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	429a      	cmp	r2, r3
 8002988:	d32b      	bcc.n	80029e2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	e026      	b.n	80029e2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68d8      	ldr	r0, [r3, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	461a      	mov	r2, r3
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	f003 fe33 	bl	800660a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	425b      	negs	r3, r3
 80029ae:	441a      	add	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d207      	bcs.n	80029d0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	425b      	negs	r3, r3
 80029ca:	441a      	add	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d105      	bne.n	80029e2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	3b01      	subs	r3, #1
 80029e0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80029ea:	697b      	ldr	r3, [r7, #20]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d018      	beq.n	8002a38 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	441a      	add	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d303      	bcc.n	8002a28 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68d9      	ldr	r1, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	461a      	mov	r2, r3
 8002a32:	6838      	ldr	r0, [r7, #0]
 8002a34:	f003 fde9 	bl	800660a <memcpy>
    }
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a48:	f001 fc44 	bl	80042d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a52:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a54:	e011      	b.n	8002a7a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d012      	beq.n	8002a84 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3324      	adds	r3, #36	; 0x24
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fcd8 	bl	8003418 <xTaskRemoveFromEventList>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002a6e:	f000 fdb3 	bl	80035d8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	dce9      	bgt.n	8002a56 <prvUnlockQueue+0x16>
 8002a82:	e000      	b.n	8002a86 <prvUnlockQueue+0x46>
                        break;
 8002a84:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	22ff      	movs	r2, #255	; 0xff
 8002a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002a8e:	f001 fc4f 	bl	8004330 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a92:	f001 fc1f 	bl	80042d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a9c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a9e:	e011      	b.n	8002ac4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d012      	beq.n	8002ace <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3310      	adds	r3, #16
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fcb3 	bl	8003418 <xTaskRemoveFromEventList>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002ab8:	f000 fd8e 	bl	80035d8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002abc:	7bbb      	ldrb	r3, [r7, #14]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	dce9      	bgt.n	8002aa0 <prvUnlockQueue+0x60>
 8002acc:	e000      	b.n	8002ad0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ace:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	22ff      	movs	r2, #255	; 0xff
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002ad8:	f001 fc2a 	bl	8004330 <vPortExitCritical>
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002aec:	f001 fbf2 	bl	80042d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e001      	b.n	8002b02 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b02:	f001 fc15 	bl	8004330 <vPortExitCritical>

    return xReturn;
 8002b06:	68fb      	ldr	r3, [r7, #12]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b18:	f001 fbdc 	bl	80042d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d102      	bne.n	8002b2e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e001      	b.n	8002b32 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b32:	f001 fbfd 	bl	8004330 <vPortExitCritical>

    return xReturn;
 8002b36:	68fb      	ldr	r3, [r7, #12]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e01e      	b.n	8002b8e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b50:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <vQueueAddToRegistry+0x5c>)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d115      	bne.n	8002b88 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b5c:	490f      	ldr	r1, [pc, #60]	; (8002b9c <vQueueAddToRegistry+0x5c>)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002b66:	4a0d      	ldr	r2, [pc, #52]	; (8002b9c <vQueueAddToRegistry+0x5c>)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 fbb5 	bl	80062e4 <SEGGER_SYSVIEW_ShrinkId>
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2071      	movs	r0, #113	; 0x71
 8002b82:	f002 fdcb 	bl	800571c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002b86:	e005      	b.n	8002b94 <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b07      	cmp	r3, #7
 8002b92:	d9dd      	bls.n	8002b50 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	2001441c 	.word	0x2001441c

08002ba0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002bb0:	f001 fb90 	bl	80042d4 <vPortEnterCritical>
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bba:	b25b      	sxtb	r3, r3
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d103      	bne.n	8002bca <vQueueWaitForMessageRestricted+0x2a>
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd0:	b25b      	sxtb	r3, r3
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d103      	bne.n	8002be0 <vQueueWaitForMessageRestricted+0x40>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be0:	f001 fba6 	bl	8004330 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3324      	adds	r3, #36	; 0x24
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fbe1 	bl	80033bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff ff20 	bl	8002a40 <prvUnlockQueue>
    }
 8002c00:	bf00      	nop
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08c      	sub	sp, #48	; 0x30
 8002c0c:	af04      	add	r7, sp, #16
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 fc79 	bl	8004514 <pvPortMalloc>
 8002c22:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00e      	beq.n	8002c48 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c2a:	2058      	movs	r0, #88	; 0x58
 8002c2c:	f001 fc72 	bl	8004514 <pvPortMalloc>
 8002c30:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c3e:	e005      	b.n	8002c4c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002c40:	6978      	ldr	r0, [r7, #20]
 8002c42:	f001 fd43 	bl	80046cc <vPortFree>
 8002c46:	e001      	b.n	8002c4c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d013      	beq.n	8002c7a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	2300      	movs	r3, #0
 8002c56:	9303      	str	r3, [sp, #12]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f80e 	bl	8002c8a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c6e:	69f8      	ldr	r0, [r7, #28]
 8002c70:	f000 f8a0 	bl	8002db4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002c74:	2301      	movs	r3, #1
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	e002      	b.n	8002c80 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c80:	69bb      	ldr	r3, [r7, #24]
    }
 8002c82:	4618      	mov	r0, r3
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b088      	sub	sp, #32
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	21a5      	movs	r1, #165	; 0xa5
 8002ca4:	f003 fcbc 	bl	8006620 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f023 0307 	bic.w	r3, r3, #7
 8002cc0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d009      	beq.n	8002ce0 <prvInitialiseNewTask+0x56>
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e7fe      	b.n	8002cde <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d01f      	beq.n	8002d26 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	e012      	b.n	8002d12 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	7819      	ldrb	r1, [r3, #0]
 8002cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3334      	adds	r3, #52	; 0x34
 8002cfc:	460a      	mov	r2, r1
 8002cfe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	4413      	add	r3, r2
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d006      	beq.n	8002d1a <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	d9e9      	bls.n	8002cec <prvInitialiseNewTask+0x62>
 8002d18:	e000      	b.n	8002d1c <prvInitialiseNewTask+0x92>
            {
                break;
 8002d1a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d24:	e003      	b.n	8002d2e <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d901      	bls.n	8002d38 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d34:	2304      	movs	r3, #4
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d42:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	2200      	movs	r2, #0
 8002d48:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff f973 	bl	800203a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	3318      	adds	r3, #24
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff f96e 	bl	800203a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d62:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	f1c3 0205 	rsb	r2, r3, #5
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	3350      	adds	r3, #80	; 0x50
 8002d78:	2204      	movs	r2, #4
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 fc4f 	bl	8006620 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	3354      	adds	r3, #84	; 0x54
 8002d86:	2201      	movs	r2, #1
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 fc48 	bl	8006620 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	68f9      	ldr	r1, [r7, #12]
 8002d94:	69b8      	ldr	r0, [r7, #24]
 8002d96:	f001 f8fd 	bl	8003f94 <pxPortInitialiseStack>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002daa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002dac:	bf00      	nop
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002db4:	b5b0      	push	{r4, r5, r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002dbc:	f001 fa8a 	bl	80042d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002dc0:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <prvAddNewTaskToReadyList+0xfc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	4a3a      	ldr	r2, [pc, #232]	; (8002eb0 <prvAddNewTaskToReadyList+0xfc>)
 8002dc8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002dca:	4b3a      	ldr	r3, [pc, #232]	; (8002eb4 <prvAddNewTaskToReadyList+0x100>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002dd2:	4a38      	ldr	r2, [pc, #224]	; (8002eb4 <prvAddNewTaskToReadyList+0x100>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002dd8:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <prvAddNewTaskToReadyList+0xfc>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d110      	bne.n	8002e02 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002de0:	f000 fc1e 	bl	8003620 <prvInitialiseTaskLists>
 8002de4:	e00d      	b.n	8002e02 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002de6:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <prvAddNewTaskToReadyList+0x104>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dee:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <prvAddNewTaskToReadyList+0x100>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d802      	bhi.n	8002e02 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002dfc:	4a2d      	ldr	r2, [pc, #180]	; (8002eb4 <prvAddNewTaskToReadyList+0x100>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e02:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <prvAddNewTaskToReadyList+0x108>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	4a2c      	ldr	r2, [pc, #176]	; (8002ebc <prvAddNewTaskToReadyList+0x108>)
 8002e0a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <prvAddNewTaskToReadyList+0x108>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d016      	beq.n	8002e48 <prvAddNewTaskToReadyList+0x94>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 f93b 	bl	8006098 <SEGGER_SYSVIEW_OnTaskCreate>
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	461d      	mov	r5, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461c      	mov	r4, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	1ae3      	subs	r3, r4, r3
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	462b      	mov	r3, r5
 8002e44:	f001 fe06 	bl	8004a54 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 f9a8 	bl	80061a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2201      	movs	r2, #1
 8002e56:	409a      	lsls	r2, r3
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <prvAddNewTaskToReadyList+0x10c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <prvAddNewTaskToReadyList+0x10c>)
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <prvAddNewTaskToReadyList+0x110>)
 8002e70:	441a      	add	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3304      	adds	r3, #4
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7ff f8eb 	bl	8002054 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e7e:	f001 fa57 	bl	8004330 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <prvAddNewTaskToReadyList+0x104>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00e      	beq.n	8002ea8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <prvAddNewTaskToReadyList+0x100>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d207      	bcs.n	8002ea8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <prvAddNewTaskToReadyList+0x114>)
 8002e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb0:	20000170 	.word	0x20000170
 8002eb4:	20000098 	.word	0x20000098
 8002eb8:	2000017c 	.word	0x2000017c
 8002ebc:	2000018c 	.word	0x2000018c
 8002ec0:	20000178 	.word	0x20000178
 8002ec4:	2000009c 	.word	0x2000009c
 8002ec8:	e000ed04 	.word	0xe000ed04

08002ecc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002ed2:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <vTaskStartScheduler+0xa0>)
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	2300      	movs	r3, #0
 8002edc:	2282      	movs	r2, #130	; 0x82
 8002ede:	4924      	ldr	r1, [pc, #144]	; (8002f70 <vTaskStartScheduler+0xa4>)
 8002ee0:	4824      	ldr	r0, [pc, #144]	; (8002f74 <vTaskStartScheduler+0xa8>)
 8002ee2:	f7ff fe91 	bl	8002c08 <xTaskCreate>
 8002ee6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d102      	bne.n	8002ef4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002eee:	f000 fd43 	bl	8003978 <xTimerCreateTimerTask>
 8002ef2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d123      	bne.n	8002f42 <vTaskStartScheduler+0x76>
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <vTaskStartScheduler+0xac>)
 8002f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f12:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <vTaskStartScheduler+0xb0>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <vTaskStartScheduler+0xb4>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <vTaskStartScheduler+0xb8>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <vTaskStartScheduler+0xa0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d102      	bne.n	8002f32 <vTaskStartScheduler+0x66>
 8002f2c:	f003 f898 	bl	8006060 <SEGGER_SYSVIEW_OnIdle>
 8002f30:	e004      	b.n	8002f3c <vTaskStartScheduler+0x70>
 8002f32:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <vTaskStartScheduler+0xb8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 f8f0 	bl	800611c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002f3c:	f001 f8b2 	bl	80040a4 <xPortStartScheduler>
 8002f40:	e00d      	b.n	8002f5e <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d109      	bne.n	8002f5e <vTaskStartScheduler+0x92>
 8002f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	e7fe      	b.n	8002f5c <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <vTaskStartScheduler+0xbc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000194 	.word	0x20000194
 8002f70:	08006f74 	.word	0x08006f74
 8002f74:	080035f1 	.word	0x080035f1
 8002f78:	20000190 	.word	0x20000190
 8002f7c:	2000017c 	.word	0x2000017c
 8002f80:	20000174 	.word	0x20000174
 8002f84:	20000098 	.word	0x20000098
 8002f88:	2000000c 	.word	0x2000000c

08002f8c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <vTaskSuspendAll+0x18>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	4a03      	ldr	r2, [pc, #12]	; (8002fa4 <vTaskSuspendAll+0x18>)
 8002f98:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	20000198 	.word	0x20000198

08002fa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002fb6:	4b43      	ldr	r3, [pc, #268]	; (80030c4 <xTaskResumeAll+0x11c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <xTaskResumeAll+0x2a>
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	e7fe      	b.n	8002fd0 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002fd2:	f001 f97f 	bl	80042d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <xTaskResumeAll+0x11c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	4a39      	ldr	r2, [pc, #228]	; (80030c4 <xTaskResumeAll+0x11c>)
 8002fde:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fe0:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <xTaskResumeAll+0x11c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d165      	bne.n	80030b4 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fe8:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <xTaskResumeAll+0x120>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d061      	beq.n	80030b4 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ff0:	e032      	b.n	8003058 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff2:	4b36      	ldr	r3, [pc, #216]	; (80030cc <xTaskResumeAll+0x124>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3318      	adds	r3, #24
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff f885 	bl	800210e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3304      	adds	r3, #4
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff f880 	bl	800210e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4618      	mov	r0, r3
 8003012:	f003 f8c5 	bl	80061a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	2201      	movs	r2, #1
 800301c:	409a      	lsls	r2, r3
 800301e:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <xTaskResumeAll+0x128>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4313      	orrs	r3, r2
 8003024:	4a2a      	ldr	r2, [pc, #168]	; (80030d0 <xTaskResumeAll+0x128>)
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4a27      	ldr	r2, [pc, #156]	; (80030d4 <xTaskResumeAll+0x12c>)
 8003036:	441a      	add	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3304      	adds	r3, #4
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f7ff f808 	bl	8002054 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003048:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <xTaskResumeAll+0x130>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <xTaskResumeAll+0x134>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003058:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <xTaskResumeAll+0x124>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1c8      	bne.n	8002ff2 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003066:	f000 fb57 	bl	8003718 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <xTaskResumeAll+0x138>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d010      	beq.n	8003098 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003076:	f000 f859 	bl	800312c <xTaskIncrementTick>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8003080:	4b16      	ldr	r3, [pc, #88]	; (80030dc <xTaskResumeAll+0x134>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3b01      	subs	r3, #1
 800308a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f1      	bne.n	8003076 <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <xTaskResumeAll+0x138>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003098:	4b10      	ldr	r3, [pc, #64]	; (80030dc <xTaskResumeAll+0x134>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <xTaskResumeAll+0x13c>)
 80030a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80030b4:	f001 f93c 	bl	8004330 <vPortExitCritical>

    return xAlreadyYielded;
 80030b8:	68bb      	ldr	r3, [r7, #8]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000198 	.word	0x20000198
 80030c8:	20000170 	.word	0x20000170
 80030cc:	20000130 	.word	0x20000130
 80030d0:	20000178 	.word	0x20000178
 80030d4:	2000009c 	.word	0x2000009c
 80030d8:	20000098 	.word	0x20000098
 80030dc:	20000184 	.word	0x20000184
 80030e0:	20000180 	.word	0x20000180
 80030e4:	e000ed04 	.word	0xe000ed04

080030e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <xTaskGetTickCount+0x1c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80030f4:	687b      	ldr	r3, [r7, #4]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000174 	.word	0x20000174

08003108 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800310e:	f001 f9c3 	bl	8004498 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <xTaskGetTickCountFromISR+0x20>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800311c:	683b      	ldr	r3, [r7, #0]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000174 	.word	0x20000174

0800312c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003136:	4b50      	ldr	r3, [pc, #320]	; (8003278 <xTaskIncrementTick+0x14c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 8091 	bne.w	8003262 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003140:	4b4e      	ldr	r3, [pc, #312]	; (800327c <xTaskIncrementTick+0x150>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003148:	4a4c      	ldr	r2, [pc, #304]	; (800327c <xTaskIncrementTick+0x150>)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11f      	bne.n	8003194 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003154:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <xTaskIncrementTick+0x154>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <xTaskIncrementTick+0x46>
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	e7fe      	b.n	8003170 <xTaskIncrementTick+0x44>
 8003172:	4b43      	ldr	r3, [pc, #268]	; (8003280 <xTaskIncrementTick+0x154>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	4b42      	ldr	r3, [pc, #264]	; (8003284 <xTaskIncrementTick+0x158>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a40      	ldr	r2, [pc, #256]	; (8003280 <xTaskIncrementTick+0x154>)
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	4a40      	ldr	r2, [pc, #256]	; (8003284 <xTaskIncrementTick+0x158>)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b40      	ldr	r3, [pc, #256]	; (8003288 <xTaskIncrementTick+0x15c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	4a3e      	ldr	r2, [pc, #248]	; (8003288 <xTaskIncrementTick+0x15c>)
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	f000 fac2 	bl	8003718 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003194:	4b3d      	ldr	r3, [pc, #244]	; (800328c <xTaskIncrementTick+0x160>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	429a      	cmp	r2, r3
 800319c:	d34c      	bcc.n	8003238 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800319e:	4b38      	ldr	r3, [pc, #224]	; (8003280 <xTaskIncrementTick+0x154>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a8:	4b38      	ldr	r3, [pc, #224]	; (800328c <xTaskIncrementTick+0x160>)
 80031aa:	f04f 32ff 	mov.w	r2, #4294967295
 80031ae:	601a      	str	r2, [r3, #0]
                    break;
 80031b0:	e042      	b.n	8003238 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b2:	4b33      	ldr	r3, [pc, #204]	; (8003280 <xTaskIncrementTick+0x154>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d203      	bcs.n	80031d2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80031ca:	4a30      	ldr	r2, [pc, #192]	; (800328c <xTaskIncrementTick+0x160>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031d0:	e032      	b.n	8003238 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3304      	adds	r3, #4
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe ff99 	bl	800210e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3318      	adds	r3, #24
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe ff90 	bl	800210e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f002 ffd5 	bl	80061a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	2201      	movs	r2, #1
 80031fc:	409a      	lsls	r2, r3
 80031fe:	4b24      	ldr	r3, [pc, #144]	; (8003290 <xTaskIncrementTick+0x164>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	4a22      	ldr	r2, [pc, #136]	; (8003290 <xTaskIncrementTick+0x164>)
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <xTaskIncrementTick+0x168>)
 8003216:	441a      	add	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	3304      	adds	r3, #4
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f7fe ff18 	bl	8002054 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <xTaskIncrementTick+0x16c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	429a      	cmp	r2, r3
 8003230:	d3b5      	bcc.n	800319e <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8003232:	2301      	movs	r3, #1
 8003234:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003236:	e7b2      	b.n	800319e <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003238:	4b17      	ldr	r3, [pc, #92]	; (8003298 <xTaskIncrementTick+0x16c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	4915      	ldr	r1, [pc, #84]	; (8003294 <xTaskIncrementTick+0x168>)
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d901      	bls.n	8003254 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8003250:	2301      	movs	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <xTaskIncrementTick+0x170>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 800325c:	2301      	movs	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	e004      	b.n	800326c <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <xTaskIncrementTick+0x174>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <xTaskIncrementTick+0x174>)
 800326a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800326c:	697b      	ldr	r3, [r7, #20]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000198 	.word	0x20000198
 800327c:	20000174 	.word	0x20000174
 8003280:	20000128 	.word	0x20000128
 8003284:	2000012c 	.word	0x2000012c
 8003288:	20000188 	.word	0x20000188
 800328c:	20000190 	.word	0x20000190
 8003290:	20000178 	.word	0x20000178
 8003294:	2000009c 	.word	0x2000009c
 8003298:	20000098 	.word	0x20000098
 800329c:	20000184 	.word	0x20000184
 80032a0:	20000180 	.word	0x20000180

080032a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032aa:	4b2c      	ldr	r3, [pc, #176]	; (800335c <vTaskSwitchContext+0xb8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032b2:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <vTaskSwitchContext+0xbc>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80032b8:	e04c      	b.n	8003354 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 80032ba:	4b29      	ldr	r3, [pc, #164]	; (8003360 <vTaskSwitchContext+0xbc>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c0:	4b28      	ldr	r3, [pc, #160]	; (8003364 <vTaskSwitchContext+0xc0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032ce:	7afb      	ldrb	r3, [r7, #11]
 80032d0:	f1c3 031f 	rsb	r3, r3, #31
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	4924      	ldr	r1, [pc, #144]	; (8003368 <vTaskSwitchContext+0xc4>)
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <vTaskSwitchContext+0x5a>
        __asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	e7fe      	b.n	80032fc <vTaskSwitchContext+0x58>
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4a17      	ldr	r2, [pc, #92]	; (8003368 <vTaskSwitchContext+0xc4>)
 800330a:	4413      	add	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	3308      	adds	r3, #8
 8003320:	429a      	cmp	r2, r3
 8003322:	d104      	bne.n	800332e <vTaskSwitchContext+0x8a>
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a0d      	ldr	r2, [pc, #52]	; (800336c <vTaskSwitchContext+0xc8>)
 8003336:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <vTaskSwitchContext+0xc8>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <vTaskSwitchContext+0xcc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d102      	bne.n	800334a <vTaskSwitchContext+0xa6>
 8003344:	f002 fe8c 	bl	8006060 <SEGGER_SYSVIEW_OnIdle>
}
 8003348:	e004      	b.n	8003354 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <vTaskSwitchContext+0xc8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f002 fee4 	bl	800611c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003354:	bf00      	nop
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000198 	.word	0x20000198
 8003360:	20000184 	.word	0x20000184
 8003364:	20000178 	.word	0x20000178
 8003368:	2000009c 	.word	0x2000009c
 800336c:	20000098 	.word	0x20000098
 8003370:	20000194 	.word	0x20000194

08003374 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d109      	bne.n	8003398 <vTaskPlaceOnEventList+0x24>
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e7fe      	b.n	8003396 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <vTaskPlaceOnEventList+0x44>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3318      	adds	r3, #24
 800339e:	4619      	mov	r1, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7fe fe7b 	bl	800209c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033a6:	2101      	movs	r1, #1
 80033a8:	6838      	ldr	r0, [r7, #0]
 80033aa:	f000 fa6d 	bl	8003888 <prvAddCurrentTaskToDelayedList>
}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000098 	.word	0x20000098

080033bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <vTaskPlaceOnEventListRestricted+0x26>
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	e7fe      	b.n	80033e0 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <vTaskPlaceOnEventListRestricted+0x58>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3318      	adds	r3, #24
 80033e8:	4619      	mov	r1, r3
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f7fe fe32 	bl	8002054 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80033fc:	2024      	movs	r0, #36	; 0x24
 80033fe:	f002 f933 	bl	8005668 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	68b8      	ldr	r0, [r7, #8]
 8003406:	f000 fa3f 	bl	8003888 <prvAddCurrentTaskToDelayedList>
    }
 800340a:	bf00      	nop
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000098 	.word	0x20000098

08003418 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <xTaskRemoveFromEventList+0x2a>
 800342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e7fe      	b.n	8003440 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	3318      	adds	r3, #24
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fe61 	bl	800210e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800344c:	4b1f      	ldr	r3, [pc, #124]	; (80034cc <xTaskRemoveFromEventList+0xb4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d120      	bne.n	8003496 <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	3304      	adds	r3, #4
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fe58 	bl	800210e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4618      	mov	r0, r3
 8003462:	f002 fe9d 	bl	80061a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	2201      	movs	r2, #1
 800346c:	409a      	lsls	r2, r3
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <xTaskRemoveFromEventList+0xb8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <xTaskRemoveFromEventList+0xb8>)
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4a13      	ldr	r2, [pc, #76]	; (80034d4 <xTaskRemoveFromEventList+0xbc>)
 8003486:	441a      	add	r2, r3
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	3304      	adds	r3, #4
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f7fe fde0 	bl	8002054 <vListInsertEnd>
 8003494:	e005      	b.n	80034a2 <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	3318      	adds	r3, #24
 800349a:	4619      	mov	r1, r3
 800349c:	480e      	ldr	r0, [pc, #56]	; (80034d8 <xTaskRemoveFromEventList+0xc0>)
 800349e:	f7fe fdd9 	bl	8002054 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <xTaskRemoveFromEventList+0xc4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d905      	bls.n	80034bc <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80034b0:	2301      	movs	r3, #1
 80034b2:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <xTaskRemoveFromEventList+0xc8>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e001      	b.n	80034c0 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80034c0:	697b      	ldr	r3, [r7, #20]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000198 	.word	0x20000198
 80034d0:	20000178 	.word	0x20000178
 80034d4:	2000009c 	.word	0x2000009c
 80034d8:	20000130 	.word	0x20000130
 80034dc:	20000098 	.word	0x20000098
 80034e0:	20000184 	.word	0x20000184

080034e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <vTaskInternalSetTimeOutState+0x24>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <vTaskInternalSetTimeOutState+0x28>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	605a      	str	r2, [r3, #4]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	20000188 	.word	0x20000188
 800350c:	20000174 	.word	0x20000174

08003510 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d109      	bne.n	8003534 <xTaskCheckForTimeOut+0x24>
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	e7fe      	b.n	8003532 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <xTaskCheckForTimeOut+0x3e>
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e7fe      	b.n	800354c <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800354e:	f000 fec1 	bl	80042d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003552:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <xTaskCheckForTimeOut+0xc0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	d102      	bne.n	8003572 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	e026      	b.n	80035c0 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <xTaskCheckForTimeOut+0xc4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d00a      	beq.n	8003594 <xTaskCheckForTimeOut+0x84>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	429a      	cmp	r2, r3
 8003586:	d305      	bcc.n	8003594 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003588:	2301      	movs	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e015      	b.n	80035c0 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	429a      	cmp	r2, r3
 800359c:	d20b      	bcs.n	80035b6 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	1ad2      	subs	r2, r2, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ff9a 	bl	80034e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	e004      	b.n	80035c0 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80035bc:	2301      	movs	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80035c0:	f000 feb6 	bl	8004330 <vPortExitCritical>

    return xReturn;
 80035c4:	69fb      	ldr	r3, [r7, #28]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000174 	.word	0x20000174
 80035d4:	20000188 	.word	0x20000188

080035d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <vTaskMissedYield+0x14>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	20000184 	.word	0x20000184

080035f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80035f8:	f000 f852 	bl	80036a0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <prvIdleTask+0x28>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d9f9      	bls.n	80035f8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <prvIdleTask+0x2c>)
 8003606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003614:	e7f0      	b.n	80035f8 <prvIdleTask+0x8>
 8003616:	bf00      	nop
 8003618:	2000009c 	.word	0x2000009c
 800361c:	e000ed04 	.word	0xe000ed04

08003620 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003626:	2300      	movs	r3, #0
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	e00c      	b.n	8003646 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4a12      	ldr	r2, [pc, #72]	; (8003680 <prvInitialiseTaskLists+0x60>)
 8003638:	4413      	add	r3, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fcdd 	bl	8001ffa <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3301      	adds	r3, #1
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d9ef      	bls.n	800362c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800364c:	480d      	ldr	r0, [pc, #52]	; (8003684 <prvInitialiseTaskLists+0x64>)
 800364e:	f7fe fcd4 	bl	8001ffa <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003652:	480d      	ldr	r0, [pc, #52]	; (8003688 <prvInitialiseTaskLists+0x68>)
 8003654:	f7fe fcd1 	bl	8001ffa <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003658:	480c      	ldr	r0, [pc, #48]	; (800368c <prvInitialiseTaskLists+0x6c>)
 800365a:	f7fe fcce 	bl	8001ffa <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800365e:	480c      	ldr	r0, [pc, #48]	; (8003690 <prvInitialiseTaskLists+0x70>)
 8003660:	f7fe fccb 	bl	8001ffa <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003664:	480b      	ldr	r0, [pc, #44]	; (8003694 <prvInitialiseTaskLists+0x74>)
 8003666:	f7fe fcc8 	bl	8001ffa <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <prvInitialiseTaskLists+0x78>)
 800366c:	4a05      	ldr	r2, [pc, #20]	; (8003684 <prvInitialiseTaskLists+0x64>)
 800366e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <prvInitialiseTaskLists+0x7c>)
 8003672:	4a05      	ldr	r2, [pc, #20]	; (8003688 <prvInitialiseTaskLists+0x68>)
 8003674:	601a      	str	r2, [r3, #0]
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	2000009c 	.word	0x2000009c
 8003684:	20000100 	.word	0x20000100
 8003688:	20000114 	.word	0x20000114
 800368c:	20000130 	.word	0x20000130
 8003690:	20000144 	.word	0x20000144
 8003694:	2000015c 	.word	0x2000015c
 8003698:	20000128 	.word	0x20000128
 800369c:	2000012c 	.word	0x2000012c

080036a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036a6:	e019      	b.n	80036dc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80036a8:	f000 fe14 	bl	80042d4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <prvCheckTasksWaitingTermination+0x4c>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fd28 	bl	800210e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <prvCheckTasksWaitingTermination+0x50>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <prvCheckTasksWaitingTermination+0x50>)
 80036c6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <prvCheckTasksWaitingTermination+0x54>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <prvCheckTasksWaitingTermination+0x54>)
 80036d0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80036d2:	f000 fe2d 	bl	8004330 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f80e 	bl	80036f8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <prvCheckTasksWaitingTermination+0x54>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e1      	bne.n	80036a8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000144 	.word	0x20000144
 80036f0:	20000170 	.word	0x20000170
 80036f4:	20000158 	.word	0x20000158

080036f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	4618      	mov	r0, r3
 8003706:	f000 ffe1 	bl	80046cc <vPortFree>
                vPortFree( pxTCB );
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 ffde 	bl	80046cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <prvResetNextTaskUnblockTime+0x30>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d104      	bne.n	8003730 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <prvResetNextTaskUnblockTime+0x34>)
 8003728:	f04f 32ff 	mov.w	r2, #4294967295
 800372c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800372e:	e005      	b.n	800373c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <prvResetNextTaskUnblockTime+0x30>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a04      	ldr	r2, [pc, #16]	; (800374c <prvResetNextTaskUnblockTime+0x34>)
 800373a:	6013      	str	r3, [r2, #0]
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000128 	.word	0x20000128
 800374c:	20000190 	.word	0x20000190

08003750 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <xTaskGetSchedulerState+0x34>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800375e:	2301      	movs	r3, #1
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	e008      	b.n	8003776 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <xTaskGetSchedulerState+0x38>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800376c:	2302      	movs	r3, #2
 800376e:	607b      	str	r3, [r7, #4]
 8003770:	e001      	b.n	8003776 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003772:	2300      	movs	r3, #0
 8003774:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003776:	687b      	ldr	r3, [r7, #4]
    }
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	2000017c 	.word	0x2000017c
 8003788:	20000198 	.word	0x20000198

0800378c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d066      	beq.n	8003870 <xTaskPriorityDisinherit+0xe4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80037a2:	4b36      	ldr	r3, [pc, #216]	; (800387c <xTaskPriorityDisinherit+0xf0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d009      	beq.n	80037c0 <xTaskPriorityDisinherit+0x34>
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	e7fe      	b.n	80037be <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <xTaskPriorityDisinherit+0x50>
 80037c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	e7fe      	b.n	80037da <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e0:	1e5a      	subs	r2, r3, #1
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d03e      	beq.n	8003870 <xTaskPriorityDisinherit+0xe4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d13a      	bne.n	8003870 <xTaskPriorityDisinherit+0xe4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	3304      	adds	r3, #4
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe fc85 	bl	800210e <uxListRemove>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	2201      	movs	r2, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43da      	mvns	r2, r3
 8003816:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <xTaskPriorityDisinherit+0xf4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4013      	ands	r3, r2
 800381c:	4a18      	ldr	r2, [pc, #96]	; (8003880 <xTaskPriorityDisinherit+0xf4>)
 800381e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4619      	mov	r1, r3
 8003824:	204a      	movs	r0, #74	; 0x4a
 8003826:	f001 ff3d 	bl	80056a4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	f1c3 0205 	rsb	r2, r3, #5
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	2201      	movs	r2, #1
 8003844:	409a      	lsls	r2, r3
 8003846:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <xTaskPriorityDisinherit+0xf4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	4a0c      	ldr	r2, [pc, #48]	; (8003880 <xTaskPriorityDisinherit+0xf4>)
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4a09      	ldr	r2, [pc, #36]	; (8003884 <xTaskPriorityDisinherit+0xf8>)
 800385e:	441a      	add	r2, r3
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	3304      	adds	r3, #4
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f7fe fbf4 	bl	8002054 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800386c:	2301      	movs	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003870:	697b      	ldr	r3, [r7, #20]
    }
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000098 	.word	0x20000098
 8003880:	20000178 	.word	0x20000178
 8003884:	2000009c 	.word	0x2000009c

08003888 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003892:	4b32      	ldr	r3, [pc, #200]	; (800395c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003898:	4b31      	ldr	r3, [pc, #196]	; (8003960 <prvAddCurrentTaskToDelayedList+0xd8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3304      	adds	r3, #4
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fc35 	bl	800210e <uxListRemove>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10b      	bne.n	80038c2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038aa:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	2201      	movs	r2, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43da      	mvns	r2, r3
 80038b8:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <prvAddCurrentTaskToDelayedList+0xdc>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4013      	ands	r3, r2
 80038be:	4a29      	ldr	r2, [pc, #164]	; (8003964 <prvAddCurrentTaskToDelayedList+0xdc>)
 80038c0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d110      	bne.n	80038ec <prvAddCurrentTaskToDelayedList+0x64>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80038d0:	4b23      	ldr	r3, [pc, #140]	; (8003960 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	211b      	movs	r1, #27
 80038d6:	4618      	mov	r0, r3
 80038d8:	f002 fca4 	bl	8006224 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038dc:	4b20      	ldr	r3, [pc, #128]	; (8003960 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3304      	adds	r3, #4
 80038e2:	4619      	mov	r1, r3
 80038e4:	4820      	ldr	r0, [pc, #128]	; (8003968 <prvAddCurrentTaskToDelayedList+0xe0>)
 80038e6:	f7fe fbb5 	bl	8002054 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80038ea:	e032      	b.n	8003952 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038f4:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	429a      	cmp	r2, r3
 8003902:	d20f      	bcs.n	8003924 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003904:	4b16      	ldr	r3, [pc, #88]	; (8003960 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2104      	movs	r1, #4
 800390a:	4618      	mov	r0, r3
 800390c:	f002 fc8a 	bl	8006224 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003910:	4b16      	ldr	r3, [pc, #88]	; (800396c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3304      	adds	r3, #4
 800391a:	4619      	mov	r1, r3
 800391c:	4610      	mov	r0, r2
 800391e:	f7fe fbbd 	bl	800209c <vListInsert>
}
 8003922:	e016      	b.n	8003952 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003924:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2104      	movs	r1, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f002 fc7a 	bl	8006224 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3304      	adds	r3, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f7fe fbad 	bl	800209c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <prvAddCurrentTaskToDelayedList+0xec>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	429a      	cmp	r2, r3
 800394a:	d202      	bcs.n	8003952 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800394c:	4a09      	ldr	r2, [pc, #36]	; (8003974 <prvAddCurrentTaskToDelayedList+0xec>)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	6013      	str	r3, [r2, #0]
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000174 	.word	0x20000174
 8003960:	20000098 	.word	0x20000098
 8003964:	20000178 	.word	0x20000178
 8003968:	2000015c 	.word	0x2000015c
 800396c:	2000012c 	.word	0x2000012c
 8003970:	20000128 	.word	0x20000128
 8003974:	20000190 	.word	0x20000190

08003978 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003982:	f000 fad1 	bl	8003f28 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <xTimerCreateTimerTask+0x54>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <xTimerCreateTimerTask+0x58>)
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	2302      	movs	r3, #2
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800399c:	490d      	ldr	r1, [pc, #52]	; (80039d4 <xTimerCreateTimerTask+0x5c>)
 800399e:	480e      	ldr	r0, [pc, #56]	; (80039d8 <xTimerCreateTimerTask+0x60>)
 80039a0:	f7ff f932 	bl	8002c08 <xTaskCreate>
 80039a4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <xTimerCreateTimerTask+0x48>
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	e7fe      	b.n	80039be <xTimerCreateTimerTask+0x46>
        return xReturn;
 80039c0:	687b      	ldr	r3, [r7, #4]
    }
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	200001cc 	.word	0x200001cc
 80039d0:	200001d0 	.word	0x200001d0
 80039d4:	08006f7c 	.word	0x08006f7c
 80039d8:	08003b0d 	.word	0x08003b0d

080039dc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	; 0x28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <xTimerGenericCommand+0x2c>
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	623b      	str	r3, [r7, #32]
 8003a06:	e7fe      	b.n	8003a06 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <xTimerGenericCommand+0x94>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d02a      	beq.n	8003a66 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b05      	cmp	r3, #5
 8003a20:	dc18      	bgt.n	8003a54 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a22:	f7ff fe95 	bl	8003750 <xTaskGetSchedulerState>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d109      	bne.n	8003a40 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a2c:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <xTimerGenericCommand+0x94>)
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	f107 0114 	add.w	r1, r7, #20
 8003a34:	2300      	movs	r3, #0
 8003a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a38:	f7fe fc82 	bl	8002340 <xQueueGenericSend>
 8003a3c:	6278      	str	r0, [r7, #36]	; 0x24
 8003a3e:	e012      	b.n	8003a66 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <xTimerGenericCommand+0x94>)
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	f107 0114 	add.w	r1, r7, #20
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f7fe fc78 	bl	8002340 <xQueueGenericSend>
 8003a50:	6278      	str	r0, [r7, #36]	; 0x24
 8003a52:	e008      	b.n	8003a66 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <xTimerGenericCommand+0x94>)
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	f107 0114 	add.w	r1, r7, #20
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	f7fe fd90 	bl	8002584 <xQueueGenericSendFromISR>
 8003a64:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3728      	adds	r7, #40	; 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	200001cc 	.word	0x200001cc

08003a74 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <prvProcessExpiredTimer+0x94>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fe fb3e 	bl	800210e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d021      	beq.n	8003ae4 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	699a      	ldr	r2, [r3, #24]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	18d1      	adds	r1, r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	6978      	ldr	r0, [r7, #20]
 8003aae:	f000 f8d1 	bl	8003c54 <prvInsertTimerInActiveList>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01e      	beq.n	8003af6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2300      	movs	r3, #0
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	6978      	ldr	r0, [r7, #20]
 8003ac4:	f7ff ff8a 	bl	80039dc <xTimerGenericCommand>
 8003ac8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d112      	bne.n	8003af6 <prvProcessExpiredTimer+0x82>
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	e7fe      	b.n	8003ae2 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	6978      	ldr	r0, [r7, #20]
 8003afc:	4798      	blx	r3
    }
 8003afe:	bf00      	nop
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200001c4 	.word	0x200001c4

08003b0c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b14:	f107 0308 	add.w	r3, r7, #8
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 f857 	bl	8003bcc <prvGetNextExpireTime>
 8003b1e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4619      	mov	r1, r3
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f803 	bl	8003b30 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b2a:	f000 f8d5 	bl	8003cd8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b2e:	e7f1      	b.n	8003b14 <prvTimerTask+0x8>

08003b30 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b3a:	f7ff fa27 	bl	8002f8c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b3e:	f107 0308 	add.w	r3, r7, #8
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 f866 	bl	8003c14 <prvSampleTimeNow>
 8003b48:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d130      	bne.n	8003bb2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <prvProcessTimerOrBlockTask+0x3c>
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d806      	bhi.n	8003b6c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003b5e:	f7ff fa23 	bl	8002fa8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b62:	68f9      	ldr	r1, [r7, #12]
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff ff85 	bl	8003a74 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003b6a:	e024      	b.n	8003bb6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b72:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <prvProcessTimerOrBlockTask+0x90>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <prvProcessTimerOrBlockTask+0x50>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <prvProcessTimerOrBlockTask+0x52>
 8003b80:	2300      	movs	r3, #0
 8003b82:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b84:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <prvProcessTimerOrBlockTask+0x94>)
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	4619      	mov	r1, r3
 8003b92:	f7ff f805 	bl	8002ba0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003b96:	f7ff fa07 	bl	8002fa8 <xTaskResumeAll>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <prvProcessTimerOrBlockTask+0x98>)
 8003ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	f3bf 8f6f 	isb	sy
    }
 8003bb0:	e001      	b.n	8003bb6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003bb2:	f7ff f9f9 	bl	8002fa8 <xTaskResumeAll>
    }
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200001c8 	.word	0x200001c8
 8003bc4:	200001cc 	.word	0x200001cc
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <prvGetNextExpireTime+0x44>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <prvGetNextExpireTime+0x16>
 8003bde:	2201      	movs	r2, #1
 8003be0:	e000      	b.n	8003be4 <prvGetNextExpireTime+0x18>
 8003be2:	2200      	movs	r2, #0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d105      	bne.n	8003bfc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bf0:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <prvGetNextExpireTime+0x44>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	e001      	b.n	8003c00 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c00:	68fb      	ldr	r3, [r7, #12]
    }
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	200001c4 	.word	0x200001c4

08003c14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c1c:	f7ff fa64 	bl	80030e8 <xTaskGetTickCount>
 8003c20:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <prvSampleTimeNow+0x3c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d205      	bcs.n	8003c38 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c2c:	f000 f918 	bl	8003e60 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e002      	b.n	8003c3e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003c3e:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <prvSampleTimeNow+0x3c>)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003c44:	68fb      	ldr	r3, [r7, #12]
    }
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200001d4 	.word	0x200001d4

08003c54 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d812      	bhi.n	8003ca0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	1ad2      	subs	r2, r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d302      	bcc.n	8003c8e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	e01b      	b.n	8003cc6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <prvInsertTimerInActiveList+0x7c>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3304      	adds	r3, #4
 8003c96:	4619      	mov	r1, r3
 8003c98:	4610      	mov	r0, r2
 8003c9a:	f7fe f9ff 	bl	800209c <vListInsert>
 8003c9e:	e012      	b.n	8003cc6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d206      	bcs.n	8003cb6 <prvInsertTimerInActiveList+0x62>
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d302      	bcc.n	8003cb6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	e007      	b.n	8003cc6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <prvInsertTimerInActiveList+0x80>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7fe f9eb 	bl	800209c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003cc6:	697b      	ldr	r3, [r7, #20]
    }
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	200001c8 	.word	0x200001c8
 8003cd4:	200001c4 	.word	0x200001c4

08003cd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08c      	sub	sp, #48	; 0x30
 8003cdc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cde:	e0ac      	b.n	8003e3a <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f2c0 80a8 	blt.w	8003e38 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe fa08 	bl	800210e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cfe:	1d3b      	adds	r3, r7, #4
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ff87 	bl	8003c14 <prvSampleTimeNow>
 8003d06:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b09      	cmp	r3, #9
 8003d0c:	f200 8095 	bhi.w	8003e3a <prvProcessReceivedCommands+0x162>
 8003d10:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <prvProcessReceivedCommands+0x40>)
 8003d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d16:	bf00      	nop
 8003d18:	08003d41 	.word	0x08003d41
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d41 	.word	0x08003d41
 8003d24:	08003db3 	.word	0x08003db3
 8003d28:	08003dc7 	.word	0x08003dc7
 8003d2c:	08003e0f 	.word	0x08003e0f
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003d41 	.word	0x08003d41
 8003d38:	08003db3 	.word	0x08003db3
 8003d3c:	08003dc7 	.word	0x08003dc7
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	18d1      	adds	r1, r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a3a      	ldr	r2, [r7, #32]
 8003d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d60:	f7ff ff78 	bl	8003c54 <prvInsertTimerInActiveList>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d067      	beq.n	8003e3a <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d70:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d05c      	beq.n	8003e3a <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	441a      	add	r2, r3
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2100      	movs	r1, #0
 8003d90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d92:	f7ff fe23 	bl	80039dc <xTimerGenericCommand>
 8003d96:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d14d      	bne.n	8003e3a <prvProcessReceivedCommands+0x162>
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	e7fe      	b.n	8003db0 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003dc4:	e039      	b.n	8003e3a <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <prvProcessReceivedCommands+0x122>
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e7fe      	b.n	8003df8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	18d1      	adds	r1, r2, r3
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e08:	f7ff ff24 	bl	8003c54 <prvInsertTimerInActiveList>
                        break;
 8003e0c:	e015      	b.n	8003e3a <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d103      	bne.n	8003e24 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8003e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e1e:	f000 fc55 	bl	80046cc <vPortFree>
 8003e22:	e00a      	b.n	8003e3a <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e36:	e000      	b.n	8003e3a <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003e38:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <prvProcessReceivedCommands+0x184>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f107 0108 	add.w	r1, r7, #8
 8003e42:	2200      	movs	r2, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fe fc57 	bl	80026f8 <xQueueReceive>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f47f af47 	bne.w	8003ce0 <prvProcessReceivedCommands+0x8>
        }
    }
 8003e52:	bf00      	nop
 8003e54:	3728      	adds	r7, #40	; 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200001cc 	.word	0x200001cc

08003e60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e66:	e047      	b.n	8003ef8 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e68:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <prvSwitchTimerLists+0xc0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e72:	4b2b      	ldr	r3, [pc, #172]	; (8003f20 <prvSwitchTimerLists+0xc0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe f944 	bl	800210e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d02d      	beq.n	8003ef8 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d90e      	bls.n	8003ecc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eba:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <prvSwitchTimerLists+0xc0>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f7fe f8e9 	bl	800209c <vListInsert>
 8003eca:	e015      	b.n	8003ef8 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff fd80 	bl	80039dc <xTimerGenericCommand>
 8003edc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d109      	bne.n	8003ef8 <prvSwitchTimerLists+0x98>
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	e7fe      	b.n	8003ef6 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <prvSwitchTimerLists+0xc0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1b2      	bne.n	8003e68 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <prvSwitchTimerLists+0xc0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <prvSwitchTimerLists+0xc4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <prvSwitchTimerLists+0xc0>)
 8003f0e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <prvSwitchTimerLists+0xc4>)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	6013      	str	r3, [r2, #0]
    }
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	200001c4 	.word	0x200001c4
 8003f24:	200001c8 	.word	0x200001c8

08003f28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f2c:	f000 f9d2 	bl	80042d4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f30:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <prvCheckForValidListAndQueue+0x54>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11d      	bne.n	8003f74 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f38:	4811      	ldr	r0, [pc, #68]	; (8003f80 <prvCheckForValidListAndQueue+0x58>)
 8003f3a:	f7fe f85e 	bl	8001ffa <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f3e:	4811      	ldr	r0, [pc, #68]	; (8003f84 <prvCheckForValidListAndQueue+0x5c>)
 8003f40:	f7fe f85b 	bl	8001ffa <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003f44:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <prvCheckForValidListAndQueue+0x60>)
 8003f46:	4a0e      	ldr	r2, [pc, #56]	; (8003f80 <prvCheckForValidListAndQueue+0x58>)
 8003f48:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003f4a:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <prvCheckForValidListAndQueue+0x64>)
 8003f4c:	4a0d      	ldr	r2, [pc, #52]	; (8003f84 <prvCheckForValidListAndQueue+0x5c>)
 8003f4e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003f50:	2200      	movs	r2, #0
 8003f52:	210c      	movs	r1, #12
 8003f54:	200a      	movs	r0, #10
 8003f56:	f7fe f96d 	bl	8002234 <xQueueGenericCreate>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <prvCheckForValidListAndQueue+0x54>)
 8003f5e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <prvCheckForValidListAndQueue+0x54>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <prvCheckForValidListAndQueue+0x54>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4908      	ldr	r1, [pc, #32]	; (8003f90 <prvCheckForValidListAndQueue+0x68>)
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe fde6 	bl	8002b40 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f74:	f000 f9dc 	bl	8004330 <vPortExitCritical>
    }
 8003f78:	bf00      	nop
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	200001cc 	.word	0x200001cc
 8003f80:	2000019c 	.word	0x2000019c
 8003f84:	200001b0 	.word	0x200001b0
 8003f88:	200001c4 	.word	0x200001c4
 8003f8c:	200001c8 	.word	0x200001c8
 8003f90:	08006f84 	.word	0x08006f84

08003f94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3b04      	subs	r3, #4
 8003fa4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3b04      	subs	r3, #4
 8003fb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f023 0201 	bic.w	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3b04      	subs	r3, #4
 8003fc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003fc4:	4a0c      	ldr	r2, [pc, #48]	; (8003ff8 <pxPortInitialiseStack+0x64>)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3b14      	subs	r3, #20
 8003fce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3b04      	subs	r3, #4
 8003fda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f06f 0202 	mvn.w	r2, #2
 8003fe2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3b20      	subs	r3, #32
 8003fe8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	08003ffd 	.word	0x08003ffd

08003ffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004006:	4b11      	ldr	r3, [pc, #68]	; (800404c <prvTaskExitError+0x50>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d009      	beq.n	8004024 <prvTaskExitError+0x28>
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	e7fe      	b.n	8004022 <prvTaskExitError+0x26>
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004036:	bf00      	nop
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0fc      	beq.n	8004038 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000010 	.word	0x20000010

08004050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004050:	4b07      	ldr	r3, [pc, #28]	; (8004070 <pxCurrentTCBConst2>)
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	f380 8809 	msr	PSP, r0
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f380 8811 	msr	BASEPRI, r0
 800406a:	4770      	bx	lr
 800406c:	f3af 8000 	nop.w

08004070 <pxCurrentTCBConst2>:
 8004070:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004078:	4808      	ldr	r0, [pc, #32]	; (800409c <prvPortStartFirstTask+0x24>)
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	f380 8808 	msr	MSP, r0
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8814 	msr	CONTROL, r0
 800408a:	b662      	cpsie	i
 800408c:	b661      	cpsie	f
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	df00      	svc	0
 8004098:	bf00      	nop
 800409a:	0000      	.short	0x0000
 800409c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop

080040a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040aa:	4b44      	ldr	r3, [pc, #272]	; (80041bc <xPortStartScheduler+0x118>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a44      	ldr	r2, [pc, #272]	; (80041c0 <xPortStartScheduler+0x11c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d109      	bne.n	80040c8 <xPortStartScheduler+0x24>
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	e7fe      	b.n	80040c6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040c8:	4b3c      	ldr	r3, [pc, #240]	; (80041bc <xPortStartScheduler+0x118>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3d      	ldr	r2, [pc, #244]	; (80041c4 <xPortStartScheduler+0x120>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d109      	bne.n	80040e6 <xPortStartScheduler+0x42>
 80040d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e7fe      	b.n	80040e4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040e6:	4b38      	ldr	r3, [pc, #224]	; (80041c8 <xPortStartScheduler+0x124>)
 80040e8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	22ff      	movs	r2, #255	; 0xff
 80040f6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4b30      	ldr	r3, [pc, #192]	; (80041cc <xPortStartScheduler+0x128>)
 800410c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800410e:	4b30      	ldr	r3, [pc, #192]	; (80041d0 <xPortStartScheduler+0x12c>)
 8004110:	2207      	movs	r2, #7
 8004112:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004114:	e009      	b.n	800412a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004116:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <xPortStartScheduler+0x12c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3b01      	subs	r3, #1
 800411c:	4a2c      	ldr	r2, [pc, #176]	; (80041d0 <xPortStartScheduler+0x12c>)
 800411e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b80      	cmp	r3, #128	; 0x80
 8004134:	d0ef      	beq.n	8004116 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004136:	4b26      	ldr	r3, [pc, #152]	; (80041d0 <xPortStartScheduler+0x12c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f1c3 0307 	rsb	r3, r3, #7
 800413e:	2b04      	cmp	r3, #4
 8004140:	d009      	beq.n	8004156 <xPortStartScheduler+0xb2>
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	e7fe      	b.n	8004154 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004156:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <xPortStartScheduler+0x12c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	4a1c      	ldr	r2, [pc, #112]	; (80041d0 <xPortStartScheduler+0x12c>)
 800415e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004160:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <xPortStartScheduler+0x12c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004168:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <xPortStartScheduler+0x12c>)
 800416a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004174:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <xPortStartScheduler+0x130>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a16      	ldr	r2, [pc, #88]	; (80041d4 <xPortStartScheduler+0x130>)
 800417a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800417e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004180:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <xPortStartScheduler+0x130>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <xPortStartScheduler+0x130>)
 8004186:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800418a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800418c:	f000 f954 	bl	8004438 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004190:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <xPortStartScheduler+0x134>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004196:	f000 f973 	bl	8004480 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800419a:	4b10      	ldr	r3, [pc, #64]	; (80041dc <xPortStartScheduler+0x138>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a0f      	ldr	r2, [pc, #60]	; (80041dc <xPortStartScheduler+0x138>)
 80041a0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041a4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80041a6:	f7ff ff67 	bl	8004078 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80041aa:	f7ff f87b 	bl	80032a4 <vTaskSwitchContext>
    prvTaskExitError();
 80041ae:	f7ff ff25 	bl	8003ffc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	e000ed00 	.word	0xe000ed00
 80041c0:	410fc271 	.word	0x410fc271
 80041c4:	410fc270 	.word	0x410fc270
 80041c8:	e000e400 	.word	0xe000e400
 80041cc:	200001d8 	.word	0x200001d8
 80041d0:	200001dc 	.word	0x200001dc
 80041d4:	e000ed20 	.word	0xe000ed20
 80041d8:	20000010 	.word	0x20000010
 80041dc:	e000ef34 	.word	0xe000ef34

080041e0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041e6:	4b35      	ldr	r3, [pc, #212]	; (80042bc <vInitPrioGroupValue+0xdc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a35      	ldr	r2, [pc, #212]	; (80042c0 <vInitPrioGroupValue+0xe0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d109      	bne.n	8004204 <vInitPrioGroupValue+0x24>
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	e7fe      	b.n	8004202 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004204:	4b2d      	ldr	r3, [pc, #180]	; (80042bc <vInitPrioGroupValue+0xdc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a2e      	ldr	r2, [pc, #184]	; (80042c4 <vInitPrioGroupValue+0xe4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d109      	bne.n	8004222 <vInitPrioGroupValue+0x42>
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e7fe      	b.n	8004220 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004222:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <vInitPrioGroupValue+0xe8>)
 8004224:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	22ff      	movs	r2, #255	; 0xff
 8004232:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004244:	b2da      	uxtb	r2, r3
 8004246:	4b21      	ldr	r3, [pc, #132]	; (80042cc <vInitPrioGroupValue+0xec>)
 8004248:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800424a:	4b21      	ldr	r3, [pc, #132]	; (80042d0 <vInitPrioGroupValue+0xf0>)
 800424c:	2207      	movs	r2, #7
 800424e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004250:	e009      	b.n	8004266 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004252:	4b1f      	ldr	r3, [pc, #124]	; (80042d0 <vInitPrioGroupValue+0xf0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3b01      	subs	r3, #1
 8004258:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <vInitPrioGroupValue+0xf0>)
 800425a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b80      	cmp	r3, #128	; 0x80
 8004270:	d0ef      	beq.n	8004252 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004272:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <vInitPrioGroupValue+0xf0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f1c3 0307 	rsb	r3, r3, #7
 800427a:	2b04      	cmp	r3, #4
 800427c:	d009      	beq.n	8004292 <vInitPrioGroupValue+0xb2>
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	e7fe      	b.n	8004290 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <vInitPrioGroupValue+0xf0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	4a0d      	ldr	r2, [pc, #52]	; (80042d0 <vInitPrioGroupValue+0xf0>)
 800429a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <vInitPrioGroupValue+0xf0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042a4:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <vInitPrioGroupValue+0xf0>)
 80042a6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80042b0:	bf00      	nop
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000ed00 	.word	0xe000ed00
 80042c0:	410fc271 	.word	0x410fc271
 80042c4:	410fc270 	.word	0x410fc270
 80042c8:	e000e400 	.word	0xe000e400
 80042cc:	200001d8 	.word	0x200001d8
 80042d0:	200001dc 	.word	0x200001dc

080042d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80042ec:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <vPortEnterCritical+0x54>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3301      	adds	r3, #1
 80042f2:	4a0d      	ldr	r2, [pc, #52]	; (8004328 <vPortEnterCritical+0x54>)
 80042f4:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <vPortEnterCritical+0x54>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d10e      	bne.n	800431c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <vPortEnterCritical+0x58>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <vPortEnterCritical+0x48>
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	e7fe      	b.n	800431a <vPortEnterCritical+0x46>
    }
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	20000010 	.word	0x20000010
 800432c:	e000ed04 	.word	0xe000ed04

08004330 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004336:	4b11      	ldr	r3, [pc, #68]	; (800437c <vPortExitCritical+0x4c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <vPortExitCritical+0x22>
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	607b      	str	r3, [r7, #4]
 8004350:	e7fe      	b.n	8004350 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <vPortExitCritical+0x4c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3b01      	subs	r3, #1
 8004358:	4a08      	ldr	r2, [pc, #32]	; (800437c <vPortExitCritical+0x4c>)
 800435a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800435c:	4b07      	ldr	r3, [pc, #28]	; (800437c <vPortExitCritical+0x4c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <vPortExitCritical+0x3e>
 8004364:	2300      	movs	r3, #0
 8004366:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000010 	.word	0x20000010

08004380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004380:	f3ef 8009 	mrs	r0, PSP
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <pxCurrentTCBConst>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	f01e 0f10 	tst.w	lr, #16
 8004390:	bf08      	it	eq
 8004392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439a:	6010      	str	r0, [r2, #0]
 800439c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043a4:	f380 8811 	msr	BASEPRI, r0
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f7fe ff78 	bl	80032a4 <vTaskSwitchContext>
 80043b4:	f04f 0000 	mov.w	r0, #0
 80043b8:	f380 8811 	msr	BASEPRI, r0
 80043bc:	bc09      	pop	{r0, r3}
 80043be:	6819      	ldr	r1, [r3, #0]
 80043c0:	6808      	ldr	r0, [r1, #0]
 80043c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c6:	f01e 0f10 	tst.w	lr, #16
 80043ca:	bf08      	it	eq
 80043cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043d0:	f380 8809 	msr	PSP, r0
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	f3af 8000 	nop.w

080043e0 <pxCurrentTCBConst>:
 80043e0:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop

080043e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
        __asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004400:	f001 fdb4 	bl	8005f6c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004404:	f7fe fe92 	bl	800312c <xTaskIncrementTick>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d006      	beq.n	800441c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800440e:	f001 fe0b 	bl	8006028 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004412:	4b08      	ldr	r3, [pc, #32]	; (8004434 <SysTick_Handler+0x4c>)
 8004414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	e001      	b.n	8004420 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 800441c:	f001 fde8 	bl	8005ff0 <SEGGER_SYSVIEW_RecordExitISR>
 8004420:	2300      	movs	r3, #0
 8004422:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	e000ed04 	.word	0xe000ed04

08004438 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <vPortSetupTimerInterrupt+0x34>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004442:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <vPortSetupTimerInterrupt+0x38>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <vPortSetupTimerInterrupt+0x3c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <vPortSetupTimerInterrupt+0x40>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	099b      	lsrs	r3, r3, #6
 8004454:	4a09      	ldr	r2, [pc, #36]	; (800447c <vPortSetupTimerInterrupt+0x44>)
 8004456:	3b01      	subs	r3, #1
 8004458:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <vPortSetupTimerInterrupt+0x34>)
 800445c:	2207      	movs	r2, #7
 800445e:	601a      	str	r2, [r3, #0]
}
 8004460:	bf00      	nop
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000e010 	.word	0xe000e010
 8004470:	e000e018 	.word	0xe000e018
 8004474:	20000008 	.word	0x20000008
 8004478:	10624dd3 	.word	0x10624dd3
 800447c:	e000e014 	.word	0xe000e014

08004480 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004480:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004490 <vPortEnableVFP+0x10>
 8004484:	6801      	ldr	r1, [r0, #0]
 8004486:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800448a:	6001      	str	r1, [r0, #0]
 800448c:	4770      	bx	lr
 800448e:	0000      	.short	0x0000
 8004490:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop

08004498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800449e:	f3ef 8305 	mrs	r3, IPSR
 80044a2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b0f      	cmp	r3, #15
 80044a8:	d913      	bls.n	80044d2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044aa:	4a16      	ldr	r2, [pc, #88]	; (8004504 <vPortValidateInterruptPriority+0x6c>)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044b4:	4b14      	ldr	r3, [pc, #80]	; (8004508 <vPortValidateInterruptPriority+0x70>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	7afa      	ldrb	r2, [r7, #11]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d209      	bcs.n	80044d2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	e7fe      	b.n	80044d0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044d2:	4b0e      	ldr	r3, [pc, #56]	; (800450c <vPortValidateInterruptPriority+0x74>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <vPortValidateInterruptPriority+0x78>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d909      	bls.n	80044f6 <vPortValidateInterruptPriority+0x5e>
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	e7fe      	b.n	80044f4 <vPortValidateInterruptPriority+0x5c>
    }
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	e000e3f0 	.word	0xe000e3f0
 8004508:	200001d8 	.word	0x200001d8
 800450c:	e000ed0c 	.word	0xe000ed0c
 8004510:	200001dc 	.word	0x200001dc

08004514 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004520:	f7fe fd34 	bl	8002f8c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004524:	4b63      	ldr	r3, [pc, #396]	; (80046b4 <pvPortMalloc+0x1a0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800452c:	f000 f92e 	bl	800478c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004530:	4b61      	ldr	r3, [pc, #388]	; (80046b8 <pvPortMalloc+0x1a4>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4013      	ands	r3, r2
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 80a5 	bne.w	8004688 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d02c      	beq.n	800459e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004544:	2208      	movs	r2, #8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	d226      	bcs.n	800459e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8004550:	2208      	movs	r2, #8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f023 0307 	bic.w	r3, r3, #7
 8004568:	3308      	adds	r3, #8
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d213      	bcs.n	8004598 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f023 0307 	bic.w	r3, r3, #7
 8004576:	3308      	adds	r3, #8
 8004578:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00f      	beq.n	80045a4 <pvPortMalloc+0x90>
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	e7fe      	b.n	8004596 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800459c:	e002      	b.n	80045a4 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	e000      	b.n	80045a6 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045a4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d06d      	beq.n	8004688 <pvPortMalloc+0x174>
 80045ac:	4b43      	ldr	r3, [pc, #268]	; (80046bc <pvPortMalloc+0x1a8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d868      	bhi.n	8004688 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80045b6:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <pvPortMalloc+0x1ac>)
 80045b8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80045ba:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <pvPortMalloc+0x1ac>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045c0:	e004      	b.n	80045cc <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d903      	bls.n	80045de <pvPortMalloc+0xca>
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f1      	bne.n	80045c2 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80045de:	4b35      	ldr	r3, [pc, #212]	; (80046b4 <pvPortMalloc+0x1a0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d04f      	beq.n	8004688 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2208      	movs	r2, #8
 80045ee:	4413      	add	r3, r2
 80045f0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	1ad2      	subs	r2, r2, r3
 8004602:	2308      	movs	r3, #8
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	429a      	cmp	r2, r3
 8004608:	d91e      	bls.n	8004648 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800460a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4413      	add	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <pvPortMalloc+0x11c>
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	e7fe      	b.n	800462e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004642:	69b8      	ldr	r0, [r7, #24]
 8004644:	f000 f904 	bl	8004850 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004648:	4b1c      	ldr	r3, [pc, #112]	; (80046bc <pvPortMalloc+0x1a8>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	4a1a      	ldr	r2, [pc, #104]	; (80046bc <pvPortMalloc+0x1a8>)
 8004654:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004656:	4b19      	ldr	r3, [pc, #100]	; (80046bc <pvPortMalloc+0x1a8>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <pvPortMalloc+0x1b0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d203      	bcs.n	800466a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004662:	4b16      	ldr	r3, [pc, #88]	; (80046bc <pvPortMalloc+0x1a8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <pvPortMalloc+0x1b0>)
 8004668:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <pvPortMalloc+0x1a4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	431a      	orrs	r2, r3
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <pvPortMalloc+0x1b4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3301      	adds	r3, #1
 8004684:	4a10      	ldr	r2, [pc, #64]	; (80046c8 <pvPortMalloc+0x1b4>)
 8004686:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004688:	f7fe fc8e 	bl	8002fa8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <pvPortMalloc+0x196>
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e7fe      	b.n	80046a8 <pvPortMalloc+0x194>
    return pvReturn;
 80046aa:	69fb      	ldr	r3, [r7, #28]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3728      	adds	r7, #40	; 0x28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20012de8 	.word	0x20012de8
 80046b8:	20012dfc 	.word	0x20012dfc
 80046bc:	20012dec 	.word	0x20012dec
 80046c0:	20012de0 	.word	0x20012de0
 80046c4:	20012df0 	.word	0x20012df0
 80046c8:	20012df4 	.word	0x20012df4

080046cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d04b      	beq.n	8004776 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80046de:	2308      	movs	r3, #8
 80046e0:	425b      	negs	r3, r3
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4413      	add	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	4b23      	ldr	r3, [pc, #140]	; (8004780 <vPortFree+0xb4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <vPortFree+0x42>
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e7fe      	b.n	800470c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <vPortFree+0x5e>
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	e7fe      	b.n	8004728 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	4b14      	ldr	r3, [pc, #80]	; (8004780 <vPortFree+0xb4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4013      	ands	r3, r2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01e      	beq.n	8004776 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11a      	bne.n	8004776 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <vPortFree+0xb4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	43db      	mvns	r3, r3
 800474a:	401a      	ands	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004750:	f7fe fc1c 	bl	8002f8c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <vPortFree+0xb8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4413      	add	r3, r2
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <vPortFree+0xb8>)
 8004760:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004762:	6938      	ldr	r0, [r7, #16]
 8004764:	f000 f874 	bl	8004850 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004768:	4b07      	ldr	r3, [pc, #28]	; (8004788 <vPortFree+0xbc>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	4a06      	ldr	r2, [pc, #24]	; (8004788 <vPortFree+0xbc>)
 8004770:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004772:	f7fe fc19 	bl	8002fa8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004776:	bf00      	nop
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20012dfc 	.word	0x20012dfc
 8004784:	20012dec 	.word	0x20012dec
 8004788:	20012df8 	.word	0x20012df8

0800478c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004792:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004796:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004798:	4b27      	ldr	r3, [pc, #156]	; (8004838 <prvHeapInit+0xac>)
 800479a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00c      	beq.n	80047c0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3307      	adds	r3, #7
 80047aa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0307 	bic.w	r3, r3, #7
 80047b2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	4a1f      	ldr	r2, [pc, #124]	; (8004838 <prvHeapInit+0xac>)
 80047bc:	4413      	add	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047c4:	4a1d      	ldr	r2, [pc, #116]	; (800483c <prvHeapInit+0xb0>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80047ca:	4b1c      	ldr	r3, [pc, #112]	; (800483c <prvHeapInit+0xb0>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	4413      	add	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80047d8:	2208      	movs	r2, #8
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0307 	bic.w	r3, r3, #7
 80047e6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4a15      	ldr	r2, [pc, #84]	; (8004840 <prvHeapInit+0xb4>)
 80047ec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80047ee:	4b14      	ldr	r3, [pc, #80]	; (8004840 <prvHeapInit+0xb4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <prvHeapInit+0xb4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	1ad2      	subs	r2, r2, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <prvHeapInit+0xb4>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <prvHeapInit+0xb8>)
 800481a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4a09      	ldr	r2, [pc, #36]	; (8004848 <prvHeapInit+0xbc>)
 8004822:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004824:	4b09      	ldr	r3, [pc, #36]	; (800484c <prvHeapInit+0xc0>)
 8004826:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800482a:	601a      	str	r2, [r3, #0]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	200001e0 	.word	0x200001e0
 800483c:	20012de0 	.word	0x20012de0
 8004840:	20012de8 	.word	0x20012de8
 8004844:	20012df0 	.word	0x20012df0
 8004848:	20012dec 	.word	0x20012dec
 800484c:	20012dfc 	.word	0x20012dfc

08004850 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004858:	4b28      	ldr	r3, [pc, #160]	; (80048fc <prvInsertBlockIntoFreeList+0xac>)
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	e002      	b.n	8004864 <prvInsertBlockIntoFreeList+0x14>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	429a      	cmp	r2, r3
 800486c:	d8f7      	bhi.n	800485e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	4413      	add	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	429a      	cmp	r2, r3
 800487e:	d108      	bne.n	8004892 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	441a      	add	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	441a      	add	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d118      	bne.n	80048d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <prvInsertBlockIntoFreeList+0xb0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d00d      	beq.n	80048ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	441a      	add	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	e008      	b.n	80048e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048ce:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <prvInsertBlockIntoFreeList+0xb0>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e003      	b.n	80048e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d002      	beq.n	80048ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20012de0 	.word	0x20012de0
 8004900:	20012de8 	.word	0x20012de8

08004904 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004908:	4803      	ldr	r0, [pc, #12]	; (8004918 <_cbSendSystemDesc+0x14>)
 800490a:	f001 fadb 	bl	8005ec4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800490e:	4803      	ldr	r0, [pc, #12]	; (800491c <_cbSendSystemDesc+0x18>)
 8004910:	f001 fad8 	bl	8005ec4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004914:	bf00      	nop
 8004916:	bd80      	pop	{r7, pc}
 8004918:	08006f8c 	.word	0x08006f8c
 800491c:	08006fd0 	.word	0x08006fd0

08004920 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <SEGGER_SYSVIEW_Conf+0x20>)
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <SEGGER_SYSVIEW_Conf+0x20>)
 800492a:	6819      	ldr	r1, [r3, #0]
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <SEGGER_SYSVIEW_Conf+0x24>)
 800492e:	4a06      	ldr	r2, [pc, #24]	; (8004948 <SEGGER_SYSVIEW_Conf+0x28>)
 8004930:	f000 fe46 	bl	80055c0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004934:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004938:	f000 fe86 	bl	8005648 <SEGGER_SYSVIEW_SetRAMBase>
}
 800493c:	bf00      	nop
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000008 	.word	0x20000008
 8004944:	08004905 	.word	0x08004905
 8004948:	08007070 	.word	0x08007070

0800494c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800494c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494e:	b085      	sub	sp, #20
 8004950:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004952:	2300      	movs	r3, #0
 8004954:	607b      	str	r3, [r7, #4]
 8004956:	e034      	b.n	80049c2 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004958:	491e      	ldr	r1, [pc, #120]	; (80049d4 <_cbSendTaskList+0x88>)
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	491a      	ldr	r1, [pc, #104]	; (80049d4 <_cbSendTaskList+0x88>)
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	3304      	adds	r3, #4
 8004978:	681c      	ldr	r4, [r3, #0]
 800497a:	4916      	ldr	r1, [pc, #88]	; (80049d4 <_cbSendTaskList+0x88>)
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	3308      	adds	r3, #8
 800498a:	681d      	ldr	r5, [r3, #0]
 800498c:	4911      	ldr	r1, [pc, #68]	; (80049d4 <_cbSendTaskList+0x88>)
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	330c      	adds	r3, #12
 800499c:	681e      	ldr	r6, [r3, #0]
 800499e:	490d      	ldr	r1, [pc, #52]	; (80049d4 <_cbSendTaskList+0x88>)
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	3310      	adds	r3, #16
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	4633      	mov	r3, r6
 80049b4:	462a      	mov	r2, r5
 80049b6:	4621      	mov	r1, r4
 80049b8:	f000 f8b4 	bl	8004b24 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3301      	adds	r3, #1
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <_cbSendTaskList+0x8c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d3c5      	bcc.n	8004958 <_cbSendTaskList+0xc>
  }
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d4:	20012e00 	.word	0x20012e00
 80049d8:	20012ea0 	.word	0x20012ea0

080049dc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80049dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80049e2:	f7fe fb91 	bl	8003108 <xTaskGetTickCountFromISR>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f04f 0400 	mov.w	r4, #0
 80049ec:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80049f0:	e9d7 5600 	ldrd	r5, r6, [r7]
 80049f4:	462b      	mov	r3, r5
 80049f6:	4634      	mov	r4, r6
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	0162      	lsls	r2, r4, #5
 8004a02:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004a06:	0159      	lsls	r1, r3, #5
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4614      	mov	r4, r2
 8004a0c:	1b5b      	subs	r3, r3, r5
 8004a0e:	eb64 0406 	sbc.w	r4, r4, r6
 8004a12:	f04f 0100 	mov.w	r1, #0
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	00a2      	lsls	r2, r4, #2
 8004a1c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004a20:	0099      	lsls	r1, r3, #2
 8004a22:	460b      	mov	r3, r1
 8004a24:	4614      	mov	r4, r2
 8004a26:	195b      	adds	r3, r3, r5
 8004a28:	eb44 0406 	adc.w	r4, r4, r6
 8004a2c:	f04f 0100 	mov.w	r1, #0
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	00e2      	lsls	r2, r4, #3
 8004a36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a3a:	00d9      	lsls	r1, r3, #3
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4614      	mov	r4, r2
 8004a40:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8004a44:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004a54 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004a62:	2205      	movs	r2, #5
 8004a64:	492b      	ldr	r1, [pc, #172]	; (8004b14 <SYSVIEW_AddTask+0xc0>)
 8004a66:	68b8      	ldr	r0, [r7, #8]
 8004a68:	f001 fdc0 	bl	80065ec <memcmp>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d04b      	beq.n	8004b0a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004a72:	4b29      	ldr	r3, [pc, #164]	; (8004b18 <SYSVIEW_AddTask+0xc4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b07      	cmp	r3, #7
 8004a78:	d903      	bls.n	8004a82 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004a7a:	4828      	ldr	r0, [pc, #160]	; (8004b1c <SYSVIEW_AddTask+0xc8>)
 8004a7c:	f001 fd1e 	bl	80064bc <SEGGER_SYSVIEW_Warn>
    return;
 8004a80:	e044      	b.n	8004b0c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004a82:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <SYSVIEW_AddTask+0xc4>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4926      	ldr	r1, [pc, #152]	; (8004b20 <SYSVIEW_AddTask+0xcc>)
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004a96:	4b20      	ldr	r3, [pc, #128]	; (8004b18 <SYSVIEW_AddTask+0xc4>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4921      	ldr	r1, [pc, #132]	; (8004b20 <SYSVIEW_AddTask+0xcc>)
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004aac:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <SYSVIEW_AddTask+0xc4>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	491b      	ldr	r1, [pc, #108]	; (8004b20 <SYSVIEW_AddTask+0xcc>)
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	3308      	adds	r3, #8
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <SYSVIEW_AddTask+0xc4>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4916      	ldr	r1, [pc, #88]	; (8004b20 <SYSVIEW_AddTask+0xcc>)
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ad8:	4b0f      	ldr	r3, [pc, #60]	; (8004b18 <SYSVIEW_AddTask+0xc4>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4910      	ldr	r1, [pc, #64]	; (8004b20 <SYSVIEW_AddTask+0xcc>)
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	3310      	adds	r3, #16
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <SYSVIEW_AddTask+0xc4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3301      	adds	r3, #1
 8004af4:	4a08      	ldr	r2, [pc, #32]	; (8004b18 <SYSVIEW_AddTask+0xc4>)
 8004af6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f80e 	bl	8004b24 <SYSVIEW_SendTaskInfo>
 8004b08:	e000      	b.n	8004b0c <SYSVIEW_AddTask+0xb8>
    return;
 8004b0a:	bf00      	nop

}
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	08006fe0 	.word	0x08006fe0
 8004b18:	20012ea0 	.word	0x20012ea0
 8004b1c:	08006fe8 	.word	0x08006fe8
 8004b20:	20012e00 	.word	0x20012e00

08004b24 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	; 0x28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004b32:	f107 0314 	add.w	r3, r7, #20
 8004b36:	2214      	movs	r2, #20
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 fd70 	bl	8006620 <memset>
  TaskInfo.TaskID     = TaskID;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004b54:	f107 0314 	add.w	r3, r7, #20
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f001 f8bb 	bl	8005cd4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004b5e:	bf00      	nop
 8004b60:	3728      	adds	r7, #40	; 0x28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004b6e:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <_DoInit+0x98>)
 8004b70:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2203      	movs	r2, #3
 8004b76:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a20      	ldr	r2, [pc, #128]	; (8004c04 <_DoInit+0x9c>)
 8004b82:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a20      	ldr	r2, [pc, #128]	; (8004c08 <_DoInit+0xa0>)
 8004b88:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b90:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a17      	ldr	r2, [pc, #92]	; (8004c04 <_DoInit+0x9c>)
 8004ba8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <_DoInit+0xa4>)
 8004bae:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3307      	adds	r3, #7
 8004bcc:	4a10      	ldr	r2, [pc, #64]	; (8004c10 <_DoInit+0xa8>)
 8004bce:	6810      	ldr	r0, [r2, #0]
 8004bd0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004bd2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <_DoInit+0xac>)
 8004bda:	6810      	ldr	r0, [r2, #0]
 8004bdc:	6018      	str	r0, [r3, #0]
 8004bde:	8891      	ldrh	r1, [r2, #4]
 8004be0:	7992      	ldrb	r2, [r2, #6]
 8004be2:	8099      	strh	r1, [r3, #4]
 8004be4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004be6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004bf0:	f3bf 8f5f 	dmb	sy
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	2001445c 	.word	0x2001445c
 8004c04:	08007038 	.word	0x08007038
 8004c08:	20012ea4 	.word	0x20012ea4
 8004c0c:	200132a4 	.word	0x200132a4
 8004c10:	08007044 	.word	0x08007044
 8004c14:	08007048 	.word	0x08007048

08004c18 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004c24:	2300      	movs	r3, #0
 8004c26:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d905      	bls.n	8004c48 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
 8004c46:	e007      	b.n	8004c58 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	69b9      	ldr	r1, [r7, #24]
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	1acb      	subs	r3, r1, r3
 8004c52:	4413      	add	r3, r2
 8004c54:	3b01      	subs	r3, #1
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c62:	4293      	cmp	r3, r2
 8004c64:	bf28      	it	cs
 8004c66:	4613      	movcs	r3, r2
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	bf28      	it	cs
 8004c72:	4613      	movcs	r3, r2
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	6978      	ldr	r0, [r7, #20]
 8004c86:	f001 fcc0 	bl	800660a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004c8a:	6a3a      	ldr	r2, [r7, #32]
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	4413      	add	r3, r2
 8004c90:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	4413      	add	r3, r2
 8004c98:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	4413      	add	r3, r2
 8004ca8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d101      	bne.n	8004cb8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004cb8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1b2      	bne.n	8004c2e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3728      	adds	r7, #40	; 0x28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b088      	sub	sp, #32
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d911      	bls.n	8004d1a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	6938      	ldr	r0, [r7, #16]
 8004d06:	f001 fc80 	bl	800660a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d0a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	441a      	add	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004d18:	e01f      	b.n	8004d5a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	4413      	add	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	6938      	ldr	r0, [r7, #16]
 8004d2e:	f001 fc6c 	bl	800660a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	4413      	add	r3, r2
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6938      	ldr	r0, [r7, #16]
 8004d4c:	f001 fc5d 	bl	800660a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d50:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	60da      	str	r2, [r3, #12]
}
 8004d5a:	bf00      	nop
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004d62:	b480      	push	{r7}
 8004d64:	b087      	sub	sp, #28
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d808      	bhi.n	8004d90 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad2      	subs	r2, r2, r3
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	4413      	add	r3, r2
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e004      	b.n	8004d9a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004d9a:	697b      	ldr	r3, [r7, #20]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08c      	sub	sp, #48	; 0x30
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004db4:	4b3e      	ldr	r3, [pc, #248]	; (8004eb0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004db6:	623b      	str	r3, [r7, #32]
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004dc2:	f7ff fed1 	bl	8004b68 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	4413      	add	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	3360      	adds	r3, #96	; 0x60
 8004dd2:	4a37      	ldr	r2, [pc, #220]	; (8004eb0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004dd4:	4413      	add	r3, r2
 8004dd6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004de8:	2300      	movs	r3, #0
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d92b      	bls.n	8004e4c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4293      	cmp	r3, r2
 8004e04:	bf28      	it	cs
 8004e06:	4613      	movcs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	4413      	add	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	6939      	ldr	r1, [r7, #16]
 8004e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e1a:	f001 fbf6 	bl	800660a <memcpy>
    NumBytesRead += NumBytesRem;
 8004e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	4413      	add	r3, r2
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d101      	bne.n	8004e4c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	bf28      	it	cs
 8004e5c:	4613      	movcs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d019      	beq.n	8004e9a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	4413      	add	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	6939      	ldr	r1, [r7, #16]
 8004e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e76:	f001 fbc8 	bl	800660a <memcpy>
    NumBytesRead += NumBytesRem;
 8004e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4413      	add	r3, r2
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	4413      	add	r3, r2
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3730      	adds	r7, #48	; 0x30
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	2001445c 	.word	0x2001445c

08004eb4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	4613      	mov	r3, r2
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	4413      	add	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4a1e      	ldr	r2, [pc, #120]	; (8004f4c <SEGGER_RTT_WriteNoLock+0x98>)
 8004ed2:	4413      	add	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d017      	beq.n	8004f0e <SEGGER_RTT_WriteNoLock+0x5a>
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d302      	bcc.n	8004ee8 <SEGGER_RTT_WriteNoLock+0x34>
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d023      	beq.n	8004f2e <SEGGER_RTT_WriteNoLock+0x7a>
 8004ee6:	e029      	b.n	8004f3c <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004ee8:	6978      	ldr	r0, [r7, #20]
 8004eea:	f7ff ff3a 	bl	8004d62 <_GetAvailWriteSpace>
 8004eee:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d202      	bcs.n	8004efe <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004efc:	e021      	b.n	8004f42 <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	69b9      	ldr	r1, [r7, #24]
 8004f06:	6978      	ldr	r0, [r7, #20]
 8004f08:	f7ff fee3 	bl	8004cd2 <_WriteNoCheck>
    break;
 8004f0c:	e019      	b.n	8004f42 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004f0e:	6978      	ldr	r0, [r7, #20]
 8004f10:	f7ff ff27 	bl	8004d62 <_GetAvailWriteSpace>
 8004f14:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	bf28      	it	cs
 8004f1e:	4613      	movcs	r3, r2
 8004f20:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	69b9      	ldr	r1, [r7, #24]
 8004f26:	6978      	ldr	r0, [r7, #20]
 8004f28:	f7ff fed3 	bl	8004cd2 <_WriteNoCheck>
    break;
 8004f2c:	e009      	b.n	8004f42 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	69b9      	ldr	r1, [r7, #24]
 8004f32:	6978      	ldr	r0, [r7, #20]
 8004f34:	f7ff fe70 	bl	8004c18 <_WriteBlocking>
 8004f38:	61f8      	str	r0, [r7, #28]
    break;
 8004f3a:	e002      	b.n	8004f42 <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
    break;
 8004f40:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004f42:	69fb      	ldr	r3, [r7, #28]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	2001445c 	.word	0x2001445c

08004f50 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004f5c:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <SEGGER_RTT_Write+0x48>)
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <SEGGER_RTT_Write+0x1e>
 8004f6a:	f7ff fdfd 	bl	8004b68 <_DoInit>
  SEGGER_RTT_LOCK();
 8004f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f72:	f04f 0120 	mov.w	r1, #32
 8004f76:	f381 8811 	msr	BASEPRI, r1
 8004f7a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff ff97 	bl	8004eb4 <SEGGER_RTT_WriteNoLock>
 8004f86:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004f8e:	697b      	ldr	r3, [r7, #20]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3720      	adds	r7, #32
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	2001445c 	.word	0x2001445c

08004f9c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004faa:	4b3d      	ldr	r3, [pc, #244]	; (80050a0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <SEGGER_RTT_AllocUpBuffer+0x20>
 8004fb8:	f7ff fdd6 	bl	8004b68 <_DoInit>
  SEGGER_RTT_LOCK();
 8004fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8004fc0:	f04f 0120 	mov.w	r1, #32
 8004fc4:	f381 8811 	msr	BASEPRI, r1
 8004fc8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fca:	4b35      	ldr	r3, [pc, #212]	; (80050a0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004fcc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004fd2:	6939      	ldr	r1, [r7, #16]
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	4613      	mov	r3, r2
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	4413      	add	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	440b      	add	r3, r1
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d008      	beq.n	8004ffc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3301      	adds	r3, #1
 8004fee:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	dbeb      	blt.n	8004fd2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004ffa:	e000      	b.n	8004ffe <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004ffc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	429a      	cmp	r2, r3
 8005006:	da3f      	bge.n	8005088 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005008:	6939      	ldr	r1, [r7, #16]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	4613      	mov	r3, r2
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	4413      	add	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	440b      	add	r3, r1
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800501c:	6939      	ldr	r1, [r7, #16]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	4613      	mov	r3, r2
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	4413      	add	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	440b      	add	r3, r1
 800502c:	3304      	adds	r3, #4
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005032:	6939      	ldr	r1, [r7, #16]
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	4613      	mov	r3, r2
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	4413      	add	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	440b      	add	r3, r1
 8005040:	3320      	adds	r3, #32
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005046:	6939      	ldr	r1, [r7, #16]
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	4613      	mov	r3, r2
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4413      	add	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	440b      	add	r3, r1
 8005054:	3328      	adds	r3, #40	; 0x28
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800505a:	6939      	ldr	r1, [r7, #16]
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	440b      	add	r3, r1
 8005068:	3324      	adds	r3, #36	; 0x24
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800506e:	6939      	ldr	r1, [r7, #16]
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	4613      	mov	r3, r2
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	4413      	add	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	440b      	add	r3, r1
 800507c:	332c      	adds	r3, #44	; 0x2c
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005082:	f3bf 8f5f 	dmb	sy
 8005086:	e002      	b.n	800508e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005088:	f04f 33ff 	mov.w	r3, #4294967295
 800508c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005094:	69fb      	ldr	r3, [r7, #28]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3720      	adds	r7, #32
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	2001445c 	.word	0x2001445c

080050a4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80050b2:	4b33      	ldr	r3, [pc, #204]	; (8005180 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80050c0:	f7ff fd52 	bl	8004b68 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050c4:	4b2e      	ldr	r3, [pc, #184]	; (8005180 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80050c6:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	461a      	mov	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d24d      	bcs.n	8005170 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80050d4:	f3ef 8311 	mrs	r3, BASEPRI
 80050d8:	f04f 0120 	mov.w	r1, #32
 80050dc:	f381 8811 	msr	BASEPRI, r1
 80050e0:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d031      	beq.n	800514c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80050e8:	6979      	ldr	r1, [r7, #20]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4613      	mov	r3, r2
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4413      	add	r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	440b      	add	r3, r1
 80050f6:	3360      	adds	r3, #96	; 0x60
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80050fc:	6979      	ldr	r1, [r7, #20]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4613      	mov	r3, r2
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	4413      	add	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	440b      	add	r3, r1
 800510a:	3364      	adds	r3, #100	; 0x64
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005110:	6979      	ldr	r1, [r7, #20]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4613      	mov	r3, r2
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	4413      	add	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	440b      	add	r3, r1
 800511e:	3368      	adds	r3, #104	; 0x68
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005124:	6979      	ldr	r1, [r7, #20]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4613      	mov	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	440b      	add	r3, r1
 8005132:	3370      	adds	r3, #112	; 0x70
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005138:	6979      	ldr	r1, [r7, #20]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4613      	mov	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	4413      	add	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	440b      	add	r3, r1
 8005146:	336c      	adds	r3, #108	; 0x6c
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800514c:	6979      	ldr	r1, [r7, #20]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4613      	mov	r3, r2
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4413      	add	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	440b      	add	r3, r1
 800515a:	3374      	adds	r3, #116	; 0x74
 800515c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800515e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005160:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	e002      	b.n	8005176 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005170:	f04f 33ff 	mov.w	r3, #4294967295
 8005174:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005176:	69fb      	ldr	r3, [r7, #28]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3720      	adds	r7, #32
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	2001445c 	.word	0x2001445c

08005184 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005194:	e002      	b.n	800519c <_EncodeStr+0x18>
    Len++;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	3301      	adds	r3, #1
 800519a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4413      	add	r3, r2
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f6      	bne.n	8005196 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d901      	bls.n	80051b4 <_EncodeStr+0x30>
    Len = Limit;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2bfe      	cmp	r3, #254	; 0xfe
 80051b8:	d806      	bhi.n	80051c8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	60fa      	str	r2, [r7, #12]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	e011      	b.n	80051ec <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	60fa      	str	r2, [r7, #12]
 80051ce:	22ff      	movs	r2, #255	; 0xff
 80051d0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	60fa      	str	r2, [r7, #12]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	0a19      	lsrs	r1, r3, #8
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	60fa      	str	r2, [r7, #12]
 80051e8:	b2ca      	uxtb	r2, r1
 80051ea:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80051f0:	e00a      	b.n	8005208 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	1c53      	adds	r3, r2, #1
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	1c59      	adds	r1, r3, #1
 80051fc:	60f9      	str	r1, [r7, #12]
 80051fe:	7812      	ldrb	r2, [r2, #0]
 8005200:	701a      	strb	r2, [r3, #0]
    n++;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	3301      	adds	r3, #1
 8005206:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	429a      	cmp	r2, r3
 800520e:	d3f0      	bcc.n	80051f2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005210:	68fb      	ldr	r3, [r7, #12]
}
 8005212:	4618      	mov	r0, r3
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800523e:	4b33      	ldr	r3, [pc, #204]	; (800530c <_HandleIncomingPacket+0xd4>)
 8005240:	7e1b      	ldrb	r3, [r3, #24]
 8005242:	4618      	mov	r0, r3
 8005244:	1cfb      	adds	r3, r7, #3
 8005246:	2201      	movs	r2, #1
 8005248:	4619      	mov	r1, r3
 800524a:	f7ff fdad 	bl	8004da8 <SEGGER_RTT_ReadNoLock>
 800524e:	4603      	mov	r3, r0
 8005250:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	dd4d      	ble.n	80052f4 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	2b05      	cmp	r3, #5
 800525c:	d022      	beq.n	80052a4 <_HandleIncomingPacket+0x6c>
 800525e:	2b05      	cmp	r3, #5
 8005260:	dc0b      	bgt.n	800527a <_HandleIncomingPacket+0x42>
 8005262:	2b02      	cmp	r3, #2
 8005264:	d015      	beq.n	8005292 <_HandleIncomingPacket+0x5a>
 8005266:	2b02      	cmp	r3, #2
 8005268:	dc02      	bgt.n	8005270 <_HandleIncomingPacket+0x38>
 800526a:	2b01      	cmp	r3, #1
 800526c:	d00e      	beq.n	800528c <_HandleIncomingPacket+0x54>
 800526e:	e034      	b.n	80052da <_HandleIncomingPacket+0xa2>
 8005270:	2b03      	cmp	r3, #3
 8005272:	d011      	beq.n	8005298 <_HandleIncomingPacket+0x60>
 8005274:	2b04      	cmp	r3, #4
 8005276:	d012      	beq.n	800529e <_HandleIncomingPacket+0x66>
 8005278:	e02f      	b.n	80052da <_HandleIncomingPacket+0xa2>
 800527a:	2b07      	cmp	r3, #7
 800527c:	d018      	beq.n	80052b0 <_HandleIncomingPacket+0x78>
 800527e:	2b07      	cmp	r3, #7
 8005280:	db13      	blt.n	80052aa <_HandleIncomingPacket+0x72>
 8005282:	2b7f      	cmp	r3, #127	; 0x7f
 8005284:	d038      	beq.n	80052f8 <_HandleIncomingPacket+0xc0>
 8005286:	2b80      	cmp	r3, #128	; 0x80
 8005288:	d015      	beq.n	80052b6 <_HandleIncomingPacket+0x7e>
 800528a:	e026      	b.n	80052da <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800528c:	f000 fba8 	bl	80059e0 <SEGGER_SYSVIEW_Start>
      break;
 8005290:	e037      	b.n	8005302 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005292:	f000 fc5f 	bl	8005b54 <SEGGER_SYSVIEW_Stop>
      break;
 8005296:	e034      	b.n	8005302 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005298:	f000 fe38 	bl	8005f0c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800529c:	e031      	b.n	8005302 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800529e:	f000 fdfd 	bl	8005e9c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80052a2:	e02e      	b.n	8005302 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80052a4:	f000 fc7c 	bl	8005ba0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80052a8:	e02b      	b.n	8005302 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80052aa:	f001 f8c9 	bl	8006440 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80052ae:	e028      	b.n	8005302 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80052b0:	f001 f8a8 	bl	8006404 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80052b4:	e025      	b.n	8005302 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052b6:	4b15      	ldr	r3, [pc, #84]	; (800530c <_HandleIncomingPacket+0xd4>)
 80052b8:	7e1b      	ldrb	r3, [r3, #24]
 80052ba:	4618      	mov	r0, r3
 80052bc:	1cfb      	adds	r3, r7, #3
 80052be:	2201      	movs	r2, #1
 80052c0:	4619      	mov	r1, r3
 80052c2:	f7ff fd71 	bl	8004da8 <SEGGER_RTT_ReadNoLock>
 80052c6:	4603      	mov	r3, r0
 80052c8:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dd15      	ble.n	80052fc <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 f816 	bl	8006304 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80052d8:	e010      	b.n	80052fc <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80052da:	78fb      	ldrb	r3, [r7, #3]
 80052dc:	b25b      	sxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	da0e      	bge.n	8005300 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <_HandleIncomingPacket+0xd4>)
 80052e4:	7e1b      	ldrb	r3, [r3, #24]
 80052e6:	4618      	mov	r0, r3
 80052e8:	1cfb      	adds	r3, r7, #3
 80052ea:	2201      	movs	r2, #1
 80052ec:	4619      	mov	r1, r3
 80052ee:	f7ff fd5b 	bl	8004da8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80052f2:	e005      	b.n	8005300 <_HandleIncomingPacket+0xc8>
    }
  }
 80052f4:	bf00      	nop
 80052f6:	e004      	b.n	8005302 <_HandleIncomingPacket+0xca>
      break;
 80052f8:	bf00      	nop
 80052fa:	e002      	b.n	8005302 <_HandleIncomingPacket+0xca>
      break;
 80052fc:	bf00      	nop
 80052fe:	e000      	b.n	8005302 <_HandleIncomingPacket+0xca>
      break;
 8005300:	bf00      	nop
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	200142bc 	.word	0x200142bc

08005310 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b08c      	sub	sp, #48	; 0x30
 8005314:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005316:	2301      	movs	r3, #1
 8005318:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800531a:	1d3b      	adds	r3, r7, #4
 800531c:	3301      	adds	r3, #1
 800531e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005324:	4b31      	ldr	r3, [pc, #196]	; (80053ec <_TrySendOverflowPacket+0xdc>)
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	62bb      	str	r3, [r7, #40]	; 0x28
 800532a:	e00b      	b.n	8005344 <_TrySendOverflowPacket+0x34>
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	b2da      	uxtb	r2, r3
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	1c59      	adds	r1, r3, #1
 8005334:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	09db      	lsrs	r3, r3, #7
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	2b7f      	cmp	r3, #127	; 0x7f
 8005348:	d8f0      	bhi.n	800532c <_TrySendOverflowPacket+0x1c>
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800535a:	4b25      	ldr	r3, [pc, #148]	; (80053f0 <_TrySendOverflowPacket+0xe0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005360:	4b22      	ldr	r3, [pc, #136]	; (80053ec <_TrySendOverflowPacket+0xdc>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	e00b      	b.n	800538c <_TrySendOverflowPacket+0x7c>
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	1c59      	adds	r1, r3, #1
 800537c:	6279      	str	r1, [r7, #36]	; 0x24
 800537e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	09db      	lsrs	r3, r3, #7
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	2b7f      	cmp	r3, #127	; 0x7f
 8005390:	d8f0      	bhi.n	8005374 <_TrySendOverflowPacket+0x64>
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	627a      	str	r2, [r7, #36]	; 0x24
 8005398:	6a3a      	ldr	r2, [r7, #32]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <_TrySendOverflowPacket+0xdc>)
 80053a4:	785b      	ldrb	r3, [r3, #1]
 80053a6:	4618      	mov	r0, r3
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	1d3b      	adds	r3, r7, #4
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	4619      	mov	r1, r3
 80053b4:	f7fa ff0c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80053b8:	4603      	mov	r3, r0
 80053ba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80053c2:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <_TrySendOverflowPacket+0xdc>)
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80053c8:	4b08      	ldr	r3, [pc, #32]	; (80053ec <_TrySendOverflowPacket+0xdc>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	4b06      	ldr	r3, [pc, #24]	; (80053ec <_TrySendOverflowPacket+0xdc>)
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	e004      	b.n	80053e0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80053d6:	4b05      	ldr	r3, [pc, #20]	; (80053ec <_TrySendOverflowPacket+0xdc>)
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	3301      	adds	r3, #1
 80053dc:	4a03      	ldr	r2, [pc, #12]	; (80053ec <_TrySendOverflowPacket+0xdc>)
 80053de:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80053e0:	693b      	ldr	r3, [r7, #16]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3730      	adds	r7, #48	; 0x30
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200142bc 	.word	0x200142bc
 80053f0:	e0001004 	.word	0xe0001004

080053f4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005400:	4b6c      	ldr	r3, [pc, #432]	; (80055b4 <_SendPacket+0x1c0>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d010      	beq.n	800542a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005408:	4b6a      	ldr	r3, [pc, #424]	; (80055b4 <_SendPacket+0x1c0>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80a3 	beq.w	8005558 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005412:	4b68      	ldr	r3, [pc, #416]	; (80055b4 <_SendPacket+0x1c0>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d109      	bne.n	800542e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800541a:	f7ff ff79 	bl	8005310 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800541e:	4b65      	ldr	r3, [pc, #404]	; (80055b4 <_SendPacket+0x1c0>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b01      	cmp	r3, #1
 8005424:	f040 809a 	bne.w	800555c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005428:	e001      	b.n	800542e <_SendPacket+0x3a>
    goto Send;
 800542a:	bf00      	nop
 800542c:	e000      	b.n	8005430 <_SendPacket+0x3c>
Send:
 800542e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b1f      	cmp	r3, #31
 8005434:	d809      	bhi.n	800544a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005436:	4b5f      	ldr	r3, [pc, #380]	; (80055b4 <_SendPacket+0x1c0>)
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	f040 808b 	bne.w	8005560 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b17      	cmp	r3, #23
 800544e:	d807      	bhi.n	8005460 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3b01      	subs	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	e03d      	b.n	80054dc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b7f      	cmp	r3, #127	; 0x7f
 800546c:	d912      	bls.n	8005494 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	09da      	lsrs	r2, r3, #7
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3b01      	subs	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	3a01      	subs	r2, #1
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800548c:	b2da      	uxtb	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	e006      	b.n	80054a2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3b01      	subs	r3, #1
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	b2da      	uxtb	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b7f      	cmp	r3, #127	; 0x7f
 80054a6:	d912      	bls.n	80054ce <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	09da      	lsrs	r2, r3, #7
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	3a01      	subs	r2, #1
 80054c0:	60fa      	str	r2, [r7, #12]
 80054c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	701a      	strb	r2, [r3, #0]
 80054cc:	e006      	b.n	80054dc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054dc:	4b36      	ldr	r3, [pc, #216]	; (80055b8 <_SendPacket+0x1c4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054e2:	4b34      	ldr	r3, [pc, #208]	; (80055b4 <_SendPacket+0x1c0>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	623b      	str	r3, [r7, #32]
 80054f4:	e00b      	b.n	800550e <_SendPacket+0x11a>
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	1c59      	adds	r1, r3, #1
 80054fe:	6279      	str	r1, [r7, #36]	; 0x24
 8005500:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	09db      	lsrs	r3, r3, #7
 800550c:	623b      	str	r3, [r7, #32]
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	2b7f      	cmp	r3, #127	; 0x7f
 8005512:	d8f0      	bhi.n	80054f6 <_SendPacket+0x102>
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	627a      	str	r2, [r7, #36]	; 0x24
 800551a:	6a3a      	ldr	r2, [r7, #32]
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005524:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <_SendPacket+0x1c0>)
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	4618      	mov	r0, r3
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	461a      	mov	r2, r3
 8005532:	68f9      	ldr	r1, [r7, #12]
 8005534:	f7fa fe4c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005538:	4603      	mov	r3, r0
 800553a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005542:	4a1c      	ldr	r2, [pc, #112]	; (80055b4 <_SendPacket+0x1c0>)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	60d3      	str	r3, [r2, #12]
 8005548:	e00b      	b.n	8005562 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800554a:	4b1a      	ldr	r3, [pc, #104]	; (80055b4 <_SendPacket+0x1c0>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	3301      	adds	r3, #1
 8005550:	b2da      	uxtb	r2, r3
 8005552:	4b18      	ldr	r3, [pc, #96]	; (80055b4 <_SendPacket+0x1c0>)
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	e004      	b.n	8005562 <_SendPacket+0x16e>
    goto SendDone;
 8005558:	bf00      	nop
 800555a:	e002      	b.n	8005562 <_SendPacket+0x16e>
      goto SendDone;
 800555c:	bf00      	nop
 800555e:	e000      	b.n	8005562 <_SendPacket+0x16e>
      goto SendDone;
 8005560:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005562:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <_SendPacket+0x1c0>)
 8005564:	7e1b      	ldrb	r3, [r3, #24]
 8005566:	4619      	mov	r1, r3
 8005568:	4a14      	ldr	r2, [pc, #80]	; (80055bc <_SendPacket+0x1c8>)
 800556a:	460b      	mov	r3, r1
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	440b      	add	r3, r1
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	4413      	add	r3, r2
 8005574:	336c      	adds	r3, #108	; 0x6c
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <_SendPacket+0x1c0>)
 800557a:	7e1b      	ldrb	r3, [r3, #24]
 800557c:	4618      	mov	r0, r3
 800557e:	490f      	ldr	r1, [pc, #60]	; (80055bc <_SendPacket+0x1c8>)
 8005580:	4603      	mov	r3, r0
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	4403      	add	r3, r0
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	440b      	add	r3, r1
 800558a:	3370      	adds	r3, #112	; 0x70
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d00b      	beq.n	80055aa <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005592:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <_SendPacket+0x1c0>)
 8005594:	789b      	ldrb	r3, [r3, #2]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d107      	bne.n	80055aa <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800559a:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <_SendPacket+0x1c0>)
 800559c:	2201      	movs	r2, #1
 800559e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80055a0:	f7ff fe4a 	bl	8005238 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80055a4:	4b03      	ldr	r3, [pc, #12]	; (80055b4 <_SendPacket+0x1c0>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80055aa:	bf00      	nop
 80055ac:	3728      	adds	r7, #40	; 0x28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	200142bc 	.word	0x200142bc
 80055b8:	e0001004 	.word	0xe0001004
 80055bc:	2001445c 	.word	0x2001445c

080055c0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80055ce:	2300      	movs	r3, #0
 80055d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055d4:	4917      	ldr	r1, [pc, #92]	; (8005634 <SEGGER_SYSVIEW_Init+0x74>)
 80055d6:	4818      	ldr	r0, [pc, #96]	; (8005638 <SEGGER_SYSVIEW_Init+0x78>)
 80055d8:	f7ff fce0 	bl	8004f9c <SEGGER_RTT_AllocUpBuffer>
 80055dc:	4603      	mov	r3, r0
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	4b16      	ldr	r3, [pc, #88]	; (800563c <SEGGER_SYSVIEW_Init+0x7c>)
 80055e2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80055e4:	4b15      	ldr	r3, [pc, #84]	; (800563c <SEGGER_SYSVIEW_Init+0x7c>)
 80055e6:	785a      	ldrb	r2, [r3, #1]
 80055e8:	4b14      	ldr	r3, [pc, #80]	; (800563c <SEGGER_SYSVIEW_Init+0x7c>)
 80055ea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80055ec:	4b13      	ldr	r3, [pc, #76]	; (800563c <SEGGER_SYSVIEW_Init+0x7c>)
 80055ee:	7e1b      	ldrb	r3, [r3, #24]
 80055f0:	4618      	mov	r0, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2308      	movs	r3, #8
 80055f8:	4a11      	ldr	r2, [pc, #68]	; (8005640 <SEGGER_SYSVIEW_Init+0x80>)
 80055fa:	490f      	ldr	r1, [pc, #60]	; (8005638 <SEGGER_SYSVIEW_Init+0x78>)
 80055fc:	f7ff fd52 	bl	80050a4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005600:	4b0e      	ldr	r3, [pc, #56]	; (800563c <SEGGER_SYSVIEW_Init+0x7c>)
 8005602:	2200      	movs	r2, #0
 8005604:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005606:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <SEGGER_SYSVIEW_Init+0x84>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a0c      	ldr	r2, [pc, #48]	; (800563c <SEGGER_SYSVIEW_Init+0x7c>)
 800560c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800560e:	4a0b      	ldr	r2, [pc, #44]	; (800563c <SEGGER_SYSVIEW_Init+0x7c>)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005614:	4a09      	ldr	r2, [pc, #36]	; (800563c <SEGGER_SYSVIEW_Init+0x7c>)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800561a:	4a08      	ldr	r2, [pc, #32]	; (800563c <SEGGER_SYSVIEW_Init+0x7c>)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005620:	4a06      	ldr	r2, [pc, #24]	; (800563c <SEGGER_SYSVIEW_Init+0x7c>)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <SEGGER_SYSVIEW_Init+0x7c>)
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800562c:	bf00      	nop
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200132b4 	.word	0x200132b4
 8005638:	08007050 	.word	0x08007050
 800563c:	200142bc 	.word	0x200142bc
 8005640:	200142b4 	.word	0x200142b4
 8005644:	e0001004 	.word	0xe0001004

08005648 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005650:	4a04      	ldr	r2, [pc, #16]	; (8005664 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6113      	str	r3, [r2, #16]
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	200142bc 	.word	0x200142bc

08005668 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005670:	f3ef 8311 	mrs	r3, BASEPRI
 8005674:	f04f 0120 	mov.w	r1, #32
 8005678:	f381 8811 	msr	BASEPRI, r1
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	4808      	ldr	r0, [pc, #32]	; (80056a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005680:	f7ff fdcd 	bl	800521e <_PreparePacket>
 8005684:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	68b8      	ldr	r0, [r7, #8]
 800568c:	f7ff feb2 	bl	80053f4 <_SendPacket>
  RECORD_END();
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f383 8811 	msr	BASEPRI, r3
}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	200142ec 	.word	0x200142ec

080056a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056ae:	f3ef 8311 	mrs	r3, BASEPRI
 80056b2:	f04f 0120 	mov.w	r1, #32
 80056b6:	f381 8811 	msr	BASEPRI, r1
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	4816      	ldr	r0, [pc, #88]	; (8005718 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80056be:	f7ff fdae 	bl	800521e <_PreparePacket>
 80056c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	e00b      	b.n	80056ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	1c59      	adds	r1, r3, #1
 80056da:	61f9      	str	r1, [r7, #28]
 80056dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	09db      	lsrs	r3, r3, #7
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b7f      	cmp	r3, #127	; 0x7f
 80056ee:	d8f0      	bhi.n	80056d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	61fa      	str	r2, [r7, #28]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	6938      	ldr	r0, [r7, #16]
 8005706:	f7ff fe75 	bl	80053f4 <_SendPacket>
  RECORD_END();
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f383 8811 	msr	BASEPRI, r3
}
 8005710:	bf00      	nop
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	200142ec 	.word	0x200142ec

0800571c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b08c      	sub	sp, #48	; 0x30
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005728:	f3ef 8311 	mrs	r3, BASEPRI
 800572c:	f04f 0120 	mov.w	r1, #32
 8005730:	f381 8811 	msr	BASEPRI, r1
 8005734:	61fb      	str	r3, [r7, #28]
 8005736:	4825      	ldr	r0, [pc, #148]	; (80057cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005738:	f7ff fd71 	bl	800521e <_PreparePacket>
 800573c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28
 800574a:	e00b      	b.n	8005764 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	b2da      	uxtb	r2, r3
 8005750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005752:	1c59      	adds	r1, r3, #1
 8005754:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005756:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	09db      	lsrs	r3, r3, #7
 8005762:	62bb      	str	r3, [r7, #40]	; 0x28
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	2b7f      	cmp	r3, #127	; 0x7f
 8005768:	d8f0      	bhi.n	800574c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005778:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	623b      	str	r3, [r7, #32]
 8005782:	e00b      	b.n	800579c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	b2da      	uxtb	r2, r3
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	1c59      	adds	r1, r3, #1
 800578c:	6279      	str	r1, [r7, #36]	; 0x24
 800578e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	09db      	lsrs	r3, r3, #7
 800579a:	623b      	str	r3, [r7, #32]
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	2b7f      	cmp	r3, #127	; 0x7f
 80057a0:	d8f0      	bhi.n	8005784 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	627a      	str	r2, [r7, #36]	; 0x24
 80057a8:	6a3a      	ldr	r2, [r7, #32]
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	6979      	ldr	r1, [r7, #20]
 80057b6:	69b8      	ldr	r0, [r7, #24]
 80057b8:	f7ff fe1c 	bl	80053f4 <_SendPacket>
  RECORD_END();
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f383 8811 	msr	BASEPRI, r3
}
 80057c2:	bf00      	nop
 80057c4:	3730      	adds	r7, #48	; 0x30
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	200142ec 	.word	0x200142ec

080057d0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08e      	sub	sp, #56	; 0x38
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80057de:	f3ef 8311 	mrs	r3, BASEPRI
 80057e2:	f04f 0120 	mov.w	r1, #32
 80057e6:	f381 8811 	msr	BASEPRI, r1
 80057ea:	61fb      	str	r3, [r7, #28]
 80057ec:	4832      	ldr	r0, [pc, #200]	; (80058b8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80057ee:	f7ff fd16 	bl	800521e <_PreparePacket>
 80057f2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	637b      	str	r3, [r7, #52]	; 0x34
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005800:	e00b      	b.n	800581a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	b2da      	uxtb	r2, r3
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	1c59      	adds	r1, r3, #1
 800580a:	6379      	str	r1, [r7, #52]	; 0x34
 800580c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	09db      	lsrs	r3, r3, #7
 8005818:	633b      	str	r3, [r7, #48]	; 0x30
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	2b7f      	cmp	r3, #127	; 0x7f
 800581e:	d8f0      	bhi.n	8005802 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	637a      	str	r2, [r7, #52]	; 0x34
 8005826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
 8005838:	e00b      	b.n	8005852 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	b2da      	uxtb	r2, r3
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	1c59      	adds	r1, r3, #1
 8005842:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	09db      	lsrs	r3, r3, #7
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	2b7f      	cmp	r3, #127	; 0x7f
 8005856:	d8f0      	bhi.n	800583a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800585e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	623b      	str	r3, [r7, #32]
 8005870:	e00b      	b.n	800588a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	b2da      	uxtb	r2, r3
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	1c59      	adds	r1, r3, #1
 800587a:	6279      	str	r1, [r7, #36]	; 0x24
 800587c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	09db      	lsrs	r3, r3, #7
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	2b7f      	cmp	r3, #127	; 0x7f
 800588e:	d8f0      	bhi.n	8005872 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	627a      	str	r2, [r7, #36]	; 0x24
 8005896:	6a3a      	ldr	r2, [r7, #32]
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	6979      	ldr	r1, [r7, #20]
 80058a4:	69b8      	ldr	r0, [r7, #24]
 80058a6:	f7ff fda5 	bl	80053f4 <_SendPacket>
  RECORD_END();
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f383 8811 	msr	BASEPRI, r3
}
 80058b0:	bf00      	nop
 80058b2:	3738      	adds	r7, #56	; 0x38
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	200142ec 	.word	0x200142ec

080058bc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b090      	sub	sp, #64	; 0x40
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80058ca:	f3ef 8311 	mrs	r3, BASEPRI
 80058ce:	f04f 0120 	mov.w	r1, #32
 80058d2:	f381 8811 	msr	BASEPRI, r1
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	4840      	ldr	r0, [pc, #256]	; (80059dc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80058da:	f7ff fca0 	bl	800521e <_PreparePacket>
 80058de:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ec:	e00b      	b.n	8005906 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80058ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80058f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	09db      	lsrs	r3, r3, #7
 8005904:	63bb      	str	r3, [r7, #56]	; 0x38
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	2b7f      	cmp	r3, #127	; 0x7f
 800590a:	d8f0      	bhi.n	80058ee <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800590c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	637b      	str	r3, [r7, #52]	; 0x34
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	633b      	str	r3, [r7, #48]	; 0x30
 8005924:	e00b      	b.n	800593e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	b2da      	uxtb	r2, r3
 800592a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592c:	1c59      	adds	r1, r3, #1
 800592e:	6379      	str	r1, [r7, #52]	; 0x34
 8005930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	09db      	lsrs	r3, r3, #7
 800593c:	633b      	str	r3, [r7, #48]	; 0x30
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	2b7f      	cmp	r3, #127	; 0x7f
 8005942:	d8f0      	bhi.n	8005926 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	637a      	str	r2, [r7, #52]	; 0x34
 800594a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005952:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
 800595c:	e00b      	b.n	8005976 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	b2da      	uxtb	r2, r3
 8005962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005964:	1c59      	adds	r1, r3, #1
 8005966:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	09db      	lsrs	r3, r3, #7
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	2b7f      	cmp	r3, #127	; 0x7f
 800597a:	d8f0      	bhi.n	800595e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800597c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
 8005990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	e00b      	b.n	80059ae <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	b2da      	uxtb	r2, r3
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	1c59      	adds	r1, r3, #1
 800599e:	6279      	str	r1, [r7, #36]	; 0x24
 80059a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	09db      	lsrs	r3, r3, #7
 80059ac:	623b      	str	r3, [r7, #32]
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	2b7f      	cmp	r3, #127	; 0x7f
 80059b2:	d8f0      	bhi.n	8005996 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	627a      	str	r2, [r7, #36]	; 0x24
 80059ba:	6a3a      	ldr	r2, [r7, #32]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	6979      	ldr	r1, [r7, #20]
 80059c8:	69b8      	ldr	r0, [r7, #24]
 80059ca:	f7ff fd13 	bl	80053f4 <_SendPacket>
  RECORD_END();
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	f383 8811 	msr	BASEPRI, r3
}
 80059d4:	bf00      	nop
 80059d6:	3740      	adds	r7, #64	; 0x40
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	200142ec 	.word	0x200142ec

080059e0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08c      	sub	sp, #48	; 0x30
 80059e4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80059e6:	4b58      	ldr	r3, [pc, #352]	; (8005b48 <SEGGER_SYSVIEW_Start+0x168>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80059ec:	f3ef 8311 	mrs	r3, BASEPRI
 80059f0:	f04f 0120 	mov.w	r1, #32
 80059f4:	f381 8811 	msr	BASEPRI, r1
 80059f8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80059fa:	4b53      	ldr	r3, [pc, #332]	; (8005b48 <SEGGER_SYSVIEW_Start+0x168>)
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	220a      	movs	r2, #10
 8005a00:	4952      	ldr	r1, [pc, #328]	; (8005b4c <SEGGER_SYSVIEW_Start+0x16c>)
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fa fbe4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005a0e:	200a      	movs	r0, #10
 8005a10:	f7ff fe2a 	bl	8005668 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a14:	f3ef 8311 	mrs	r3, BASEPRI
 8005a18:	f04f 0120 	mov.w	r1, #32
 8005a1c:	f381 8811 	msr	BASEPRI, r1
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	484b      	ldr	r0, [pc, #300]	; (8005b50 <SEGGER_SYSVIEW_Start+0x170>)
 8005a24:	f7ff fbfb 	bl	800521e <_PreparePacket>
 8005a28:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a32:	4b45      	ldr	r3, [pc, #276]	; (8005b48 <SEGGER_SYSVIEW_Start+0x168>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a38:	e00b      	b.n	8005a52 <SEGGER_SYSVIEW_Start+0x72>
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	1c59      	adds	r1, r3, #1
 8005a42:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	09db      	lsrs	r3, r3, #7
 8005a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	2b7f      	cmp	r3, #127	; 0x7f
 8005a56:	d8f0      	bhi.n	8005a3a <SEGGER_SYSVIEW_Start+0x5a>
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6c:	4b36      	ldr	r3, [pc, #216]	; (8005b48 <SEGGER_SYSVIEW_Start+0x168>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	623b      	str	r3, [r7, #32]
 8005a72:	e00b      	b.n	8005a8c <SEGGER_SYSVIEW_Start+0xac>
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	1c59      	adds	r1, r3, #1
 8005a7c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	09db      	lsrs	r3, r3, #7
 8005a8a:	623b      	str	r3, [r7, #32]
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a90:	d8f0      	bhi.n	8005a74 <SEGGER_SYSVIEW_Start+0x94>
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	627a      	str	r2, [r7, #36]	; 0x24
 8005a98:	6a3a      	ldr	r2, [r7, #32]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	61fb      	str	r3, [r7, #28]
 8005aa6:	4b28      	ldr	r3, [pc, #160]	; (8005b48 <SEGGER_SYSVIEW_Start+0x168>)
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	61bb      	str	r3, [r7, #24]
 8005aac:	e00b      	b.n	8005ac6 <SEGGER_SYSVIEW_Start+0xe6>
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	1c59      	adds	r1, r3, #1
 8005ab6:	61f9      	str	r1, [r7, #28]
 8005ab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	701a      	strb	r2, [r3, #0]
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	09db      	lsrs	r3, r3, #7
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8005aca:	d8f0      	bhi.n	8005aae <SEGGER_SYSVIEW_Start+0xce>
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	61fa      	str	r2, [r7, #28]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	e00b      	b.n	8005afe <SEGGER_SYSVIEW_Start+0x11e>
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	1c59      	adds	r1, r3, #1
 8005aee:	6179      	str	r1, [r7, #20]
 8005af0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	09db      	lsrs	r3, r3, #7
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b7f      	cmp	r3, #127	; 0x7f
 8005b02:	d8f0      	bhi.n	8005ae6 <SEGGER_SYSVIEW_Start+0x106>
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	617a      	str	r2, [r7, #20]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005b14:	2218      	movs	r2, #24
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff fc6b 	bl	80053f4 <_SendPacket>
      RECORD_END();
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005b24:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <SEGGER_SYSVIEW_Start+0x168>)
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <SEGGER_SYSVIEW_Start+0x168>)
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005b32:	f000 f9eb 	bl	8005f0c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005b36:	f000 f9b1 	bl	8005e9c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005b3a:	f000 fc81 	bl	8006440 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005b3e:	bf00      	nop
 8005b40:	3730      	adds	r7, #48	; 0x30
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200142bc 	.word	0x200142bc
 8005b4c:	08007078 	.word	0x08007078
 8005b50:	200142ec 	.word	0x200142ec

08005b54 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b5e:	f04f 0120 	mov.w	r1, #32
 8005b62:	f381 8811 	msr	BASEPRI, r1
 8005b66:	607b      	str	r3, [r7, #4]
 8005b68:	480b      	ldr	r0, [pc, #44]	; (8005b98 <SEGGER_SYSVIEW_Stop+0x44>)
 8005b6a:	f7ff fb58 	bl	800521e <_PreparePacket>
 8005b6e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <SEGGER_SYSVIEW_Stop+0x48>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005b78:	220b      	movs	r2, #11
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6838      	ldr	r0, [r7, #0]
 8005b7e:	f7ff fc39 	bl	80053f4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005b82:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <SEGGER_SYSVIEW_Stop+0x48>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f383 8811 	msr	BASEPRI, r3
}
 8005b8e:	bf00      	nop
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	200142ec 	.word	0x200142ec
 8005b9c:	200142bc 	.word	0x200142bc

08005ba0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08c      	sub	sp, #48	; 0x30
 8005ba4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8005baa:	f04f 0120 	mov.w	r1, #32
 8005bae:	f381 8811 	msr	BASEPRI, r1
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	4845      	ldr	r0, [pc, #276]	; (8005ccc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005bb6:	f7ff fb32 	bl	800521e <_PreparePacket>
 8005bba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc4:	4b42      	ldr	r3, [pc, #264]	; (8005cd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bca:	e00b      	b.n	8005be4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	1c59      	adds	r1, r3, #1
 8005bd4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005bd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	09db      	lsrs	r3, r3, #7
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	2b7f      	cmp	r3, #127	; 0x7f
 8005be8:	d8f0      	bhi.n	8005bcc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfe:	4b34      	ldr	r3, [pc, #208]	; (8005cd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	623b      	str	r3, [r7, #32]
 8005c04:	e00b      	b.n	8005c1e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	1c59      	adds	r1, r3, #1
 8005c0e:	6279      	str	r1, [r7, #36]	; 0x24
 8005c10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	09db      	lsrs	r3, r3, #7
 8005c1c:	623b      	str	r3, [r7, #32]
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	2b7f      	cmp	r3, #127	; 0x7f
 8005c22:	d8f0      	bhi.n	8005c06 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	627a      	str	r2, [r7, #36]	; 0x24
 8005c2a:	6a3a      	ldr	r2, [r7, #32]
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	e00b      	b.n	8005c58 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	1c59      	adds	r1, r3, #1
 8005c48:	61f9      	str	r1, [r7, #28]
 8005c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	09db      	lsrs	r3, r3, #7
 8005c56:	61bb      	str	r3, [r7, #24]
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c5c:	d8f0      	bhi.n	8005c40 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	61fa      	str	r2, [r7, #28]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	e00b      	b.n	8005c90 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	1c59      	adds	r1, r3, #1
 8005c80:	6179      	str	r1, [r7, #20]
 8005c82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	09db      	lsrs	r3, r3, #7
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b7f      	cmp	r3, #127	; 0x7f
 8005c94:	d8f0      	bhi.n	8005c78 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	617a      	str	r2, [r7, #20]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ca6:	2218      	movs	r2, #24
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	68b8      	ldr	r0, [r7, #8]
 8005cac:	f7ff fba2 	bl	80053f4 <_SendPacket>
  RECORD_END();
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005cb6:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005cbe:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	4798      	blx	r3
  }
}
 8005cc4:	bf00      	nop
 8005cc6:	3730      	adds	r7, #48	; 0x30
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	200142ec 	.word	0x200142ec
 8005cd0:	200142bc 	.word	0x200142bc

08005cd4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b092      	sub	sp, #72	; 0x48
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ce0:	f04f 0120 	mov.w	r1, #32
 8005ce4:	f381 8811 	msr	BASEPRI, r1
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	486a      	ldr	r0, [pc, #424]	; (8005e94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005cec:	f7ff fa97 	bl	800521e <_PreparePacket>
 8005cf0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b66      	ldr	r3, [pc, #408]	; (8005e98 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	643b      	str	r3, [r7, #64]	; 0x40
 8005d06:	e00b      	b.n	8005d20 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d0e:	1c59      	adds	r1, r3, #1
 8005d10:	6479      	str	r1, [r7, #68]	; 0x44
 8005d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1c:	09db      	lsrs	r3, r3, #7
 8005d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d22:	2b7f      	cmp	r3, #127	; 0x7f
 8005d24:	d8f0      	bhi.n	8005d08 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d40:	e00b      	b.n	8005d5a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d48:	1c59      	adds	r1, r3, #1
 8005d4a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005d4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	09db      	lsrs	r3, r3, #7
 8005d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d5e:	d8f0      	bhi.n	8005d42 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	4619      	mov	r1, r3
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f7ff fa03 	bl	8005184 <_EncodeStr>
 8005d7e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005d80:	2209      	movs	r2, #9
 8005d82:	68f9      	ldr	r1, [r7, #12]
 8005d84:	6938      	ldr	r0, [r7, #16]
 8005d86:	f7ff fb35 	bl	80053f4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b40      	ldr	r3, [pc, #256]	; (8005e98 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d9e:	e00b      	b.n	8005db8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da6:	1c59      	adds	r1, r3, #1
 8005da8:	6379      	str	r1, [r7, #52]	; 0x34
 8005daa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	09db      	lsrs	r3, r3, #7
 8005db6:	633b      	str	r3, [r7, #48]	; 0x30
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	2b7f      	cmp	r3, #127	; 0x7f
 8005dbc:	d8f0      	bhi.n	8005da0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	637a      	str	r2, [r7, #52]	; 0x34
 8005dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd8:	e00b      	b.n	8005df2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	1c59      	adds	r1, r3, #1
 8005de2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005de4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	09db      	lsrs	r3, r3, #7
 8005df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	2b7f      	cmp	r3, #127	; 0x7f
 8005df6:	d8f0      	bhi.n	8005dda <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	623b      	str	r3, [r7, #32]
 8005e12:	e00b      	b.n	8005e2c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	1c59      	adds	r1, r3, #1
 8005e1c:	6279      	str	r1, [r7, #36]	; 0x24
 8005e1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	09db      	lsrs	r3, r3, #7
 8005e2a:	623b      	str	r3, [r7, #32]
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e30:	d8f0      	bhi.n	8005e14 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	627a      	str	r2, [r7, #36]	; 0x24
 8005e38:	6a3a      	ldr	r2, [r7, #32]
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e00b      	b.n	8005e64 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	1c59      	adds	r1, r3, #1
 8005e54:	61f9      	str	r1, [r7, #28]
 8005e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	09db      	lsrs	r3, r3, #7
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2b7f      	cmp	r3, #127	; 0x7f
 8005e68:	d8f0      	bhi.n	8005e4c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	61fa      	str	r2, [r7, #28]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005e7a:	2215      	movs	r2, #21
 8005e7c:	68f9      	ldr	r1, [r7, #12]
 8005e7e:	6938      	ldr	r0, [r7, #16]
 8005e80:	f7ff fab8 	bl	80053f4 <_SendPacket>
  RECORD_END();
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f383 8811 	msr	BASEPRI, r3
}
 8005e8a:	bf00      	nop
 8005e8c:	3748      	adds	r7, #72	; 0x48
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	200142ec 	.word	0x200142ec
 8005e98:	200142bc 	.word	0x200142bc

08005e9c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d008      	beq.n	8005eba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005ea8:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005eb2:	4b03      	ldr	r3, [pc, #12]	; (8005ec0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	4798      	blx	r3
  }
}
 8005eba:	bf00      	nop
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	200142bc 	.word	0x200142bc

08005ec4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed0:	f04f 0120 	mov.w	r1, #32
 8005ed4:	f381 8811 	msr	BASEPRI, r1
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	480b      	ldr	r0, [pc, #44]	; (8005f08 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005edc:	f7ff f99f 	bl	800521e <_PreparePacket>
 8005ee0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ee2:	2280      	movs	r2, #128	; 0x80
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	6938      	ldr	r0, [r7, #16]
 8005ee8:	f7ff f94c 	bl	8005184 <_EncodeStr>
 8005eec:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005eee:	220e      	movs	r2, #14
 8005ef0:	68f9      	ldr	r1, [r7, #12]
 8005ef2:	6938      	ldr	r0, [r7, #16]
 8005ef4:	f7ff fa7e 	bl	80053f4 <_SendPacket>
  RECORD_END();
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f383 8811 	msr	BASEPRI, r3
}
 8005efe:	bf00      	nop
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200142ec 	.word	0x200142ec

08005f0c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005f0c:	b590      	push	{r4, r7, lr}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005f12:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d019      	beq.n	8005f4e <SEGGER_SYSVIEW_RecordSystime+0x42>
 8005f1a:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d014      	beq.n	8005f4e <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4798      	blx	r3
 8005f2c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005f30:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005f32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f36:	f04f 0300 	mov.w	r3, #0
 8005f3a:	f04f 0400 	mov.w	r4, #0
 8005f3e:	0013      	movs	r3, r2
 8005f40:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005f42:	461a      	mov	r2, r3
 8005f44:	4601      	mov	r1, r0
 8005f46:	200d      	movs	r0, #13
 8005f48:	f7ff fbe8 	bl	800571c <SEGGER_SYSVIEW_RecordU32x2>
 8005f4c:	e005      	b.n	8005f5a <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4619      	mov	r1, r3
 8005f54:	200c      	movs	r0, #12
 8005f56:	f7ff fba5 	bl	80056a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd90      	pop	{r4, r7, pc}
 8005f62:	bf00      	nop
 8005f64:	200142bc 	.word	0x200142bc
 8005f68:	e0001004 	.word	0xe0001004

08005f6c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f72:	f3ef 8311 	mrs	r3, BASEPRI
 8005f76:	f04f 0120 	mov.w	r1, #32
 8005f7a:	f381 8811 	msr	BASEPRI, r1
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	4819      	ldr	r0, [pc, #100]	; (8005fe8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005f82:	f7ff f94c 	bl	800521e <_PreparePacket>
 8005f86:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005f8c:	4b17      	ldr	r3, [pc, #92]	; (8005fec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f94:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	e00b      	b.n	8005fb8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	6179      	str	r1, [r7, #20]
 8005faa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	09db      	lsrs	r3, r3, #7
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b7f      	cmp	r3, #127	; 0x7f
 8005fbc:	d8f0      	bhi.n	8005fa0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	617a      	str	r2, [r7, #20]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005fce:	2202      	movs	r2, #2
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	68b8      	ldr	r0, [r7, #8]
 8005fd4:	f7ff fa0e 	bl	80053f4 <_SendPacket>
  RECORD_END();
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f383 8811 	msr	BASEPRI, r3
}
 8005fde:	bf00      	nop
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	200142ec 	.word	0x200142ec
 8005fec:	e000ed04 	.word	0xe000ed04

08005ff0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8005ffa:	f04f 0120 	mov.w	r1, #32
 8005ffe:	f381 8811 	msr	BASEPRI, r1
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	4807      	ldr	r0, [pc, #28]	; (8006024 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006006:	f7ff f90a 	bl	800521e <_PreparePacket>
 800600a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800600c:	2203      	movs	r2, #3
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6838      	ldr	r0, [r7, #0]
 8006012:	f7ff f9ef 	bl	80053f4 <_SendPacket>
  RECORD_END();
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f383 8811 	msr	BASEPRI, r3
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	200142ec 	.word	0x200142ec

08006028 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800602e:	f3ef 8311 	mrs	r3, BASEPRI
 8006032:	f04f 0120 	mov.w	r1, #32
 8006036:	f381 8811 	msr	BASEPRI, r1
 800603a:	607b      	str	r3, [r7, #4]
 800603c:	4807      	ldr	r0, [pc, #28]	; (800605c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800603e:	f7ff f8ee 	bl	800521e <_PreparePacket>
 8006042:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006044:	2212      	movs	r2, #18
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6838      	ldr	r0, [r7, #0]
 800604a:	f7ff f9d3 	bl	80053f4 <_SendPacket>
  RECORD_END();
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f383 8811 	msr	BASEPRI, r3
}
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	200142ec 	.word	0x200142ec

08006060 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006066:	f3ef 8311 	mrs	r3, BASEPRI
 800606a:	f04f 0120 	mov.w	r1, #32
 800606e:	f381 8811 	msr	BASEPRI, r1
 8006072:	607b      	str	r3, [r7, #4]
 8006074:	4807      	ldr	r0, [pc, #28]	; (8006094 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006076:	f7ff f8d2 	bl	800521e <_PreparePacket>
 800607a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800607c:	2211      	movs	r2, #17
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6838      	ldr	r0, [r7, #0]
 8006082:	f7ff f9b7 	bl	80053f4 <_SendPacket>
  RECORD_END();
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f383 8811 	msr	BASEPRI, r3
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	200142ec 	.word	0x200142ec

08006098 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060a0:	f3ef 8311 	mrs	r3, BASEPRI
 80060a4:	f04f 0120 	mov.w	r1, #32
 80060a8:	f381 8811 	msr	BASEPRI, r1
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	4819      	ldr	r0, [pc, #100]	; (8006114 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80060b0:	f7ff f8b5 	bl	800521e <_PreparePacket>
 80060b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060ba:	4b17      	ldr	r3, [pc, #92]	; (8006118 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	e00b      	b.n	80060e6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	1c59      	adds	r1, r3, #1
 80060d6:	61f9      	str	r1, [r7, #28]
 80060d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	09db      	lsrs	r3, r3, #7
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b7f      	cmp	r3, #127	; 0x7f
 80060ea:	d8f0      	bhi.n	80060ce <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	61fa      	str	r2, [r7, #28]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80060fc:	2208      	movs	r2, #8
 80060fe:	68f9      	ldr	r1, [r7, #12]
 8006100:	6938      	ldr	r0, [r7, #16]
 8006102:	f7ff f977 	bl	80053f4 <_SendPacket>
  RECORD_END();
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f383 8811 	msr	BASEPRI, r3
}
 800610c:	bf00      	nop
 800610e:	3720      	adds	r7, #32
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	200142ec 	.word	0x200142ec
 8006118:	200142bc 	.word	0x200142bc

0800611c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006124:	f3ef 8311 	mrs	r3, BASEPRI
 8006128:	f04f 0120 	mov.w	r1, #32
 800612c:	f381 8811 	msr	BASEPRI, r1
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	4819      	ldr	r0, [pc, #100]	; (8006198 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006134:	f7ff f873 	bl	800521e <_PreparePacket>
 8006138:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800613e:	4b17      	ldr	r3, [pc, #92]	; (800619c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	61fb      	str	r3, [r7, #28]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	61bb      	str	r3, [r7, #24]
 8006150:	e00b      	b.n	800616a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	b2da      	uxtb	r2, r3
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	1c59      	adds	r1, r3, #1
 800615a:	61f9      	str	r1, [r7, #28]
 800615c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	09db      	lsrs	r3, r3, #7
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	2b7f      	cmp	r3, #127	; 0x7f
 800616e:	d8f0      	bhi.n	8006152 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	61fa      	str	r2, [r7, #28]
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006180:	2204      	movs	r2, #4
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	6938      	ldr	r0, [r7, #16]
 8006186:	f7ff f935 	bl	80053f4 <_SendPacket>
  RECORD_END();
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f383 8811 	msr	BASEPRI, r3
}
 8006190:	bf00      	nop
 8006192:	3720      	adds	r7, #32
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	200142ec 	.word	0x200142ec
 800619c:	200142bc 	.word	0x200142bc

080061a0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061a8:	f3ef 8311 	mrs	r3, BASEPRI
 80061ac:	f04f 0120 	mov.w	r1, #32
 80061b0:	f381 8811 	msr	BASEPRI, r1
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	4819      	ldr	r0, [pc, #100]	; (800621c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80061b8:	f7ff f831 	bl	800521e <_PreparePacket>
 80061bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061c2:	4b17      	ldr	r3, [pc, #92]	; (8006220 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	61bb      	str	r3, [r7, #24]
 80061d4:	e00b      	b.n	80061ee <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	1c59      	adds	r1, r3, #1
 80061de:	61f9      	str	r1, [r7, #28]
 80061e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	09db      	lsrs	r3, r3, #7
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2b7f      	cmp	r3, #127	; 0x7f
 80061f2:	d8f0      	bhi.n	80061d6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	61fa      	str	r2, [r7, #28]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006204:	2206      	movs	r2, #6
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	6938      	ldr	r0, [r7, #16]
 800620a:	f7ff f8f3 	bl	80053f4 <_SendPacket>
  RECORD_END();
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f383 8811 	msr	BASEPRI, r3
}
 8006214:	bf00      	nop
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	200142ec 	.word	0x200142ec
 8006220:	200142bc 	.word	0x200142bc

08006224 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b08a      	sub	sp, #40	; 0x28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800622e:	f3ef 8311 	mrs	r3, BASEPRI
 8006232:	f04f 0120 	mov.w	r1, #32
 8006236:	f381 8811 	msr	BASEPRI, r1
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	4827      	ldr	r0, [pc, #156]	; (80062dc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800623e:	f7fe ffee 	bl	800521e <_PreparePacket>
 8006242:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006248:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	623b      	str	r3, [r7, #32]
 800625a:	e00b      	b.n	8006274 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	b2da      	uxtb	r2, r3
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	1c59      	adds	r1, r3, #1
 8006264:	6279      	str	r1, [r7, #36]	; 0x24
 8006266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	09db      	lsrs	r3, r3, #7
 8006272:	623b      	str	r3, [r7, #32]
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	2b7f      	cmp	r3, #127	; 0x7f
 8006278:	d8f0      	bhi.n	800625c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	627a      	str	r2, [r7, #36]	; 0x24
 8006280:	6a3a      	ldr	r2, [r7, #32]
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	61fb      	str	r3, [r7, #28]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	e00b      	b.n	80062ac <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	1c59      	adds	r1, r3, #1
 800629c:	61f9      	str	r1, [r7, #28]
 800629e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	09db      	lsrs	r3, r3, #7
 80062aa:	61bb      	str	r3, [r7, #24]
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2b7f      	cmp	r3, #127	; 0x7f
 80062b0:	d8f0      	bhi.n	8006294 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	61fa      	str	r2, [r7, #28]
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80062c2:	2207      	movs	r2, #7
 80062c4:	68f9      	ldr	r1, [r7, #12]
 80062c6:	6938      	ldr	r0, [r7, #16]
 80062c8:	f7ff f894 	bl	80053f4 <_SendPacket>
  RECORD_END();
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f383 8811 	msr	BASEPRI, r3
}
 80062d2:	bf00      	nop
 80062d4:	3728      	adds	r7, #40	; 0x28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	200142ec 	.word	0x200142ec
 80062e0:	200142bc 	.word	0x200142bc

080062e4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80062ec:	4b04      	ldr	r3, [pc, #16]	; (8006300 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	1ad3      	subs	r3, r2, r3
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	200142bc 	.word	0x200142bc

08006304 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b08c      	sub	sp, #48	; 0x30
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800630e:	4b3b      	ldr	r3, [pc, #236]	; (80063fc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d06d      	beq.n	80063f2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006316:	4b39      	ldr	r3, [pc, #228]	; (80063fc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800631c:	2300      	movs	r3, #0
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006320:	e008      	b.n	8006334 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	3301      	adds	r3, #1
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28
 8006334:	79fb      	ldrb	r3, [r7, #7]
 8006336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006338:	429a      	cmp	r2, r3
 800633a:	d3f2      	bcc.n	8006322 <SEGGER_SYSVIEW_SendModule+0x1e>
 800633c:	e000      	b.n	8006340 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800633e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d055      	beq.n	80063f2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006346:	f3ef 8311 	mrs	r3, BASEPRI
 800634a:	f04f 0120 	mov.w	r1, #32
 800634e:	f381 8811 	msr	BASEPRI, r1
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	482a      	ldr	r0, [pc, #168]	; (8006400 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006356:	f7fe ff62 	bl	800521e <_PreparePacket>
 800635a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	623b      	str	r3, [r7, #32]
 8006368:	e00b      	b.n	8006382 <SEGGER_SYSVIEW_SendModule+0x7e>
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	b2da      	uxtb	r2, r3
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	1c59      	adds	r1, r3, #1
 8006372:	6279      	str	r1, [r7, #36]	; 0x24
 8006374:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	09db      	lsrs	r3, r3, #7
 8006380:	623b      	str	r3, [r7, #32]
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	2b7f      	cmp	r3, #127	; 0x7f
 8006386:	d8f0      	bhi.n	800636a <SEGGER_SYSVIEW_SendModule+0x66>
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	627a      	str	r2, [r7, #36]	; 0x24
 800638e:	6a3a      	ldr	r2, [r7, #32]
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	e00b      	b.n	80063bc <SEGGER_SYSVIEW_SendModule+0xb8>
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	1c59      	adds	r1, r3, #1
 80063ac:	61f9      	str	r1, [r7, #28]
 80063ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	09db      	lsrs	r3, r3, #7
 80063ba:	61bb      	str	r3, [r7, #24]
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b7f      	cmp	r3, #127	; 0x7f
 80063c0:	d8f0      	bhi.n	80063a4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	61fa      	str	r2, [r7, #28]
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2280      	movs	r2, #128	; 0x80
 80063d8:	4619      	mov	r1, r3
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7fe fed2 	bl	8005184 <_EncodeStr>
 80063e0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80063e2:	2216      	movs	r2, #22
 80063e4:	68f9      	ldr	r1, [r7, #12]
 80063e6:	6938      	ldr	r0, [r7, #16]
 80063e8:	f7ff f804 	bl	80053f4 <_SendPacket>
      RECORD_END();
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80063f2:	bf00      	nop
 80063f4:	3730      	adds	r7, #48	; 0x30
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	200142e4 	.word	0x200142e4
 8006400:	200142ec 	.word	0x200142ec

08006404 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800640a:	4b0c      	ldr	r3, [pc, #48]	; (800643c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00f      	beq.n	8006432 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006412:	4b0a      	ldr	r3, [pc, #40]	; (800643c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f2      	bne.n	8006418 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	200142e4 	.word	0x200142e4

08006440 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006446:	f3ef 8311 	mrs	r3, BASEPRI
 800644a:	f04f 0120 	mov.w	r1, #32
 800644e:	f381 8811 	msr	BASEPRI, r1
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	4817      	ldr	r0, [pc, #92]	; (80064b4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006456:	f7fe fee2 	bl	800521e <_PreparePacket>
 800645a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	4b14      	ldr	r3, [pc, #80]	; (80064b8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	e00b      	b.n	8006484 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	b2da      	uxtb	r2, r3
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	1c59      	adds	r1, r3, #1
 8006474:	6179      	str	r1, [r7, #20]
 8006476:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	09db      	lsrs	r3, r3, #7
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	2b7f      	cmp	r3, #127	; 0x7f
 8006488:	d8f0      	bhi.n	800646c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	617a      	str	r2, [r7, #20]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800649a:	221b      	movs	r2, #27
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	68b8      	ldr	r0, [r7, #8]
 80064a0:	f7fe ffa8 	bl	80053f4 <_SendPacket>
  RECORD_END();
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f383 8811 	msr	BASEPRI, r3
}
 80064aa:	bf00      	nop
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200142ec 	.word	0x200142ec
 80064b8:	200142e8 	.word	0x200142e8

080064bc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064c4:	f3ef 8311 	mrs	r3, BASEPRI
 80064c8:	f04f 0120 	mov.w	r1, #32
 80064cc:	f381 8811 	msr	BASEPRI, r1
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	4827      	ldr	r0, [pc, #156]	; (8006570 <SEGGER_SYSVIEW_Warn+0xb4>)
 80064d4:	f7fe fea3 	bl	800521e <_PreparePacket>
 80064d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064da:	2280      	movs	r2, #128	; 0x80
 80064dc:	6879      	ldr	r1, [r7, #4]
 80064de:	6938      	ldr	r0, [r7, #16]
 80064e0:	f7fe fe50 	bl	8005184 <_EncodeStr>
 80064e4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ea:	2301      	movs	r3, #1
 80064ec:	623b      	str	r3, [r7, #32]
 80064ee:	e00b      	b.n	8006508 <SEGGER_SYSVIEW_Warn+0x4c>
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	1c59      	adds	r1, r3, #1
 80064f8:	6279      	str	r1, [r7, #36]	; 0x24
 80064fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	09db      	lsrs	r3, r3, #7
 8006506:	623b      	str	r3, [r7, #32]
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	2b7f      	cmp	r3, #127	; 0x7f
 800650c:	d8f0      	bhi.n	80064f0 <SEGGER_SYSVIEW_Warn+0x34>
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	627a      	str	r2, [r7, #36]	; 0x24
 8006514:	6a3a      	ldr	r2, [r7, #32]
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	2300      	movs	r3, #0
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	e00b      	b.n	8006540 <SEGGER_SYSVIEW_Warn+0x84>
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	b2da      	uxtb	r2, r3
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	1c59      	adds	r1, r3, #1
 8006530:	61f9      	str	r1, [r7, #28]
 8006532:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	09db      	lsrs	r3, r3, #7
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	2b7f      	cmp	r3, #127	; 0x7f
 8006544:	d8f0      	bhi.n	8006528 <SEGGER_SYSVIEW_Warn+0x6c>
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	61fa      	str	r2, [r7, #28]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006556:	221a      	movs	r2, #26
 8006558:	68f9      	ldr	r1, [r7, #12]
 800655a:	6938      	ldr	r0, [r7, #16]
 800655c:	f7fe ff4a 	bl	80053f4 <_SendPacket>
  RECORD_END();
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f383 8811 	msr	BASEPRI, r3
}
 8006566:	bf00      	nop
 8006568:	3728      	adds	r7, #40	; 0x28
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	200142ec 	.word	0x200142ec

08006574 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	2000      	movs	r0, #0
 8006588:	f7fe fce2 	bl	8004f50 <SEGGER_RTT_Write>
  return len;
 800658c:	683b      	ldr	r3, [r7, #0]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <__errno>:
 8006598:	4b01      	ldr	r3, [pc, #4]	; (80065a0 <__errno+0x8>)
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000014 	.word	0x20000014

080065a4 <__libc_init_array>:
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	4e0d      	ldr	r6, [pc, #52]	; (80065dc <__libc_init_array+0x38>)
 80065a8:	4c0d      	ldr	r4, [pc, #52]	; (80065e0 <__libc_init_array+0x3c>)
 80065aa:	1ba4      	subs	r4, r4, r6
 80065ac:	10a4      	asrs	r4, r4, #2
 80065ae:	2500      	movs	r5, #0
 80065b0:	42a5      	cmp	r5, r4
 80065b2:	d109      	bne.n	80065c8 <__libc_init_array+0x24>
 80065b4:	4e0b      	ldr	r6, [pc, #44]	; (80065e4 <__libc_init_array+0x40>)
 80065b6:	4c0c      	ldr	r4, [pc, #48]	; (80065e8 <__libc_init_array+0x44>)
 80065b8:	f000 fc90 	bl	8006edc <_init>
 80065bc:	1ba4      	subs	r4, r4, r6
 80065be:	10a4      	asrs	r4, r4, #2
 80065c0:	2500      	movs	r5, #0
 80065c2:	42a5      	cmp	r5, r4
 80065c4:	d105      	bne.n	80065d2 <__libc_init_array+0x2e>
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065cc:	4798      	blx	r3
 80065ce:	3501      	adds	r5, #1
 80065d0:	e7ee      	b.n	80065b0 <__libc_init_array+0xc>
 80065d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065d6:	4798      	blx	r3
 80065d8:	3501      	adds	r5, #1
 80065da:	e7f2      	b.n	80065c2 <__libc_init_array+0x1e>
 80065dc:	080070f0 	.word	0x080070f0
 80065e0:	080070f0 	.word	0x080070f0
 80065e4:	080070f0 	.word	0x080070f0
 80065e8:	080070f4 	.word	0x080070f4

080065ec <memcmp>:
 80065ec:	b530      	push	{r4, r5, lr}
 80065ee:	2400      	movs	r4, #0
 80065f0:	42a2      	cmp	r2, r4
 80065f2:	d101      	bne.n	80065f8 <memcmp+0xc>
 80065f4:	2000      	movs	r0, #0
 80065f6:	e007      	b.n	8006608 <memcmp+0x1c>
 80065f8:	5d03      	ldrb	r3, [r0, r4]
 80065fa:	3401      	adds	r4, #1
 80065fc:	190d      	adds	r5, r1, r4
 80065fe:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006602:	42ab      	cmp	r3, r5
 8006604:	d0f4      	beq.n	80065f0 <memcmp+0x4>
 8006606:	1b58      	subs	r0, r3, r5
 8006608:	bd30      	pop	{r4, r5, pc}

0800660a <memcpy>:
 800660a:	b510      	push	{r4, lr}
 800660c:	1e43      	subs	r3, r0, #1
 800660e:	440a      	add	r2, r1
 8006610:	4291      	cmp	r1, r2
 8006612:	d100      	bne.n	8006616 <memcpy+0xc>
 8006614:	bd10      	pop	{r4, pc}
 8006616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800661a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800661e:	e7f7      	b.n	8006610 <memcpy+0x6>

08006620 <memset>:
 8006620:	4402      	add	r2, r0
 8006622:	4603      	mov	r3, r0
 8006624:	4293      	cmp	r3, r2
 8006626:	d100      	bne.n	800662a <memset+0xa>
 8006628:	4770      	bx	lr
 800662a:	f803 1b01 	strb.w	r1, [r3], #1
 800662e:	e7f9      	b.n	8006624 <memset+0x4>

08006630 <_puts_r>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	460e      	mov	r6, r1
 8006634:	4605      	mov	r5, r0
 8006636:	b118      	cbz	r0, 8006640 <_puts_r+0x10>
 8006638:	6983      	ldr	r3, [r0, #24]
 800663a:	b90b      	cbnz	r3, 8006640 <_puts_r+0x10>
 800663c:	f000 fa0c 	bl	8006a58 <__sinit>
 8006640:	69ab      	ldr	r3, [r5, #24]
 8006642:	68ac      	ldr	r4, [r5, #8]
 8006644:	b913      	cbnz	r3, 800664c <_puts_r+0x1c>
 8006646:	4628      	mov	r0, r5
 8006648:	f000 fa06 	bl	8006a58 <__sinit>
 800664c:	4b23      	ldr	r3, [pc, #140]	; (80066dc <_puts_r+0xac>)
 800664e:	429c      	cmp	r4, r3
 8006650:	d117      	bne.n	8006682 <_puts_r+0x52>
 8006652:	686c      	ldr	r4, [r5, #4]
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	071b      	lsls	r3, r3, #28
 8006658:	d51d      	bpl.n	8006696 <_puts_r+0x66>
 800665a:	6923      	ldr	r3, [r4, #16]
 800665c:	b1db      	cbz	r3, 8006696 <_puts_r+0x66>
 800665e:	3e01      	subs	r6, #1
 8006660:	68a3      	ldr	r3, [r4, #8]
 8006662:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006666:	3b01      	subs	r3, #1
 8006668:	60a3      	str	r3, [r4, #8]
 800666a:	b9e9      	cbnz	r1, 80066a8 <_puts_r+0x78>
 800666c:	2b00      	cmp	r3, #0
 800666e:	da2e      	bge.n	80066ce <_puts_r+0x9e>
 8006670:	4622      	mov	r2, r4
 8006672:	210a      	movs	r1, #10
 8006674:	4628      	mov	r0, r5
 8006676:	f000 f83f 	bl	80066f8 <__swbuf_r>
 800667a:	3001      	adds	r0, #1
 800667c:	d011      	beq.n	80066a2 <_puts_r+0x72>
 800667e:	200a      	movs	r0, #10
 8006680:	e011      	b.n	80066a6 <_puts_r+0x76>
 8006682:	4b17      	ldr	r3, [pc, #92]	; (80066e0 <_puts_r+0xb0>)
 8006684:	429c      	cmp	r4, r3
 8006686:	d101      	bne.n	800668c <_puts_r+0x5c>
 8006688:	68ac      	ldr	r4, [r5, #8]
 800668a:	e7e3      	b.n	8006654 <_puts_r+0x24>
 800668c:	4b15      	ldr	r3, [pc, #84]	; (80066e4 <_puts_r+0xb4>)
 800668e:	429c      	cmp	r4, r3
 8006690:	bf08      	it	eq
 8006692:	68ec      	ldreq	r4, [r5, #12]
 8006694:	e7de      	b.n	8006654 <_puts_r+0x24>
 8006696:	4621      	mov	r1, r4
 8006698:	4628      	mov	r0, r5
 800669a:	f000 f87f 	bl	800679c <__swsetup_r>
 800669e:	2800      	cmp	r0, #0
 80066a0:	d0dd      	beq.n	800665e <_puts_r+0x2e>
 80066a2:	f04f 30ff 	mov.w	r0, #4294967295
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	da04      	bge.n	80066b6 <_puts_r+0x86>
 80066ac:	69a2      	ldr	r2, [r4, #24]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	dc06      	bgt.n	80066c0 <_puts_r+0x90>
 80066b2:	290a      	cmp	r1, #10
 80066b4:	d004      	beq.n	80066c0 <_puts_r+0x90>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	6022      	str	r2, [r4, #0]
 80066bc:	7019      	strb	r1, [r3, #0]
 80066be:	e7cf      	b.n	8006660 <_puts_r+0x30>
 80066c0:	4622      	mov	r2, r4
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 f818 	bl	80066f8 <__swbuf_r>
 80066c8:	3001      	adds	r0, #1
 80066ca:	d1c9      	bne.n	8006660 <_puts_r+0x30>
 80066cc:	e7e9      	b.n	80066a2 <_puts_r+0x72>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	200a      	movs	r0, #10
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	6022      	str	r2, [r4, #0]
 80066d6:	7018      	strb	r0, [r3, #0]
 80066d8:	e7e5      	b.n	80066a6 <_puts_r+0x76>
 80066da:	bf00      	nop
 80066dc:	080070a8 	.word	0x080070a8
 80066e0:	080070c8 	.word	0x080070c8
 80066e4:	08007088 	.word	0x08007088

080066e8 <puts>:
 80066e8:	4b02      	ldr	r3, [pc, #8]	; (80066f4 <puts+0xc>)
 80066ea:	4601      	mov	r1, r0
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	f7ff bf9f 	b.w	8006630 <_puts_r>
 80066f2:	bf00      	nop
 80066f4:	20000014 	.word	0x20000014

080066f8 <__swbuf_r>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	460e      	mov	r6, r1
 80066fc:	4614      	mov	r4, r2
 80066fe:	4605      	mov	r5, r0
 8006700:	b118      	cbz	r0, 800670a <__swbuf_r+0x12>
 8006702:	6983      	ldr	r3, [r0, #24]
 8006704:	b90b      	cbnz	r3, 800670a <__swbuf_r+0x12>
 8006706:	f000 f9a7 	bl	8006a58 <__sinit>
 800670a:	4b21      	ldr	r3, [pc, #132]	; (8006790 <__swbuf_r+0x98>)
 800670c:	429c      	cmp	r4, r3
 800670e:	d12a      	bne.n	8006766 <__swbuf_r+0x6e>
 8006710:	686c      	ldr	r4, [r5, #4]
 8006712:	69a3      	ldr	r3, [r4, #24]
 8006714:	60a3      	str	r3, [r4, #8]
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	071a      	lsls	r2, r3, #28
 800671a:	d52e      	bpl.n	800677a <__swbuf_r+0x82>
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	b363      	cbz	r3, 800677a <__swbuf_r+0x82>
 8006720:	6923      	ldr	r3, [r4, #16]
 8006722:	6820      	ldr	r0, [r4, #0]
 8006724:	1ac0      	subs	r0, r0, r3
 8006726:	6963      	ldr	r3, [r4, #20]
 8006728:	b2f6      	uxtb	r6, r6
 800672a:	4283      	cmp	r3, r0
 800672c:	4637      	mov	r7, r6
 800672e:	dc04      	bgt.n	800673a <__swbuf_r+0x42>
 8006730:	4621      	mov	r1, r4
 8006732:	4628      	mov	r0, r5
 8006734:	f000 f926 	bl	8006984 <_fflush_r>
 8006738:	bb28      	cbnz	r0, 8006786 <__swbuf_r+0x8e>
 800673a:	68a3      	ldr	r3, [r4, #8]
 800673c:	3b01      	subs	r3, #1
 800673e:	60a3      	str	r3, [r4, #8]
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	6022      	str	r2, [r4, #0]
 8006746:	701e      	strb	r6, [r3, #0]
 8006748:	6963      	ldr	r3, [r4, #20]
 800674a:	3001      	adds	r0, #1
 800674c:	4283      	cmp	r3, r0
 800674e:	d004      	beq.n	800675a <__swbuf_r+0x62>
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	07db      	lsls	r3, r3, #31
 8006754:	d519      	bpl.n	800678a <__swbuf_r+0x92>
 8006756:	2e0a      	cmp	r6, #10
 8006758:	d117      	bne.n	800678a <__swbuf_r+0x92>
 800675a:	4621      	mov	r1, r4
 800675c:	4628      	mov	r0, r5
 800675e:	f000 f911 	bl	8006984 <_fflush_r>
 8006762:	b190      	cbz	r0, 800678a <__swbuf_r+0x92>
 8006764:	e00f      	b.n	8006786 <__swbuf_r+0x8e>
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <__swbuf_r+0x9c>)
 8006768:	429c      	cmp	r4, r3
 800676a:	d101      	bne.n	8006770 <__swbuf_r+0x78>
 800676c:	68ac      	ldr	r4, [r5, #8]
 800676e:	e7d0      	b.n	8006712 <__swbuf_r+0x1a>
 8006770:	4b09      	ldr	r3, [pc, #36]	; (8006798 <__swbuf_r+0xa0>)
 8006772:	429c      	cmp	r4, r3
 8006774:	bf08      	it	eq
 8006776:	68ec      	ldreq	r4, [r5, #12]
 8006778:	e7cb      	b.n	8006712 <__swbuf_r+0x1a>
 800677a:	4621      	mov	r1, r4
 800677c:	4628      	mov	r0, r5
 800677e:	f000 f80d 	bl	800679c <__swsetup_r>
 8006782:	2800      	cmp	r0, #0
 8006784:	d0cc      	beq.n	8006720 <__swbuf_r+0x28>
 8006786:	f04f 37ff 	mov.w	r7, #4294967295
 800678a:	4638      	mov	r0, r7
 800678c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800678e:	bf00      	nop
 8006790:	080070a8 	.word	0x080070a8
 8006794:	080070c8 	.word	0x080070c8
 8006798:	08007088 	.word	0x08007088

0800679c <__swsetup_r>:
 800679c:	4b32      	ldr	r3, [pc, #200]	; (8006868 <__swsetup_r+0xcc>)
 800679e:	b570      	push	{r4, r5, r6, lr}
 80067a0:	681d      	ldr	r5, [r3, #0]
 80067a2:	4606      	mov	r6, r0
 80067a4:	460c      	mov	r4, r1
 80067a6:	b125      	cbz	r5, 80067b2 <__swsetup_r+0x16>
 80067a8:	69ab      	ldr	r3, [r5, #24]
 80067aa:	b913      	cbnz	r3, 80067b2 <__swsetup_r+0x16>
 80067ac:	4628      	mov	r0, r5
 80067ae:	f000 f953 	bl	8006a58 <__sinit>
 80067b2:	4b2e      	ldr	r3, [pc, #184]	; (800686c <__swsetup_r+0xd0>)
 80067b4:	429c      	cmp	r4, r3
 80067b6:	d10f      	bne.n	80067d8 <__swsetup_r+0x3c>
 80067b8:	686c      	ldr	r4, [r5, #4]
 80067ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067be:	b29a      	uxth	r2, r3
 80067c0:	0715      	lsls	r5, r2, #28
 80067c2:	d42c      	bmi.n	800681e <__swsetup_r+0x82>
 80067c4:	06d0      	lsls	r0, r2, #27
 80067c6:	d411      	bmi.n	80067ec <__swsetup_r+0x50>
 80067c8:	2209      	movs	r2, #9
 80067ca:	6032      	str	r2, [r6, #0]
 80067cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	f04f 30ff 	mov.w	r0, #4294967295
 80067d6:	e03e      	b.n	8006856 <__swsetup_r+0xba>
 80067d8:	4b25      	ldr	r3, [pc, #148]	; (8006870 <__swsetup_r+0xd4>)
 80067da:	429c      	cmp	r4, r3
 80067dc:	d101      	bne.n	80067e2 <__swsetup_r+0x46>
 80067de:	68ac      	ldr	r4, [r5, #8]
 80067e0:	e7eb      	b.n	80067ba <__swsetup_r+0x1e>
 80067e2:	4b24      	ldr	r3, [pc, #144]	; (8006874 <__swsetup_r+0xd8>)
 80067e4:	429c      	cmp	r4, r3
 80067e6:	bf08      	it	eq
 80067e8:	68ec      	ldreq	r4, [r5, #12]
 80067ea:	e7e6      	b.n	80067ba <__swsetup_r+0x1e>
 80067ec:	0751      	lsls	r1, r2, #29
 80067ee:	d512      	bpl.n	8006816 <__swsetup_r+0x7a>
 80067f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067f2:	b141      	cbz	r1, 8006806 <__swsetup_r+0x6a>
 80067f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067f8:	4299      	cmp	r1, r3
 80067fa:	d002      	beq.n	8006802 <__swsetup_r+0x66>
 80067fc:	4630      	mov	r0, r6
 80067fe:	f000 fa19 	bl	8006c34 <_free_r>
 8006802:	2300      	movs	r3, #0
 8006804:	6363      	str	r3, [r4, #52]	; 0x34
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	2300      	movs	r3, #0
 8006810:	6063      	str	r3, [r4, #4]
 8006812:	6923      	ldr	r3, [r4, #16]
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	f043 0308 	orr.w	r3, r3, #8
 800681c:	81a3      	strh	r3, [r4, #12]
 800681e:	6923      	ldr	r3, [r4, #16]
 8006820:	b94b      	cbnz	r3, 8006836 <__swsetup_r+0x9a>
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800682c:	d003      	beq.n	8006836 <__swsetup_r+0x9a>
 800682e:	4621      	mov	r1, r4
 8006830:	4630      	mov	r0, r6
 8006832:	f000 f9bf 	bl	8006bb4 <__smakebuf_r>
 8006836:	89a2      	ldrh	r2, [r4, #12]
 8006838:	f012 0301 	ands.w	r3, r2, #1
 800683c:	d00c      	beq.n	8006858 <__swsetup_r+0xbc>
 800683e:	2300      	movs	r3, #0
 8006840:	60a3      	str	r3, [r4, #8]
 8006842:	6963      	ldr	r3, [r4, #20]
 8006844:	425b      	negs	r3, r3
 8006846:	61a3      	str	r3, [r4, #24]
 8006848:	6923      	ldr	r3, [r4, #16]
 800684a:	b953      	cbnz	r3, 8006862 <__swsetup_r+0xc6>
 800684c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006850:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006854:	d1ba      	bne.n	80067cc <__swsetup_r+0x30>
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	0792      	lsls	r2, r2, #30
 800685a:	bf58      	it	pl
 800685c:	6963      	ldrpl	r3, [r4, #20]
 800685e:	60a3      	str	r3, [r4, #8]
 8006860:	e7f2      	b.n	8006848 <__swsetup_r+0xac>
 8006862:	2000      	movs	r0, #0
 8006864:	e7f7      	b.n	8006856 <__swsetup_r+0xba>
 8006866:	bf00      	nop
 8006868:	20000014 	.word	0x20000014
 800686c:	080070a8 	.word	0x080070a8
 8006870:	080070c8 	.word	0x080070c8
 8006874:	08007088 	.word	0x08007088

08006878 <__sflush_r>:
 8006878:	898a      	ldrh	r2, [r1, #12]
 800687a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800687e:	4605      	mov	r5, r0
 8006880:	0710      	lsls	r0, r2, #28
 8006882:	460c      	mov	r4, r1
 8006884:	d458      	bmi.n	8006938 <__sflush_r+0xc0>
 8006886:	684b      	ldr	r3, [r1, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	dc05      	bgt.n	8006898 <__sflush_r+0x20>
 800688c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	dc02      	bgt.n	8006898 <__sflush_r+0x20>
 8006892:	2000      	movs	r0, #0
 8006894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800689a:	2e00      	cmp	r6, #0
 800689c:	d0f9      	beq.n	8006892 <__sflush_r+0x1a>
 800689e:	2300      	movs	r3, #0
 80068a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068a4:	682f      	ldr	r7, [r5, #0]
 80068a6:	6a21      	ldr	r1, [r4, #32]
 80068a8:	602b      	str	r3, [r5, #0]
 80068aa:	d032      	beq.n	8006912 <__sflush_r+0x9a>
 80068ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	075a      	lsls	r2, r3, #29
 80068b2:	d505      	bpl.n	80068c0 <__sflush_r+0x48>
 80068b4:	6863      	ldr	r3, [r4, #4]
 80068b6:	1ac0      	subs	r0, r0, r3
 80068b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068ba:	b10b      	cbz	r3, 80068c0 <__sflush_r+0x48>
 80068bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068be:	1ac0      	subs	r0, r0, r3
 80068c0:	2300      	movs	r3, #0
 80068c2:	4602      	mov	r2, r0
 80068c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068c6:	6a21      	ldr	r1, [r4, #32]
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b0      	blx	r6
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	d106      	bne.n	80068e0 <__sflush_r+0x68>
 80068d2:	6829      	ldr	r1, [r5, #0]
 80068d4:	291d      	cmp	r1, #29
 80068d6:	d848      	bhi.n	800696a <__sflush_r+0xf2>
 80068d8:	4a29      	ldr	r2, [pc, #164]	; (8006980 <__sflush_r+0x108>)
 80068da:	40ca      	lsrs	r2, r1
 80068dc:	07d6      	lsls	r6, r2, #31
 80068de:	d544      	bpl.n	800696a <__sflush_r+0xf2>
 80068e0:	2200      	movs	r2, #0
 80068e2:	6062      	str	r2, [r4, #4]
 80068e4:	04d9      	lsls	r1, r3, #19
 80068e6:	6922      	ldr	r2, [r4, #16]
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	d504      	bpl.n	80068f6 <__sflush_r+0x7e>
 80068ec:	1c42      	adds	r2, r0, #1
 80068ee:	d101      	bne.n	80068f4 <__sflush_r+0x7c>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b903      	cbnz	r3, 80068f6 <__sflush_r+0x7e>
 80068f4:	6560      	str	r0, [r4, #84]	; 0x54
 80068f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068f8:	602f      	str	r7, [r5, #0]
 80068fa:	2900      	cmp	r1, #0
 80068fc:	d0c9      	beq.n	8006892 <__sflush_r+0x1a>
 80068fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006902:	4299      	cmp	r1, r3
 8006904:	d002      	beq.n	800690c <__sflush_r+0x94>
 8006906:	4628      	mov	r0, r5
 8006908:	f000 f994 	bl	8006c34 <_free_r>
 800690c:	2000      	movs	r0, #0
 800690e:	6360      	str	r0, [r4, #52]	; 0x34
 8006910:	e7c0      	b.n	8006894 <__sflush_r+0x1c>
 8006912:	2301      	movs	r3, #1
 8006914:	4628      	mov	r0, r5
 8006916:	47b0      	blx	r6
 8006918:	1c41      	adds	r1, r0, #1
 800691a:	d1c8      	bne.n	80068ae <__sflush_r+0x36>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0c5      	beq.n	80068ae <__sflush_r+0x36>
 8006922:	2b1d      	cmp	r3, #29
 8006924:	d001      	beq.n	800692a <__sflush_r+0xb2>
 8006926:	2b16      	cmp	r3, #22
 8006928:	d101      	bne.n	800692e <__sflush_r+0xb6>
 800692a:	602f      	str	r7, [r5, #0]
 800692c:	e7b1      	b.n	8006892 <__sflush_r+0x1a>
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006934:	81a3      	strh	r3, [r4, #12]
 8006936:	e7ad      	b.n	8006894 <__sflush_r+0x1c>
 8006938:	690f      	ldr	r7, [r1, #16]
 800693a:	2f00      	cmp	r7, #0
 800693c:	d0a9      	beq.n	8006892 <__sflush_r+0x1a>
 800693e:	0793      	lsls	r3, r2, #30
 8006940:	680e      	ldr	r6, [r1, #0]
 8006942:	bf08      	it	eq
 8006944:	694b      	ldreq	r3, [r1, #20]
 8006946:	600f      	str	r7, [r1, #0]
 8006948:	bf18      	it	ne
 800694a:	2300      	movne	r3, #0
 800694c:	eba6 0807 	sub.w	r8, r6, r7
 8006950:	608b      	str	r3, [r1, #8]
 8006952:	f1b8 0f00 	cmp.w	r8, #0
 8006956:	dd9c      	ble.n	8006892 <__sflush_r+0x1a>
 8006958:	4643      	mov	r3, r8
 800695a:	463a      	mov	r2, r7
 800695c:	6a21      	ldr	r1, [r4, #32]
 800695e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006960:	4628      	mov	r0, r5
 8006962:	47b0      	blx	r6
 8006964:	2800      	cmp	r0, #0
 8006966:	dc06      	bgt.n	8006976 <__sflush_r+0xfe>
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800696e:	81a3      	strh	r3, [r4, #12]
 8006970:	f04f 30ff 	mov.w	r0, #4294967295
 8006974:	e78e      	b.n	8006894 <__sflush_r+0x1c>
 8006976:	4407      	add	r7, r0
 8006978:	eba8 0800 	sub.w	r8, r8, r0
 800697c:	e7e9      	b.n	8006952 <__sflush_r+0xda>
 800697e:	bf00      	nop
 8006980:	20400001 	.word	0x20400001

08006984 <_fflush_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	690b      	ldr	r3, [r1, #16]
 8006988:	4605      	mov	r5, r0
 800698a:	460c      	mov	r4, r1
 800698c:	b1db      	cbz	r3, 80069c6 <_fflush_r+0x42>
 800698e:	b118      	cbz	r0, 8006998 <_fflush_r+0x14>
 8006990:	6983      	ldr	r3, [r0, #24]
 8006992:	b90b      	cbnz	r3, 8006998 <_fflush_r+0x14>
 8006994:	f000 f860 	bl	8006a58 <__sinit>
 8006998:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <_fflush_r+0x48>)
 800699a:	429c      	cmp	r4, r3
 800699c:	d109      	bne.n	80069b2 <_fflush_r+0x2e>
 800699e:	686c      	ldr	r4, [r5, #4]
 80069a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069a4:	b17b      	cbz	r3, 80069c6 <_fflush_r+0x42>
 80069a6:	4621      	mov	r1, r4
 80069a8:	4628      	mov	r0, r5
 80069aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ae:	f7ff bf63 	b.w	8006878 <__sflush_r>
 80069b2:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <_fflush_r+0x4c>)
 80069b4:	429c      	cmp	r4, r3
 80069b6:	d101      	bne.n	80069bc <_fflush_r+0x38>
 80069b8:	68ac      	ldr	r4, [r5, #8]
 80069ba:	e7f1      	b.n	80069a0 <_fflush_r+0x1c>
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <_fflush_r+0x50>)
 80069be:	429c      	cmp	r4, r3
 80069c0:	bf08      	it	eq
 80069c2:	68ec      	ldreq	r4, [r5, #12]
 80069c4:	e7ec      	b.n	80069a0 <_fflush_r+0x1c>
 80069c6:	2000      	movs	r0, #0
 80069c8:	bd38      	pop	{r3, r4, r5, pc}
 80069ca:	bf00      	nop
 80069cc:	080070a8 	.word	0x080070a8
 80069d0:	080070c8 	.word	0x080070c8
 80069d4:	08007088 	.word	0x08007088

080069d8 <std>:
 80069d8:	2300      	movs	r3, #0
 80069da:	b510      	push	{r4, lr}
 80069dc:	4604      	mov	r4, r0
 80069de:	e9c0 3300 	strd	r3, r3, [r0]
 80069e2:	6083      	str	r3, [r0, #8]
 80069e4:	8181      	strh	r1, [r0, #12]
 80069e6:	6643      	str	r3, [r0, #100]	; 0x64
 80069e8:	81c2      	strh	r2, [r0, #14]
 80069ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ee:	6183      	str	r3, [r0, #24]
 80069f0:	4619      	mov	r1, r3
 80069f2:	2208      	movs	r2, #8
 80069f4:	305c      	adds	r0, #92	; 0x5c
 80069f6:	f7ff fe13 	bl	8006620 <memset>
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <std+0x38>)
 80069fc:	6263      	str	r3, [r4, #36]	; 0x24
 80069fe:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <std+0x3c>)
 8006a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a02:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <std+0x40>)
 8006a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <std+0x44>)
 8006a08:	6224      	str	r4, [r4, #32]
 8006a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8006a0c:	bd10      	pop	{r4, pc}
 8006a0e:	bf00      	nop
 8006a10:	08006da5 	.word	0x08006da5
 8006a14:	08006dc7 	.word	0x08006dc7
 8006a18:	08006dff 	.word	0x08006dff
 8006a1c:	08006e23 	.word	0x08006e23

08006a20 <_cleanup_r>:
 8006a20:	4901      	ldr	r1, [pc, #4]	; (8006a28 <_cleanup_r+0x8>)
 8006a22:	f000 b885 	b.w	8006b30 <_fwalk_reent>
 8006a26:	bf00      	nop
 8006a28:	08006985 	.word	0x08006985

08006a2c <__sfmoreglue>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	1e4a      	subs	r2, r1, #1
 8006a30:	2568      	movs	r5, #104	; 0x68
 8006a32:	4355      	muls	r5, r2
 8006a34:	460e      	mov	r6, r1
 8006a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a3a:	f000 f949 	bl	8006cd0 <_malloc_r>
 8006a3e:	4604      	mov	r4, r0
 8006a40:	b140      	cbz	r0, 8006a54 <__sfmoreglue+0x28>
 8006a42:	2100      	movs	r1, #0
 8006a44:	e9c0 1600 	strd	r1, r6, [r0]
 8006a48:	300c      	adds	r0, #12
 8006a4a:	60a0      	str	r0, [r4, #8]
 8006a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a50:	f7ff fde6 	bl	8006620 <memset>
 8006a54:	4620      	mov	r0, r4
 8006a56:	bd70      	pop	{r4, r5, r6, pc}

08006a58 <__sinit>:
 8006a58:	6983      	ldr	r3, [r0, #24]
 8006a5a:	b510      	push	{r4, lr}
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	bb33      	cbnz	r3, 8006aae <__sinit+0x56>
 8006a60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006a64:	6503      	str	r3, [r0, #80]	; 0x50
 8006a66:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <__sinit+0x58>)
 8006a68:	4a12      	ldr	r2, [pc, #72]	; (8006ab4 <__sinit+0x5c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6282      	str	r2, [r0, #40]	; 0x28
 8006a6e:	4298      	cmp	r0, r3
 8006a70:	bf04      	itt	eq
 8006a72:	2301      	moveq	r3, #1
 8006a74:	6183      	streq	r3, [r0, #24]
 8006a76:	f000 f81f 	bl	8006ab8 <__sfp>
 8006a7a:	6060      	str	r0, [r4, #4]
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 f81b 	bl	8006ab8 <__sfp>
 8006a82:	60a0      	str	r0, [r4, #8]
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 f817 	bl	8006ab8 <__sfp>
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	60e0      	str	r0, [r4, #12]
 8006a8e:	2104      	movs	r1, #4
 8006a90:	6860      	ldr	r0, [r4, #4]
 8006a92:	f7ff ffa1 	bl	80069d8 <std>
 8006a96:	2201      	movs	r2, #1
 8006a98:	2109      	movs	r1, #9
 8006a9a:	68a0      	ldr	r0, [r4, #8]
 8006a9c:	f7ff ff9c 	bl	80069d8 <std>
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	2112      	movs	r1, #18
 8006aa4:	68e0      	ldr	r0, [r4, #12]
 8006aa6:	f7ff ff97 	bl	80069d8 <std>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	61a3      	str	r3, [r4, #24]
 8006aae:	bd10      	pop	{r4, pc}
 8006ab0:	08007084 	.word	0x08007084
 8006ab4:	08006a21 	.word	0x08006a21

08006ab8 <__sfp>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <__sfp+0x70>)
 8006abc:	681e      	ldr	r6, [r3, #0]
 8006abe:	69b3      	ldr	r3, [r6, #24]
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	b913      	cbnz	r3, 8006aca <__sfp+0x12>
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7ff ffc7 	bl	8006a58 <__sinit>
 8006aca:	3648      	adds	r6, #72	; 0x48
 8006acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	d503      	bpl.n	8006adc <__sfp+0x24>
 8006ad4:	6833      	ldr	r3, [r6, #0]
 8006ad6:	b133      	cbz	r3, 8006ae6 <__sfp+0x2e>
 8006ad8:	6836      	ldr	r6, [r6, #0]
 8006ada:	e7f7      	b.n	8006acc <__sfp+0x14>
 8006adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ae0:	b16d      	cbz	r5, 8006afe <__sfp+0x46>
 8006ae2:	3468      	adds	r4, #104	; 0x68
 8006ae4:	e7f4      	b.n	8006ad0 <__sfp+0x18>
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f7ff ff9f 	bl	8006a2c <__sfmoreglue>
 8006aee:	6030      	str	r0, [r6, #0]
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d1f1      	bne.n	8006ad8 <__sfp+0x20>
 8006af4:	230c      	movs	r3, #12
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	4604      	mov	r4, r0
 8006afa:	4620      	mov	r0, r4
 8006afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006afe:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <__sfp+0x74>)
 8006b00:	6665      	str	r5, [r4, #100]	; 0x64
 8006b02:	e9c4 5500 	strd	r5, r5, [r4]
 8006b06:	60a5      	str	r5, [r4, #8]
 8006b08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006b0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006b10:	2208      	movs	r2, #8
 8006b12:	4629      	mov	r1, r5
 8006b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b18:	f7ff fd82 	bl	8006620 <memset>
 8006b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b24:	e7e9      	b.n	8006afa <__sfp+0x42>
 8006b26:	bf00      	nop
 8006b28:	08007084 	.word	0x08007084
 8006b2c:	ffff0001 	.word	0xffff0001

08006b30 <_fwalk_reent>:
 8006b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b34:	4680      	mov	r8, r0
 8006b36:	4689      	mov	r9, r1
 8006b38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b3c:	2600      	movs	r6, #0
 8006b3e:	b914      	cbnz	r4, 8006b46 <_fwalk_reent+0x16>
 8006b40:	4630      	mov	r0, r6
 8006b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006b4a:	3f01      	subs	r7, #1
 8006b4c:	d501      	bpl.n	8006b52 <_fwalk_reent+0x22>
 8006b4e:	6824      	ldr	r4, [r4, #0]
 8006b50:	e7f5      	b.n	8006b3e <_fwalk_reent+0xe>
 8006b52:	89ab      	ldrh	r3, [r5, #12]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d907      	bls.n	8006b68 <_fwalk_reent+0x38>
 8006b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	d003      	beq.n	8006b68 <_fwalk_reent+0x38>
 8006b60:	4629      	mov	r1, r5
 8006b62:	4640      	mov	r0, r8
 8006b64:	47c8      	blx	r9
 8006b66:	4306      	orrs	r6, r0
 8006b68:	3568      	adds	r5, #104	; 0x68
 8006b6a:	e7ee      	b.n	8006b4a <_fwalk_reent+0x1a>

08006b6c <__swhatbuf_r>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	460e      	mov	r6, r1
 8006b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b74:	2900      	cmp	r1, #0
 8006b76:	b096      	sub	sp, #88	; 0x58
 8006b78:	4614      	mov	r4, r2
 8006b7a:	461d      	mov	r5, r3
 8006b7c:	da07      	bge.n	8006b8e <__swhatbuf_r+0x22>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	89b3      	ldrh	r3, [r6, #12]
 8006b84:	061a      	lsls	r2, r3, #24
 8006b86:	d410      	bmi.n	8006baa <__swhatbuf_r+0x3e>
 8006b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b8c:	e00e      	b.n	8006bac <__swhatbuf_r+0x40>
 8006b8e:	466a      	mov	r2, sp
 8006b90:	f000 f95c 	bl	8006e4c <_fstat_r>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	dbf2      	blt.n	8006b7e <__swhatbuf_r+0x12>
 8006b98:	9a01      	ldr	r2, [sp, #4]
 8006b9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ba2:	425a      	negs	r2, r3
 8006ba4:	415a      	adcs	r2, r3
 8006ba6:	602a      	str	r2, [r5, #0]
 8006ba8:	e7ee      	b.n	8006b88 <__swhatbuf_r+0x1c>
 8006baa:	2340      	movs	r3, #64	; 0x40
 8006bac:	2000      	movs	r0, #0
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	b016      	add	sp, #88	; 0x58
 8006bb2:	bd70      	pop	{r4, r5, r6, pc}

08006bb4 <__smakebuf_r>:
 8006bb4:	898b      	ldrh	r3, [r1, #12]
 8006bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bb8:	079d      	lsls	r5, r3, #30
 8006bba:	4606      	mov	r6, r0
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	d507      	bpl.n	8006bd0 <__smakebuf_r+0x1c>
 8006bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	2301      	movs	r3, #1
 8006bca:	6163      	str	r3, [r4, #20]
 8006bcc:	b002      	add	sp, #8
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	ab01      	add	r3, sp, #4
 8006bd2:	466a      	mov	r2, sp
 8006bd4:	f7ff ffca 	bl	8006b6c <__swhatbuf_r>
 8006bd8:	9900      	ldr	r1, [sp, #0]
 8006bda:	4605      	mov	r5, r0
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f000 f877 	bl	8006cd0 <_malloc_r>
 8006be2:	b948      	cbnz	r0, 8006bf8 <__smakebuf_r+0x44>
 8006be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be8:	059a      	lsls	r2, r3, #22
 8006bea:	d4ef      	bmi.n	8006bcc <__smakebuf_r+0x18>
 8006bec:	f023 0303 	bic.w	r3, r3, #3
 8006bf0:	f043 0302 	orr.w	r3, r3, #2
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	e7e3      	b.n	8006bc0 <__smakebuf_r+0xc>
 8006bf8:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <__smakebuf_r+0x7c>)
 8006bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	6020      	str	r0, [r4, #0]
 8006c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c04:	81a3      	strh	r3, [r4, #12]
 8006c06:	9b00      	ldr	r3, [sp, #0]
 8006c08:	6163      	str	r3, [r4, #20]
 8006c0a:	9b01      	ldr	r3, [sp, #4]
 8006c0c:	6120      	str	r0, [r4, #16]
 8006c0e:	b15b      	cbz	r3, 8006c28 <__smakebuf_r+0x74>
 8006c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c14:	4630      	mov	r0, r6
 8006c16:	f000 f92b 	bl	8006e70 <_isatty_r>
 8006c1a:	b128      	cbz	r0, 8006c28 <__smakebuf_r+0x74>
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	f043 0301 	orr.w	r3, r3, #1
 8006c26:	81a3      	strh	r3, [r4, #12]
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	431d      	orrs	r5, r3
 8006c2c:	81a5      	strh	r5, [r4, #12]
 8006c2e:	e7cd      	b.n	8006bcc <__smakebuf_r+0x18>
 8006c30:	08006a21 	.word	0x08006a21

08006c34 <_free_r>:
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	4605      	mov	r5, r0
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	d045      	beq.n	8006cc8 <_free_r+0x94>
 8006c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c40:	1f0c      	subs	r4, r1, #4
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	bfb8      	it	lt
 8006c46:	18e4      	addlt	r4, r4, r3
 8006c48:	f000 f934 	bl	8006eb4 <__malloc_lock>
 8006c4c:	4a1f      	ldr	r2, [pc, #124]	; (8006ccc <_free_r+0x98>)
 8006c4e:	6813      	ldr	r3, [r2, #0]
 8006c50:	4610      	mov	r0, r2
 8006c52:	b933      	cbnz	r3, 8006c62 <_free_r+0x2e>
 8006c54:	6063      	str	r3, [r4, #4]
 8006c56:	6014      	str	r4, [r2, #0]
 8006c58:	4628      	mov	r0, r5
 8006c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c5e:	f000 b92a 	b.w	8006eb6 <__malloc_unlock>
 8006c62:	42a3      	cmp	r3, r4
 8006c64:	d90c      	bls.n	8006c80 <_free_r+0x4c>
 8006c66:	6821      	ldr	r1, [r4, #0]
 8006c68:	1862      	adds	r2, r4, r1
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	bf04      	itt	eq
 8006c6e:	681a      	ldreq	r2, [r3, #0]
 8006c70:	685b      	ldreq	r3, [r3, #4]
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	bf04      	itt	eq
 8006c76:	1852      	addeq	r2, r2, r1
 8006c78:	6022      	streq	r2, [r4, #0]
 8006c7a:	6004      	str	r4, [r0, #0]
 8006c7c:	e7ec      	b.n	8006c58 <_free_r+0x24>
 8006c7e:	4613      	mov	r3, r2
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	b10a      	cbz	r2, 8006c88 <_free_r+0x54>
 8006c84:	42a2      	cmp	r2, r4
 8006c86:	d9fa      	bls.n	8006c7e <_free_r+0x4a>
 8006c88:	6819      	ldr	r1, [r3, #0]
 8006c8a:	1858      	adds	r0, r3, r1
 8006c8c:	42a0      	cmp	r0, r4
 8006c8e:	d10b      	bne.n	8006ca8 <_free_r+0x74>
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	4401      	add	r1, r0
 8006c94:	1858      	adds	r0, r3, r1
 8006c96:	4282      	cmp	r2, r0
 8006c98:	6019      	str	r1, [r3, #0]
 8006c9a:	d1dd      	bne.n	8006c58 <_free_r+0x24>
 8006c9c:	6810      	ldr	r0, [r2, #0]
 8006c9e:	6852      	ldr	r2, [r2, #4]
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	4401      	add	r1, r0
 8006ca4:	6019      	str	r1, [r3, #0]
 8006ca6:	e7d7      	b.n	8006c58 <_free_r+0x24>
 8006ca8:	d902      	bls.n	8006cb0 <_free_r+0x7c>
 8006caa:	230c      	movs	r3, #12
 8006cac:	602b      	str	r3, [r5, #0]
 8006cae:	e7d3      	b.n	8006c58 <_free_r+0x24>
 8006cb0:	6820      	ldr	r0, [r4, #0]
 8006cb2:	1821      	adds	r1, r4, r0
 8006cb4:	428a      	cmp	r2, r1
 8006cb6:	bf04      	itt	eq
 8006cb8:	6811      	ldreq	r1, [r2, #0]
 8006cba:	6852      	ldreq	r2, [r2, #4]
 8006cbc:	6062      	str	r2, [r4, #4]
 8006cbe:	bf04      	itt	eq
 8006cc0:	1809      	addeq	r1, r1, r0
 8006cc2:	6021      	streq	r1, [r4, #0]
 8006cc4:	605c      	str	r4, [r3, #4]
 8006cc6:	e7c7      	b.n	8006c58 <_free_r+0x24>
 8006cc8:	bd38      	pop	{r3, r4, r5, pc}
 8006cca:	bf00      	nop
 8006ccc:	200143d0 	.word	0x200143d0

08006cd0 <_malloc_r>:
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	1ccd      	adds	r5, r1, #3
 8006cd4:	f025 0503 	bic.w	r5, r5, #3
 8006cd8:	3508      	adds	r5, #8
 8006cda:	2d0c      	cmp	r5, #12
 8006cdc:	bf38      	it	cc
 8006cde:	250c      	movcc	r5, #12
 8006ce0:	2d00      	cmp	r5, #0
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	db01      	blt.n	8006cea <_malloc_r+0x1a>
 8006ce6:	42a9      	cmp	r1, r5
 8006ce8:	d903      	bls.n	8006cf2 <_malloc_r+0x22>
 8006cea:	230c      	movs	r3, #12
 8006cec:	6033      	str	r3, [r6, #0]
 8006cee:	2000      	movs	r0, #0
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
 8006cf2:	f000 f8df 	bl	8006eb4 <__malloc_lock>
 8006cf6:	4a21      	ldr	r2, [pc, #132]	; (8006d7c <_malloc_r+0xac>)
 8006cf8:	6814      	ldr	r4, [r2, #0]
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	b991      	cbnz	r1, 8006d24 <_malloc_r+0x54>
 8006cfe:	4c20      	ldr	r4, [pc, #128]	; (8006d80 <_malloc_r+0xb0>)
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	b91b      	cbnz	r3, 8006d0c <_malloc_r+0x3c>
 8006d04:	4630      	mov	r0, r6
 8006d06:	f000 f83d 	bl	8006d84 <_sbrk_r>
 8006d0a:	6020      	str	r0, [r4, #0]
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f000 f838 	bl	8006d84 <_sbrk_r>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d124      	bne.n	8006d62 <_malloc_r+0x92>
 8006d18:	230c      	movs	r3, #12
 8006d1a:	6033      	str	r3, [r6, #0]
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f000 f8ca 	bl	8006eb6 <__malloc_unlock>
 8006d22:	e7e4      	b.n	8006cee <_malloc_r+0x1e>
 8006d24:	680b      	ldr	r3, [r1, #0]
 8006d26:	1b5b      	subs	r3, r3, r5
 8006d28:	d418      	bmi.n	8006d5c <_malloc_r+0x8c>
 8006d2a:	2b0b      	cmp	r3, #11
 8006d2c:	d90f      	bls.n	8006d4e <_malloc_r+0x7e>
 8006d2e:	600b      	str	r3, [r1, #0]
 8006d30:	50cd      	str	r5, [r1, r3]
 8006d32:	18cc      	adds	r4, r1, r3
 8006d34:	4630      	mov	r0, r6
 8006d36:	f000 f8be 	bl	8006eb6 <__malloc_unlock>
 8006d3a:	f104 000b 	add.w	r0, r4, #11
 8006d3e:	1d23      	adds	r3, r4, #4
 8006d40:	f020 0007 	bic.w	r0, r0, #7
 8006d44:	1ac3      	subs	r3, r0, r3
 8006d46:	d0d3      	beq.n	8006cf0 <_malloc_r+0x20>
 8006d48:	425a      	negs	r2, r3
 8006d4a:	50e2      	str	r2, [r4, r3]
 8006d4c:	e7d0      	b.n	8006cf0 <_malloc_r+0x20>
 8006d4e:	428c      	cmp	r4, r1
 8006d50:	684b      	ldr	r3, [r1, #4]
 8006d52:	bf16      	itet	ne
 8006d54:	6063      	strne	r3, [r4, #4]
 8006d56:	6013      	streq	r3, [r2, #0]
 8006d58:	460c      	movne	r4, r1
 8006d5a:	e7eb      	b.n	8006d34 <_malloc_r+0x64>
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	6849      	ldr	r1, [r1, #4]
 8006d60:	e7cc      	b.n	8006cfc <_malloc_r+0x2c>
 8006d62:	1cc4      	adds	r4, r0, #3
 8006d64:	f024 0403 	bic.w	r4, r4, #3
 8006d68:	42a0      	cmp	r0, r4
 8006d6a:	d005      	beq.n	8006d78 <_malloc_r+0xa8>
 8006d6c:	1a21      	subs	r1, r4, r0
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f000 f808 	bl	8006d84 <_sbrk_r>
 8006d74:	3001      	adds	r0, #1
 8006d76:	d0cf      	beq.n	8006d18 <_malloc_r+0x48>
 8006d78:	6025      	str	r5, [r4, #0]
 8006d7a:	e7db      	b.n	8006d34 <_malloc_r+0x64>
 8006d7c:	200143d0 	.word	0x200143d0
 8006d80:	200143d4 	.word	0x200143d4

08006d84 <_sbrk_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4c06      	ldr	r4, [pc, #24]	; (8006da0 <_sbrk_r+0x1c>)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	f7fb f8c8 	bl	8001f24 <_sbrk>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_sbrk_r+0x1a>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_sbrk_r+0x1a>
 8006d9c:	602b      	str	r3, [r5, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	20014504 	.word	0x20014504

08006da4 <__sread>:
 8006da4:	b510      	push	{r4, lr}
 8006da6:	460c      	mov	r4, r1
 8006da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dac:	f000 f884 	bl	8006eb8 <_read_r>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	bfab      	itete	ge
 8006db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006db6:	89a3      	ldrhlt	r3, [r4, #12]
 8006db8:	181b      	addge	r3, r3, r0
 8006dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dbe:	bfac      	ite	ge
 8006dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dc2:	81a3      	strhlt	r3, [r4, #12]
 8006dc4:	bd10      	pop	{r4, pc}

08006dc6 <__swrite>:
 8006dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dca:	461f      	mov	r7, r3
 8006dcc:	898b      	ldrh	r3, [r1, #12]
 8006dce:	05db      	lsls	r3, r3, #23
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	4616      	mov	r6, r2
 8006dd6:	d505      	bpl.n	8006de4 <__swrite+0x1e>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de0:	f000 f856 	bl	8006e90 <_lseek_r>
 8006de4:	89a3      	ldrh	r3, [r4, #12]
 8006de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dee:	81a3      	strh	r3, [r4, #12]
 8006df0:	4632      	mov	r2, r6
 8006df2:	463b      	mov	r3, r7
 8006df4:	4628      	mov	r0, r5
 8006df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dfa:	f7ff bbbb 	b.w	8006574 <_write_r>

08006dfe <__sseek>:
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	460c      	mov	r4, r1
 8006e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e06:	f000 f843 	bl	8006e90 <_lseek_r>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	bf15      	itete	ne
 8006e10:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e1a:	81a3      	strheq	r3, [r4, #12]
 8006e1c:	bf18      	it	ne
 8006e1e:	81a3      	strhne	r3, [r4, #12]
 8006e20:	bd10      	pop	{r4, pc}

08006e22 <__sclose>:
 8006e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e26:	f000 b801 	b.w	8006e2c <_close_r>
	...

08006e2c <_close_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4c06      	ldr	r4, [pc, #24]	; (8006e48 <_close_r+0x1c>)
 8006e30:	2300      	movs	r3, #0
 8006e32:	4605      	mov	r5, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	6023      	str	r3, [r4, #0]
 8006e38:	f7fb f83f 	bl	8001eba <_close>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_close_r+0x1a>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_close_r+0x1a>
 8006e44:	602b      	str	r3, [r5, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20014504 	.word	0x20014504

08006e4c <_fstat_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4c07      	ldr	r4, [pc, #28]	; (8006e6c <_fstat_r+0x20>)
 8006e50:	2300      	movs	r3, #0
 8006e52:	4605      	mov	r5, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	4611      	mov	r1, r2
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	f7fb f83a 	bl	8001ed2 <_fstat>
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	d102      	bne.n	8006e68 <_fstat_r+0x1c>
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	b103      	cbz	r3, 8006e68 <_fstat_r+0x1c>
 8006e66:	602b      	str	r3, [r5, #0]
 8006e68:	bd38      	pop	{r3, r4, r5, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20014504 	.word	0x20014504

08006e70 <_isatty_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4c06      	ldr	r4, [pc, #24]	; (8006e8c <_isatty_r+0x1c>)
 8006e74:	2300      	movs	r3, #0
 8006e76:	4605      	mov	r5, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	6023      	str	r3, [r4, #0]
 8006e7c:	f7fb f839 	bl	8001ef2 <_isatty>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_isatty_r+0x1a>
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_isatty_r+0x1a>
 8006e88:	602b      	str	r3, [r5, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	20014504 	.word	0x20014504

08006e90 <_lseek_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4c07      	ldr	r4, [pc, #28]	; (8006eb0 <_lseek_r+0x20>)
 8006e94:	4605      	mov	r5, r0
 8006e96:	4608      	mov	r0, r1
 8006e98:	4611      	mov	r1, r2
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	6022      	str	r2, [r4, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f7fb f832 	bl	8001f08 <_lseek>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_lseek_r+0x1e>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_lseek_r+0x1e>
 8006eac:	602b      	str	r3, [r5, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	20014504 	.word	0x20014504

08006eb4 <__malloc_lock>:
 8006eb4:	4770      	bx	lr

08006eb6 <__malloc_unlock>:
 8006eb6:	4770      	bx	lr

08006eb8 <_read_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4c07      	ldr	r4, [pc, #28]	; (8006ed8 <_read_r+0x20>)
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	4608      	mov	r0, r1
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	6022      	str	r2, [r4, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f7fa ffda 	bl	8001e80 <_read>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d102      	bne.n	8006ed6 <_read_r+0x1e>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	b103      	cbz	r3, 8006ed6 <_read_r+0x1e>
 8006ed4:	602b      	str	r3, [r5, #0]
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	20014504 	.word	0x20014504

08006edc <_init>:
 8006edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ede:	bf00      	nop
 8006ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee2:	bc08      	pop	{r3}
 8006ee4:	469e      	mov	lr, r3
 8006ee6:	4770      	bx	lr

08006ee8 <_fini>:
 8006ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eea:	bf00      	nop
 8006eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eee:	bc08      	pop	{r3}
 8006ef0:	469e      	mov	lr, r3
 8006ef2:	4770      	bx	lr
